<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<title>Elixir Lang</title>
<link href="http://elixir-lang.org/atom.xml" rel="self"/>
<link href="http://elixir-lang.org"/>
<updated>2022-06-30T13:44:39+00:00</updated>
<id>http://elixir-lang.org</id>


<entry>
  <title>Elixir v1.13 released</title>
  <link href="http://elixir-lang.org/blog/2021/12/03/elixir-v1-13-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-12-03T00:00:00+00:00</updated>
  <id>/blog/2021/12/03/elixir-v1-13-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.13 has just been released!&lt;/p&gt;

&lt;p&gt;Generally speaking, new Elixir versions include improvements to its primary API, the one Elixir developers use every day, and also to the foundation that powers its tooling. In this release, however, it coincided that most new functionality centers around Elixir tooling. The result is a series of quality of life improvements that will impact Elixir developers immediately as well as in the long term.&lt;/p&gt;

&lt;p&gt;Let’s check them out!&lt;/p&gt;

&lt;p&gt;Note: this announcement contains &lt;a href=&quot;https://asciinema.org&quot;&gt;asciinema&lt;/a&gt; snippets. You may need to enable 3rd-party JavaScript on this site in order to see them. If JavaScript is disabled, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noscript&lt;/code&gt; tags with the proper links will be shown.&lt;/p&gt;

&lt;h2 id=&quot;semantic-recompilation&quot;&gt;Semantic recompilation&lt;/h2&gt;

&lt;p&gt;The feature that will most and immediately benefit all Elixir developers is the series of improvements we have made to how the compiler tracks file contents.&lt;/p&gt;

&lt;p&gt;Generally speaking, once a file changes, it may lead to other files in your codebase to be recompiled. In previous versions, however, Elixir made no effort to understand which parts of the file changed. This meant the smallest of changes to certain files, such as configuration files, could trigger a full project recompilation.&lt;/p&gt;

&lt;p&gt;This release comes with a series of improvements that better understand how your files change. In particular:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;An Elixir file is no longer considered as changed if its size and its digest stay the same. This avoids recompiling many files when switching or rebasing branches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Changing your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; will no longer trigger a full project recompilation, unless you specifically change the configurations used by the Elixir compiler (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:elixirc_paths&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:elixirc_options&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Changing compile-time configuration files (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt; and any other files imported from it) now only recompiles the project files that depend on the reconfigured applications, instead of a full project recompilation. However, if you change the configuration of your application itself, the whole project is still recompiled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adding, updating or removing a dependency now only recompiles the project files that depend on the modified dependency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If your project has both Erlang and Elixir files, changing an Erlang file will now recompile only the Elixir files that depend on it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell, Elixir went from triggering full recompilations whenever any of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/*&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.lock&lt;/code&gt; changed on disk to semantic recompilations. Now it only fully recompiles when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you change the compilation options in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;you change the configuration for the current project in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To give a more practical example, take a regular &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;Phoenix project&lt;/a&gt;. It is most likely divided in two main directories: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app_web&lt;/code&gt;. Most of your usage of Phoenix’ APIs will happen within the files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app_web&lt;/code&gt; directory. However, if you bumped your Phoenix version or changed its configuration in previous Elixir versions, it would cause all files, in both directories, to be recompiled. With these changes, the recompilation should affect mostly the files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app_web&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To further clarify, the Elixir compiler is not tracking directories. It is just a consequence of how Phoenix projects are organized that most dependencies to Phoenix are within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_app_web&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;code-fragments&quot;&gt;Code fragments&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt;&lt;/a&gt; module got a companion module called &lt;a href=&quot;https://hexdocs.pm/elixir/Code.Fragment.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.Fragment&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt; module works with complete code. For example, its functions will consider the snippet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;123 +&lt;/code&gt; as invalid, since the right-hand side of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; is missing. However, our tooling, such as editors, REPLs, and code notebooks must still parse and understand such snippets, in order to provide code completion, argument suggestion, etc.&lt;/p&gt;

&lt;p&gt;That’s the goal of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.Fragment&lt;/code&gt; module. It contains different heuristics to analyze and return context informational of code fragments, which are code snippets that may be incomplete.&lt;/p&gt;

&lt;p&gt;To better show the benefits of said improvements, let’s talk about IEx, Elixir’s interactive shell. IEx has been rewritten to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.Fragment&lt;/code&gt; and, in the process, it gained new functionality as part of its autocompletion system (available by hitting TAB). For example, it can now autocomplete sigils, used to &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_r/2&quot;&gt;create regexes&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#sigil_w/2&quot;&gt;lists of words&lt;/a&gt;, and their terminators:&lt;/p&gt;

&lt;script id=&quot;asciicast-By0cGpu9xSUgflc24cVlLgPgY&quot; src=&quot;https://asciinema.org/a/By0cGpu9xSUgflc24cVlLgPgY.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/By0cGpu9xSUgflc24cVlLgPgY&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;Similarly, you can now autocomplete struct names and their fields:&lt;/p&gt;

&lt;script id=&quot;asciicast-A44auZ00saSud3l7DbOL4IMYn&quot; src=&quot;https://asciinema.org/a/A44auZ00saSud3l7DbOL4IMYn.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/A44auZ00saSud3l7DbOL4IMYn&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;Overall, we hope the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.Fragment&lt;/code&gt; module will become the shared foundation to power many of the tools in the ecosystem. We have also added new reflection APIs to &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Module&lt;/code&gt;&lt;/a&gt;, which can then be used to power code intelligence features.&lt;/p&gt;

&lt;h2 id=&quot;mix-xref&quot;&gt;mix xref&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Xref.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt;&lt;/a&gt; is a tool that analyzes relationships between files. By analyzing the compile-time and runtime dependencies between them, it allows developers to understand what has to be recompiled whenever a file changes.&lt;/p&gt;

&lt;p&gt;Elixir v1.13 comes with many improvements to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt;, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref graph&lt;/code&gt; now supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--label&lt;/code&gt; to be set to “compile-connected”, which returns all compile-time dependencies that lead to additional transitive dependencies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref trace FILE&lt;/code&gt; subcommand receives a file and returns all dependencies in said file, including the line and what caused said dependency (a function/macro call, an alias, a struct, etc).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; subcommands support the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--fail-above&lt;/code&gt; flag, which allows you to enforce your project has at most a certain number of compile-time cycles, transitive compile-time dependencies, etc. This can be useful on Continuous Integration (CI) servers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref graph&lt;/code&gt; now supports multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--sink&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--source&lt;/code&gt; to be given.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you haven’t used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; before, it may be hard to visualize what those changes mean. If you want to learn more, you can &lt;a href=&quot;https://youtu.be/ydjx2kKHzrM?t=772&quot;&gt;watch the relevant section of my ElixirConf 2021 keynote&lt;/a&gt; that includes a short introduction to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Those improvements came from direct feedback from the community. A special shout out to Marc-André Lafortune for the contributions and testing.&lt;/p&gt;

&lt;h2 id=&quot;extended-code-formatting&quot;&gt;Extended code formatting&lt;/h2&gt;

&lt;p&gt;Thanks to its sigils, Elixir provides the ability of embedding snippets in other languages inside its source code. One could use it to embed XML:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~X&quot;&quot;&quot;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;text&amp;gt;&amp;lt;![CDATA[Hello World]]&amp;gt;&amp;lt;/text&amp;gt;
&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or even &lt;a href=&quot;https://ziglang.org/&quot;&gt;Zig&lt;/a&gt;, &lt;a href=&quot;https://github.com/ityonemo/zigler&quot;&gt;via the Zigler project&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~Z&quot;&quot;&quot;
/// nif: example_fun/2
fn example_fun(value1: f64, value2: f64) bool {
  return value1 &amp;gt; value2;
}
&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, while you can format Elixir source code with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Format.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix format&lt;/code&gt;&lt;/a&gt;, you could not format the code inside snippets.&lt;/p&gt;

&lt;p&gt;Elixir v1.13 solves this by adding plugins to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix format&lt;/code&gt;. Plugins can teach the formatter how to format new files and how to format sigils, via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.Tasks.Format&lt;/code&gt; behaviour.&lt;/p&gt;

&lt;p&gt;For example, imagine that your project uses Markdown in two distinct ways: via a custom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~M&lt;/code&gt; sigil and via files with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.markdown&lt;/code&gt; extensions. A custom plugin would look like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MixMarkdownFormatter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@behaviour&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Format&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;sigils:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;extensions:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.markdown&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# logic that formats markdown&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now any application can use your formatter as follows:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# .formatter.exs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Define the desired plugins&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;plugins:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MixMarkdownFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Remember to update the inputs list to include the new extensions&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;inputs:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{mix,.formatter}.exs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{config,lib,test}/**/*.{ex,exs}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;posts/*.{md,markdown}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are looking forward to see how this new functionality will be used by community, especially projects like &lt;a href=&quot;https://github.com/surface-ui/surface&quot;&gt;Surface&lt;/a&gt; and &lt;a href=&quot;https://github.com/phoenixframework/phoenix_live_view&quot;&gt;Phoenix LiveView&lt;/a&gt;, which provide a templating language on top of the HTML markup.&lt;/p&gt;

&lt;h2 id=&quot;other-bits-and-bytes&quot;&gt;Other bits and bytes&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SyntaxError&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TokenMissingError&lt;/code&gt; were improved to show a code snippet whenever possible:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ elixir -e &quot;hello + * world&quot;
** (SyntaxError) nofile:1:9: syntax error before: '*'
    |
  1 | hello + * world
    |         ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt; module has also been augmented with two functions: &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#string_to_quoted_with_comments/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.string_to_quoted_with_comments/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#quoted_to_algebra/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.quoted_to_algebra/2&lt;/code&gt;&lt;/a&gt;. Those functions allow someone to retrieve the Elixir AST with their original source code comments, and then convert this AST to formatted code. In other words, those functions provide a wrapper around the Elixir Code Formatter, supporting developers who wish to create tools that directly manipulate and custom format Elixir source code.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elixir --short-version&lt;/code&gt; has been added to quickly get the Elixir version, without booting the Erlang VM. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; module includes performance optimizations and &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#ignore/1&quot;&gt;new&lt;/a&gt; &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#completed/1&quot;&gt;functions&lt;/a&gt;. Finally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test --profile-require=time&lt;/code&gt; has been added to debug loading times of test suites and the recently added &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#install#2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt;&lt;/a&gt; has been improved with new options and environment variables.&lt;/p&gt;

&lt;h2 id=&quot;learn-more&quot;&gt;Learn more&lt;/h2&gt;

&lt;p&gt;For a complete list of all changes, see the &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.13.0&quot;&gt;full release notes&lt;/a&gt;. You can also &lt;a href=&quot;https://youtu.be/ydjx2kKHzrM&quot;&gt;watch my ElixirConf 2021 keynote about Elixir v1.13&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Embracing open data with Elixir at the Ministry of Ecological Transition in France</title>
  <link href="http://elixir-lang.org/blog/2021/11/10/embracing-open-data-with-elixir-at-the-ministry-of-ecological-transition-in-france/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-11-10T00:00:00+00:00</updated>
  <id>/blog/2021/11/10/embracing-open-data-with-elixir-at-the-ministry-of-ecological-transition-in-france</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A group of initiatives towards innovation and open data has given the opportunity for Elixir to play a central role in exploring, validating, and visualizing transportation data across all of France. This article will show how Elixir came to power &lt;a href=&quot;https://transport.data.gouv.fr/&quot;&gt;the National Access Point for transport data in France&lt;/a&gt; and explore why it continues to be an excellent fit thanks to its real-time libraries, educational tooling, and orchestration capabilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/met-france.png&quot; alt=&quot;Sample map of transports&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;state-startups&quot;&gt;State Startups&lt;/h2&gt;

&lt;p&gt;In 2013, the French Government launched a Digital Services incubator, called &lt;a href=&quot;https://beta.gouv.fr&quot;&gt;beta.gouv.fr&lt;/a&gt;, to spread the culture of digital innovation throughout the administration. They do this through State Startups.&lt;/p&gt;

&lt;p&gt;State Startups are a match between a team and a mission. They help “intrapreneurs” - public servants who identify frictions and opportunities to improve the lives of their fellow citizens - tackle real-world challenges alongside a team of experts. This team of 2 to 4 people has six months to build a proof of concept (&lt;a href=&quot;https://beta.gouv.fr/en/&quot;&gt;see official website&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The insight is: instead of trying to convince other stakeholders to work towards specific goals, it is better to empower innovation and those who want to drive change. Those individuals are given a budget and the autonomy to choose the technology and assemble their team. In exchange, they must open-source and publicly document all code, costs, metrics, and statistics.&lt;/p&gt;

&lt;p&gt;The first State Startup was &lt;a href=&quot;https://www.data.gouv.fr/en&quot;&gt;data.gouv.fr&lt;/a&gt;, which transformed France’s open data efforts from a catalog of spreadsheets into a social platform that closed the gap between the citizens consuming the data and the institutions providing them. The tool is fully &lt;a href=&quot;https://github.com/opendatateam/udata&quot;&gt;open-source&lt;/a&gt;, allowing other countries to use it in production too.&lt;/p&gt;

&lt;p&gt;At the time of writing, &lt;a href=&quot;https://beta.gouv.fr/startups/&quot;&gt;261 State Startups&lt;/a&gt; have been launched and are in various states of development.&lt;/p&gt;

&lt;h2 id=&quot;elixir-drives-by&quot;&gt;Elixir drives by&lt;/h2&gt;

&lt;p&gt;In 2017, a team was assembled to begin a new State Startup focused on transportation data. An incoming European delegated regulation would make it mandatory for institutions and corporations to make transportation data public. The State Startup aimed at preparing the ecosystem actors for this regulatory change.&lt;/p&gt;

&lt;p&gt;To address this, the team decided to build a web application to search and visualize the existing transportation data available in &lt;a href=&quot;https://www.data.gouv.fr&quot;&gt;data.gouv.fr&lt;/a&gt;. They initially targeted public transportation information provided by cities about buses, subways, and trams, all available in a static format called General Transit Feed Specification (&lt;a href=&quot;https://gtfs.org/&quot;&gt;GTFS&lt;/a&gt;) (&lt;a href=&quot;https://transport.data.gouv.fr/resources/50471#visualization&quot;&gt;live example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The two developers of the team, Vincent Lara and Mauko Quiroga, had heard about Elixir and were interested in learning more. They understood it could provide a robust but flexible and fun platform to explore the problem space. So &lt;a href=&quot;https://github.com/etalab/transport-site/commit/837a048c37ac31151b51ac09432dbcbff3917de5&quot;&gt;they bootstrapped the application&lt;/a&gt; with the &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;Phoenix web framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As they developed the system, they spotted gaps and errors in the data available. So they began validating the data and reaching out to the institutions publishing them, providing direct feedback and value to the open data platform. The incubator saw the benefits from their contributions and, after a few months, they had a successful State Startup in their hands alongside the approval to continue working on their mission.&lt;/p&gt;

&lt;p&gt;Between 2017 and 2021, the multi-disciplinary team (one public servant, “business developers”, and technical staff) worked to increase the coverage of published transportation data and helped cities and operators to reach their technical and regulatory goals.&lt;/p&gt;

&lt;h2 id=&quot;current-challenges&quot;&gt;Current challenges&lt;/h2&gt;

&lt;p&gt;In 2021, the State Startup has “graduated” from its “beta gouv” incubator and is now part of France’s Ministry of Ecological Transition. Now composed by Francis Chabouis, Thibaut Barrère, and Antoine Augusti, the technical part of the team is tackling new use cases and challenges as the platform grows in terms of needs and versatility.&lt;/p&gt;

&lt;p&gt;Many of those are driven by the adoption of new data formats by governments and corporations. For example, &lt;a href=&quot;https://github.com/google/transit/tree/master/gtfs/spec/en&quot;&gt;GTFS&lt;/a&gt; provides a static (theoretical) itinerary: if a bus is currently delayed, this information would not be available in the feed. Enter the &lt;a href=&quot;https://github.com/google/transit/tree/master/gtfs-realtime/spec/en&quot;&gt;GTFS-RT&lt;/a&gt; format, where RT stands for real-time, to address those gaps. The General Bikeshare Feed Specification (&lt;a href=&quot;https://nabsa.net/resources/gbfs/&quot;&gt;GBFS&lt;/a&gt;) (&lt;a href=&quot;https://transport.data.gouv.fr/datasets/velos-libre-service-creteil-cristolib-disponibilite-en-temps-reel/&quot;&gt;live example&lt;/a&gt;) tracks bicycles, scooters, carpooling, etc. Plus the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service_Interface_for_Real_Time_Information&quot;&gt;SIRI&lt;/a&gt; (Service Interface for Real-time Information) and &lt;a href=&quot;https://en.wikipedia.org/wiki/NeTEx&quot;&gt;NeTEx&lt;/a&gt; families of protocols.&lt;/p&gt;

&lt;p&gt;Some of those formats have supporting technologies (validators, converters) written in other languages (Java, Rust, etc), which would be beneficial to integrate with. The team then realized the way forward is to adapt their Elixir system to orchestrate and coordinate those subsystems. Luckily, Elixir has shown to be exceptionally well suited to this task, thanks to the underlying Erlang Virtual Machine, designed for communication systems. Francis Chabouis expands: “We currently need to integrate with internal and external services in a variety of formats. Some are static, some require periodic pulls, and others keep open connections to push data. Elixir allows us to experiment, iterate, and scale those ideas quickly”.&lt;/p&gt;

&lt;p&gt;Overall, the data catalog now includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Timetables for buses, subways, and trains, including trips and operators, as real-time updates&lt;/li&gt;
  &lt;li&gt;Bicycle lanes and carpooling areas&lt;/li&gt;
  &lt;li&gt;Charging and refueling stations&lt;/li&gt;
  &lt;li&gt;Private parking areas&lt;/li&gt;
  &lt;li&gt;Location of rental cars, scooters, bicycles, and others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many of those formats also bring real-time concerns as they evolve the application to sample and show events as they happen. This is where the team is currently working at leveraging &lt;a href=&quot;http://github.com/phoenixframework/phoenix_live_view&quot;&gt;Phoenix LiveView&lt;/a&gt; to build the interactivity and functionality they need while keeping their stack simple and productive.&lt;/p&gt;

&lt;p&gt;The technical team has also recently grown to three developers, totaling seven members altogether. To prepare themselves for the new team members, Thibaut Barrère was responsible for upgrading their dependencies, including Elixir and Erlang, which were largely unchanged from 2017. While performing such changes can often be daunting in other stacks, Thibaut shares a very positive experience: “we did not see any breaking changes after performing long-due updates. Overall, the language and libraries seem quite stable and careful to avoid breaking changes. This experience gives us the confidence we can continue focusing on the needs of our users as we move forward”.&lt;/p&gt;

&lt;h2 id=&quot;open-data-and-education&quot;&gt;Open data and education&lt;/h2&gt;

&lt;p&gt;As with any other team, some challenges go beyond the technical aspects. For example, they sometimes spot companies and cities that do not make their transportation data available, which is against European Law. The team often heard concerns about making parts of their systems public, which could lead to failures in critical infrastructure.&lt;/p&gt;

&lt;p&gt;To address this, the team built &lt;a href=&quot;https://github.com/etalab/transport-site/tree/master/apps/unlock&quot;&gt;a small Phoenix application&lt;/a&gt; that works as a simple proxy to those systems. The proxy caches the data for specific intervals, helping those entities address the security and traffic concerns around their critical systems. The application uses &lt;a href=&quot;https://github.com/whitfin/cachex&quot;&gt;Cachex&lt;/a&gt; and provides a real-time dashboard, built with LiveView, where they can configure the system, track application load, and see cache usage data.&lt;/p&gt;

&lt;p&gt;Another area the team is actively investigating is how to make the data itself more accessible to developers who want to consume it. A non-trivial amount of work is required between fetching the city data, parsing it, and displaying it on a map, which can discourage developers from beginning their open data journey. To this end, they plan to assemble a collection of &lt;a href=&quot;http://github.com/livebook-dev/livebook&quot;&gt;Livebooks&lt;/a&gt;, a recently released tool for writing code notebooks in Elixir that allows developers to get up and running quickly and obtain immediate feedback on their code.&lt;/p&gt;

&lt;p&gt;Thibaut remarks how the growth of the language and its ecosystem supports their application and needs: “every time we faced a new challenge, a solution was readily available to us. When we needed to orchestrate multiple subsystems, the stack excelled at it. When we required real-time features, Phoenix and LiveView had first-class support for it. Now we need to promote education and access to open data, and Livebook is shaping to be precisely what we need”.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Bootstrapping a multiplayer server with Elixir at X-Plane</title>
  <link href="http://elixir-lang.org/blog/2021/07/29/bootstraping-a-multiplayer-server-with-elixir-at-x-plane/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-07-29T00:00:00+00:00</updated>
  <id>/blog/2021/07/29/bootstraping-a-multiplayer-server-with-elixir-at-x-plane</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.x-plane.com/&quot;&gt;X-Plane 11&lt;/a&gt; is the world’s most comprehensive and powerful flight simulator for personal computers and mobile devices. X-Plane is not a game but an engineering tool created by Laminar Research that can be used to predict the flying qualities of fixed- and rotary-wing aircraft with incredible accuracy. The X-Plane franchise comes in both consumer and FAA-certifiable professional versions.&lt;/p&gt;

&lt;p&gt;Recently, the X-Plane team took on the challenge of adding a multiplayer experience with the goal of hosting north of 10000 users in the same session. This article explores why they chose Elixir and how a team of one developer - without prior language experience - learned the language and deployed a well-received multiplayer experience in 6 months. The overall solution features a brand new open-source implementation of the RakNet communication protocol in Elixir and overperforms the original requirements when put under unexpected load.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/x-plane.jpg&quot; alt=&quot;X-Plane&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;The X-Plane team has offered peer-to-peer multiplayer in the simulator for a long time but never server-hosted multiplayer. This was a new journey for them and they had complete freedom to pick the technology stack. &lt;a href=&quot;https://developer.x-plane.com/2021/01/have-you-heard-the-good-news-about-elixir/&quot;&gt;According to their blog post&lt;/a&gt;, their goals were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;To build a rock-solid server with error isolation. For example, an exception during a client update should not bring the whole server down.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To implement a single shared world that can scale to tens of thousands of concurrent pilots.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To iterate quickly: because this was the first time the Laminar Research team offered a hosted multiplayer environment, they wanted to move quickly to ship this system. This would allow users to begin flying in groups immediately and serve as a platform to gauge interest in further feature development.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To be fast and consistent. Multiplayer has a “soft real-time” constraint, and they need to service &lt;em&gt;all&lt;/em&gt; clients consistently and on time. Quantitatively, this means the 99th percentile response times matter a lot more than the mean or median.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From those requirements, the need for stability and fast iteration ruled out low-level languages, even the ones in which they had plenty of in-house experience.&lt;/p&gt;

&lt;p&gt;The need for speed and vertical scalability excluded many modern web languages, such as Ruby and Python, where the model for scaling up is generally throwing more servers at it. It was essential to avoid synchronizing state across multiple machines, which requires more development time and worsens the user experience due to the increased latency.&lt;/p&gt;

&lt;p&gt;They eventually settled on three top contenders: Rust, Go, and Elixir. Elixir took the edge thanks to two exclusive features: fault tolerance and predictable latency. Both are built into the very core of the Erlang Virtual Machine - the robust platform that Elixir runs on. Tyler Young, X-Plane’s engineer leading this implementation, highlights: “We wanted a stack that could max server capacity. We would rather run a 64-core machine than dozens of 4-core VMs. Saša Jurić’s talk, &lt;a href=&quot;https://www.youtube.com/watch?v=JvBT4XBdoUE&quot;&gt;the Soul of Erlang and Elixir&lt;/a&gt;, showed us that the concurrency model, process isolation, and partial restarts provided by the platform were the abstractions we were looking for.”&lt;/p&gt;

&lt;h2 id=&quot;modeling-multiplayer-with-elixir&quot;&gt;Modeling multiplayer with Elixir&lt;/h2&gt;

&lt;p&gt;Ready to give Elixir a try, Tyler picked up a couple books but soon realized the language’s &lt;a href=&quot;https://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; provided the background he needed. He explains: “while the introductory guide covers the language constructs, the advanced guide on the website has you build an actual project with TCP connections, with the basic architectural patterns we would use in production.”&lt;/p&gt;

&lt;p&gt;However, instead of jumping headfirst into the multiplayer server, he decided to give Elixir a try on a smaller problem. He wrote a web proxy to the National Oceanic and Atmospheric Administration (NOAA) weather services and put it in production. This experience taught him the importance of leveraging all of the instrumentation and metrics provided by the Erlang VM. They chose &lt;a href=&quot;https://www.appsignal.com/&quot;&gt;AppSignal&lt;/a&gt; to help consume and digest this information.&lt;/p&gt;

&lt;p&gt;Two weeks later, he started working on the server by implementing &lt;a href=&quot;https://en.wikipedia.org/wiki/RakNet&quot;&gt;the UDP-centric RakNet protocol in Elixir&lt;/a&gt;. Unfortunately, there is little documentation, so they had to refer to the reference implementation in C++ most of the time. Luckily, thanks to its roots in telecommunication and network services, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%3C%3C%3E%3E/1&quot;&gt;Elixir and Erlang have built-in support for parsing binary packets&lt;/a&gt;, which made the task a joy. The team also mapped each UDP connection to distinct lightweight threads of execution in Elixir, which we call &lt;em&gt;processes&lt;/em&gt;. Elixir processes are cheap, isolated, concurrent, and are fairly scheduled by the runtime. This design allowed the X-Plane team to fully leverage the properties of robustness and predictable latency that first attracted them to the platform. Their implementation is written on top of Erlang’s &lt;a href=&quot;http://www.erlang.org/doc/man/gen_udp.html&quot;&gt;gen_udp&lt;/a&gt; and &lt;a href=&quot;https://github.com/X-Plane/elixir-raknet&quot;&gt;is open source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Five months after choosing Elixir, they began welcoming beta testers into the server. The community’s reaction was overwhelmingly positive, and the new multiplayer experience led to a strong uptick in the number of subscriptions as it went live a month later.&lt;/p&gt;

&lt;h2 id=&quot;deployment-and-keeping-it-simple&quot;&gt;Deployment and keeping it simple&lt;/h2&gt;

&lt;p&gt;At the moment, X-Plane’s player base in North America is powered by a single server, running on 1 eight-core machine with 16GB of memory, although only 200MB or 300MB of memory is effectively used. Each connected player sends 10 updates a second.&lt;/p&gt;

&lt;p&gt;For deployments, they use a blue-green strategy, alternating between two servers of the same capacity. Tyler explains: “We are aware the Erlang VM provides hot code swapping and distribution, but we are taking the simplest route whenever possible. It is much easier for us to alternate between two servers during deployments, as the servers are stable and we don’t deploy frequently. Similarly, when it comes to distribution, we prefer to scale vertically or set up different servers in different regions for players across the globe.”&lt;/p&gt;

&lt;p&gt;Paul McCarty, who joined the project after launch, can attest to its simplicity: “even without prior Elixir experience, I was able to jump in and add new functionality to our HTTP APIs early on.” Those APIs are built on top of &lt;a href=&quot;http://github.com/elixir-lang/plug&quot;&gt;Plug&lt;/a&gt; to power their chat services, provide information about connected users, and more. He concludes: “When adding new features, the server development is never the bottleneck.”&lt;/p&gt;

&lt;p&gt;Paul and Tyler finished our conversation with a curious anecdote: a couple months ago, they distributed an updated client version with debug code in it. This additional code caused each connected user to constantly ping the server every 100ms, even if not in multiplayer mode. This caused their traffic to increase 1000x! They only discovered this increase 2 weeks later when they saw the CPU usage in their Elixir server went from 5% to 21%. Once they found out the root cause and how the system handled it, they realized they didn’t have to rush a client update to remove the debug code and they chose to maintain their regular release cycle. At the end of the day, it was a perfect example of the confidence they gained and built around the language and platform.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Social virtual spaces with Elixir at Mozilla</title>
  <link href="http://elixir-lang.org/blog/2021/06/02/social-virtual-spaces-with-elixir-at-mozilla/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-06-02T00:00:00+00:00</updated>
  <id>/blog/2021/06/02/social-virtual-spaces-with-elixir-at-mozilla</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hubs.mozilla.com/&quot;&gt;Hubs&lt;/a&gt; is Mozilla’s take on virtual social experiences. You build your own private spaces and share them with your friends, co-workers, and community. Avatars in this space can move freely in a 3D social environment and watch videos, exchange messages, and talk to other people nearby. All you need is a browser and a microphone!&lt;/p&gt;

&lt;p&gt;Hubs is &lt;a href=&quot;https://github.com/mozilla/hubs&quot;&gt;fully&lt;/a&gt; &lt;a href=&quot;https://github.com/mozilla/reticulum&quot;&gt;open source&lt;/a&gt; and you can host it on your infrastructure via &lt;a href=&quot;https://hubs.mozilla.com/cloud&quot;&gt;Hubs Cloud&lt;/a&gt;. Community managers, educators, and event organizers have been using Hubs Cloud to run virtual events and online activities tailored to their specific brandings and needs. All it takes to run your own version of Hubs is one click away - which perhaps makes Hubs the most deployed Phoenix application ever!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/mozilla-hubs.jpg&quot; alt=&quot;Mozilla Hubs&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;from-vr-to-elixir&quot;&gt;From VR to Elixir&lt;/h2&gt;

&lt;p&gt;The Hubs team started at Mozilla as the Mixed Reality team about 3.5 years ago. Their main goal was to explore ways for online social interaction via avatars and mixed reality.&lt;/p&gt;

&lt;p&gt;They quickly focused on building their first proof of concept, where avatars could communicate, move around, and join different rooms, everything running directly in the browser. This was a significant departure from the state of the art of Virtual Reality everywhere, as the getting started experience up to this point was cumbersome and often required steep investment in the form of VR headsets.&lt;/p&gt;

&lt;p&gt;The initial prototype was a success and it pushed the team to build a product. However, all communication in the proof of concept was peer-to-peer, which limited the features and experiences they could provide. Therefore the Hubs team knew they needed a capable backend technology to provide fan-out communication and coordinate how all different avatars interact within the virtual spaces. John Shaughnessy, Staff Software Engineer at Mozilla, comments: “When you get a lot of people in the same space, be it virtual or in the real world, there is never only a single conversation going on. Once you get ten or twenty different people in a room, conference calls don’t work well. In Hubs, people transition between multiple simultaneous conversations simply by moving around”.&lt;/p&gt;

&lt;p&gt;With this bold vision in hand, they assessed their whole stack. They settled on using JavaScript with &lt;a href=&quot;https://threejs.org/&quot;&gt;Three.js&lt;/a&gt; in the front-end and chose &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;the Phoenix web framework&lt;/a&gt; for the backend. Greg Fodor, who was an Engineering Manager at Mozilla at the time, explains the choice: “We first listed all of the features we had to implement, from trivial things like REST endpoints, to more complex use cases, such as chat messaging and tracking where avatars are in the virtual world. Once I started to learn Phoenix, I saw all of those features were already there! The application we were building has to manage a large number of connections with real-time low latencies, something we knew the Erlang VM was an excellent fit for”.&lt;/p&gt;

&lt;h2 id=&quot;in-production&quot;&gt;In production&lt;/h2&gt;

&lt;p&gt;Hubs went live in January 2018. Almost everything in Hubs goes through Phoenix. The only exception is the WebRTC voice channels, which are handled by designated voice servers, initially implemented with &lt;a href=&quot;https://janus.conf.meetecho.com/&quot;&gt;Janus&lt;/a&gt; and later ported to &lt;a href=&quot;https://mediasoup.org/&quot;&gt;MediaSoup&lt;/a&gt;. However, the Phoenix app still manages the voice servers and how connections are assigned to them.&lt;/p&gt;

&lt;p&gt;The deployment is orchestrated by &lt;a href=&quot;https://www.chef.io/products/chef-habitat/&quot;&gt;Habitat&lt;/a&gt; and running on Amazon EC2. Habitat provides packaging and orchestration. When a voice server joins the Habitat ring, the Phoenix services receive a message and start assigning voices to voice servers. Overall they run on 4 Phoenix and 4 voice servers.&lt;/p&gt;

&lt;p&gt;The Elixir experience in production has been quite smooth. Dominick D’Aniello, Staff Software Engineer at Mozilla, points out some areas they discussed improving: “the Phoenix application works mostly as a proxy, so we avoid decoding and reencoding the data unless we really need to. But sometimes we have to peek at the payloads and JSON is not the most efficient format to do so.” They have also considered relying more on Elixir processes and the Erlang distribution. Dominick continues: “when a new client joins, it needs to ask all other clients what is their state in the world, what they own, and what they care about. One option is to use Elixir processes in a cluster to hold the state of the different entities and objects in the virtual world”.&lt;/p&gt;

&lt;h2 id=&quot;beyond-hubs&quot;&gt;Beyond Hubs&lt;/h2&gt;

&lt;p&gt;With many large companies investing in online communication, the Mozilla team saw the possibility of virtual spaces becoming walled-gardens inside existing social platforms. This led the Hubs team to work on Hubs Cloud, with the mission to commoditize virtual spaces by allowing anyone to run their own version of Hubs with a single click.&lt;/p&gt;

&lt;p&gt;Hubs Cloud launched in February 2020 and it has been a hit. &lt;a href=&quot;https://twitter.com/nyuniversity/status/1258401916096315399&quot;&gt;New York University did its graduation ceremony on a Hubs Cloud instance&lt;/a&gt;. &lt;a href=&quot;https://www.computer.org/conferences/organize-a-conference/organizer-resources/hosting-a-virtual-event/success-stories/IEEE-VR-2020&quot;&gt;The IEEE Virtual Reality Conference embraced Hubs&lt;/a&gt; for a more accessible and sustainable event with talks and poster sessions all happening in virtual rooms, while &lt;a href=&quot;https://www.twincities.com/2021/02/09/twins-set-to-launch-new-virtual-fan-experience/&quot;&gt;the Minnesota Twins baseball team launched a Virtual Hall of Fame&lt;/a&gt; on top of the platform.&lt;/p&gt;

&lt;p&gt;Their cloud version uses Amazon CloudFormation to instantiate Hubs inside the user’s account. This approach brought different challenges to the Hubs team: “we want Hubs Cloud to be as affordable and straightforward as possible. The Phoenix app has already been a massive help on this front. We have also moved some features to Amazon Lambda and made them optional, such as image resizing and video conversion” - details John.&lt;/p&gt;

&lt;p&gt;Since Hubs is also open source, developers can run their own Hubs instance in whatever platform they choose or change it however they want. That’s the path Greg Fodor recently took when he announced &lt;a href=&quot;https://jel.app/&quot;&gt;Jel&lt;/a&gt;: “Jel is the video game for work. It is a mashup of Minecraft and Discord, where everything is 3D. My goal is to spark new directions and ideas to get people excited about VR”.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;Today, the Hubs team has 10 contributors, half of whom are developers. Their engineering team is quite general and learning Elixir happens organically: “you are motivated by the feature you are working on. If it requires changing the backend, you learn Elixir with the help of the team and then make your contribution”.&lt;/p&gt;

&lt;p&gt;Overall, the bet on Phoenix was a successful one. Greg Fodor highlights: “The most significant benefit of Phoenix is in using a stack that excels at solving a large variety of problems. Once onboarded to Phoenix, there is a huge surface area our engineers can touch. Any feature they come up with, they can run with it. And because Hubs is open source, our contributors will also have the same experience. Overall, Elixir and Phoenix reduce the effort needed to cause the largest impact possible across our whole product”.&lt;/p&gt;

&lt;p&gt;Lately, they have leaned even further into the ecosystem, as they have started exposing Hubs APIs over GraphQL with the help of Absinthe. They have also migrated to Phoenix v1.5 and are using the &lt;a href=&quot;https://github.com/phoenixframework/phoenix_live_dashboard&quot;&gt;Phoenix LiveDashboard&lt;/a&gt; to provide metrics and instrumentation to Hubs Cloud users.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.12 released</title>
  <link href="http://elixir-lang.org/blog/2021/05/19/elixir-v1-12-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-05-19T00:00:00+00:00</updated>
  <id>/blog/2021/05/19/elixir-v1-12-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.12 is out with improvements to scripting, tighter Erlang/OTP 24 integration, stepped ranges, and dozen of new functions across the standard library. Overall this is a small release, which continues our tradition of bringing Elixir developers quality of life improvements every 6 months. Some of these improvements directly relates with the &lt;a href=&quot;https://dashbit.co/blog/nx-numerical-elixir-is-now-publicly-available&quot;&gt;recent efforts of bringing Numerical Computing to Elixir&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Elixir v1.12 requires Erlang/OTP 22+. We also recommend running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix local.rebar&lt;/code&gt; after installation to upgrade to the latest Rebar versions, which includes support for Erlang OTP/24+.&lt;/p&gt;

&lt;p&gt;Note: this announcement contains &lt;a href=&quot;https://asciinema.org&quot;&gt;asciinema&lt;/a&gt; snippets. You may need to enable 3rd-party JavaScript on this site in order to see them. If JavaScript is disabled, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noscript&lt;/code&gt; tags with the proper links will be shown.&lt;/p&gt;

&lt;h2 id=&quot;scripting-improvements-mixinstall2-and-systemtrap_signal3&quot;&gt;Scripting improvements: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.trap_signal/3&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Elixir v1.12 brings new conveniences for those using Elixir for scripting (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.exs&lt;/code&gt; files). Elixir has been capable of managing dependencies for a quite long time, but it could only be done within Mix projects. In particular, the Elixir team is wary of global dependencies as any scripts that rely on system packages are brittle and hard to reproduce whenever your system changes.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt; is meant to be a sweet spot between single-file scripts and full-blown Mix projects. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt;, you can list your dependencies at the top of your scripts. When you execute the script for the first time, Elixir will download, compile, and cache your dependencies before running your script. Future invocations of the script will simply read the compiled artifacts from the cache:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:jason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Jason&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;hello:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt; also performs protocol consolidation, which gives script developers an option to execute their code in the most performant format possible. Note &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt; is currently experimental and it may change in future releases.&lt;/p&gt;

&lt;p&gt;Furthermore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt; pairs nicely with Livebook, a newly announced project that brings interactive and collaborative notebook projects to Elixir. With Livebook and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.install/2&lt;/code&gt;, you can bring dependencies into your code notebooks and ensure they are fully reproducible. &lt;a href=&quot;https://www.youtube.com/watch?v=RKvqc-UEe34&quot;&gt;Watch the Livebook announcement to learn more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another improvement to scripting is the ability to trap exit signals via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.trap_signal/3&lt;/code&gt;. All you need is the signal name and a callback that will be invoked when the signal triggers. For example, ExUnit leverages this functionality to print all currently running tests when you abort the test suite via SIGQUIT (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+\\ &lt;/code&gt;). You can see this in action when running tests in the Plug project below:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/qPOJ9Vd8DiEXttEv7olNJPUR0.js&quot; id=&quot;asciicast-qPOJ9Vd8DiEXttEv7olNJPUR0&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/qPOJ9Vd8DiEXttEv7olNJPUR0&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;This is particularly useful when your tests get stuck and you want to know which one is the culprit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Trapping signals may have strong implications on how a system shuts down and behaves in production and therefore it is extremely discouraged for libraries to set their own traps. Instead, they should redirect users to configure them themselves. The only cases where it is acceptable for libraries to set their own traps is when using Elixir in script mode, such as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.exs&lt;/code&gt; files and via Mix tasks.&lt;/p&gt;

&lt;h2 id=&quot;tighter-erlangotp-24-integration&quot;&gt;Tighter Erlang/OTP 24 integration&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.erlang.org/My-OTP-24-Highlights/&quot;&gt;Erlang/OTP 24 ships with JIT compilation&lt;/a&gt; and Elixir developers don’t have to do anything to reap its benefits. There are many other features in Erlang/OTP 24 to look forwards to and Elixir v1.12 provides integration with many of them: such as support for 16bit floats in bitstrings as well as performance improvements in the compiler and during code evaluation.&lt;/p&gt;

&lt;p&gt;Another excellent feature in Erlang/OTP 24 is the implementation of &lt;a href=&quot;http://www.erlang.org/eeps/eep-0054.html&quot;&gt;EEP 54&lt;/a&gt;, which provides extended error information for many functions in Erlang’s stdlib. Elixir v1.12 fully leverages this feature to improve reporting for errors coming from Erlang. For example, in earlier OTP versions, inserting an invalid argument into an ETS table that no longer exists would simply error with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArgumentError&lt;/code&gt;:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/1s79Cwf2JvSLYihAahIobVyBm.js&quot; id=&quot;asciicast-1s79Cwf2JvSLYihAahIobVyBm&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/1s79Cwf2JvSLYihAahIobVyBm&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;However, in Elixir v1.12 with Erlang/OTP 24:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/4l1ORaVDVdHB7Gi5DccIYFgSL.js&quot; id=&quot;asciicast-4l1ORaVDVdHB7Gi5DccIYFgSL&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/4l1ORaVDVdHB7Gi5DccIYFgSL&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;Finally, note Rebar v2 no longer works on Erlang/OTP 24+. Mix defaults to Rebar v3 since Elixir v1.4, so no changes should be necessary by the vast majority of developers. However, if you are explicitly setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manager: :rebar&lt;/code&gt; in your dependency, you want to move to Rebar v3 by removing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:manager&lt;/code&gt; option. Compatibility with unsupported Rebar versions will be removed from Mix in the future.&lt;/p&gt;

&lt;h2 id=&quot;stepped-ranges&quot;&gt;Stepped ranges&lt;/h2&gt;

&lt;p&gt;Elixir has had support for ranges from before its v1.0 release. Ranges support only integers and are inclusive, using the mathematic notation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a..b&lt;/code&gt;. Ranges in Elixir are either increasing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..10&lt;/code&gt; or decreasing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10..1&lt;/code&gt; and the direction of the range was always inferred from the first and last positions. Ranges are always lazy as its values are emitted as they are enumerated rather than being computed upfront.&lt;/p&gt;

&lt;p&gt;Unfortunately, due to this inference, it is not possible to have empty ranges. For example, if you want to create a list of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; elements, you cannot express it with a range from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..n&lt;/code&gt;, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..0&lt;/code&gt; (for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n=0&lt;/code&gt;) is a decreasing range with two elements.&lt;/p&gt;

&lt;p&gt;Elixir v1.12 supports stepped ranges via &lt;a href=&quot;https://hexdocs.pm/elixir/1.12/Kernel.html#..///3&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first..last//step&lt;/code&gt; notation&lt;/a&gt;. For example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1..10//2&lt;/code&gt; will emit the numbers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;. You can consider the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt; operator as an equivalent to “range division”, as it effectively divides the number of elements in the range by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt;, rounding up on inexact scenarios. Steps can be either positive (increasing ranges) or negative (decreasing ranges). Stepped ranges bring more expressive power to Elixir ranges and they elegantly solve the empty range problem, as they allow the direction of the steps to be explicitly declared instead of inferred.&lt;/p&gt;

&lt;p&gt;As of Elixir v1.12, implicitly decreasing ranges are soft-deprecated and warnings will be emitted in future Elixir versions based on our &lt;a href=&quot;https://hexdocs.pm/elixir/compatibility-and-deprecations.html#deprecations&quot;&gt;deprecation policy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;then2-and-tap2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap/2&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Two new functions have been added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; module, in order to ease working with pipelines. &lt;a href=&quot;https://hexdocs.pm/elixir/1.12/Kernel.html#tap/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap/2&lt;/code&gt;&lt;/a&gt; passes the given argument to an anonymous function, returning the argument itself. &lt;a href=&quot;https://hexdocs.pm/elixir/1.12/Kernel.html#then/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then/2&lt;/code&gt;&lt;/a&gt; passes the given argument to an anonymous function, returning the result. The following:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;~r/\w+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is equivalent to this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;~r/\w+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tap/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then/2&lt;/code&gt; are implemented as macros, and compiler improvements available on Erlang/OTP 24 ensure the intermediate anonymous functions is optimized away, which guarantees the idioms above do not have any performance impact on your code.&lt;/p&gt;

&lt;h2 id=&quot;iex-improvements&quot;&gt;IEx improvements&lt;/h2&gt;

&lt;p&gt;IEx got two important quality of life improvements in this release. Hitting tab after a function invocation will show all of the arguments for said function and it is now possible to paste code with pipelines in the shell. See both features in action below:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/IMSAZUqLFlmGRsPk4gKuJ3tN0.js&quot; id=&quot;asciicast-IMSAZUqLFlmGRsPk4gKuJ3tN0&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/IMSAZUqLFlmGRsPk4gKuJ3tN0&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;h2 id=&quot;additional-functions&quot;&gt;Additional functions&lt;/h2&gt;

&lt;p&gt;Elixir v1.12 has also added many functions across the standard library. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module received additions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.count_until/2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.product/1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.zip_with/2&lt;/code&gt;, and more. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt; module now includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer.pow/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer.extended_gcd/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt; module got a &lt;a href=&quot;https://hexdocs.pm/elixir/1.12/Code.html#cursor_context/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cursor_context/2&lt;/code&gt;&lt;/a&gt; function, which is now used to power &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx&lt;/code&gt; autocompletion and it is &lt;a href=&quot;https://user-images.githubusercontent.com/17034772/115117125-533b2900-9f9d-11eb-94a9-a2cf2ccb7388.mp4&quot;&gt;used by projects such as Livebook to provide intellisense&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The EEx application has also been extended to provide metadata on text segments. This has enabled the Surface and Phoenix LiveView teams to implement &lt;a href=&quot;https://github.com/phoenixframework/phoenix_live_view/pull/1440&quot;&gt;a new template language called HEEx&lt;/a&gt;, which validates both HTML and EEx. Finally, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt; module supports the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:compressed&lt;/code&gt; option, which is useful for GraphQL applications managing hundreds of thousands of subscriptions via &lt;a href=&quot;http://absinthe-graphql.org/&quot;&gt;Absinthe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a complete list of all changes, see the &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.12.0&quot;&gt;full release notes&lt;/a&gt;. Check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Marketing and sales intelligence with Elixir at PepsiCo</title>
  <link href="http://elixir-lang.org/blog/2021/04/02/marketing-and-sales-intelligence-with-elixir-at-pepsico/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-04-02T00:00:00+00:00</updated>
  <id>/blog/2021/04/02/marketing-and-sales-intelligence-with-elixir-at-pepsico</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PepsiCo is one of the world’s leading food and beverage companies serving more than 200 countries and territories around the world. Today Elixir is used at varying capacities inside PepsiCo by six different teams. This article explores how the Search Marketing and Sales Intelligence Platform teams adopted and use Elixir to build internal tools.&lt;/p&gt;

&lt;p&gt;Although we will explore only two teams in this article, &lt;a href=&quot;https://www.pepsicojobs.com/teams-ecommerce&quot;&gt;PepsiCo is hiring Elixir engineers across multiple teams&lt;/a&gt;. Let’s get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/pepsico.jpg&quot; alt=&quot;PepsiCo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-first-steps&quot;&gt;The first steps&lt;/h2&gt;

&lt;p&gt;The project that would become the first Elixir project and open the door for future Elixir applications inside PepsiCo was started by Jason Fertel back in 2016.&lt;/p&gt;

&lt;p&gt;Initially, the application provided workflow automation for managing search marketing operations on multiple web platforms. The product was a success and ended up integrated into PepsiCo in 2018.&lt;/p&gt;

&lt;p&gt;Now, the Elixir application plays a central role in a data pipeline that empowers PepsiCo’s marketing and sales teams with tools to query, analyze, and integrate with several search marketing partners.&lt;/p&gt;

&lt;p&gt;The pipeline starts with the Data Engineering team, which collects and stores data into  &lt;a href=&quot;https://www.snowflake.com/&quot;&gt;Snowflake Data Cloud&lt;/a&gt;. The Elixir application reads data from Snowflake’s platform, pre-process, and stores it in two databases: &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; or &lt;a href=&quot;https://druid.apache.org/&quot;&gt;Apache Druid&lt;/a&gt;, according to the data characteristics. Finally, a Phoenix application serves this data to internal teams and communicates directly with third-party APIs.&lt;/p&gt;

&lt;h2 id=&quot;why-elixir&quot;&gt;Why Elixir?&lt;/h2&gt;

&lt;p&gt;Elixir helps PepsiCo eCommerce focus and get things done fast. “Elixir allows our team to develop quickly with confidence,” says David Antaramian, a Software Engineering Manager at PepsiCo. “In turn, that lets us deliver value to the business quickly, and it’s the reason we’ve stuck with the language. Whether it’s streaming changes to the front-end or orchestrating concurrent data operations across multiple storage systems, Elixir offers a robust developer experience that translates to a great consumer experience.”&lt;/p&gt;

&lt;p&gt;Different Elixir features came together to help the PepsiCo team build compelling development and user experiences. Thanks to its functional and extensible aspects, PepsiCo used Elixir to create a domain-specific language that translates business queries into data structures sent to different stores. This gave them a stable foundation where they can continually add new queries and integrations, even as they grow in complexity.&lt;/p&gt;

&lt;p&gt;Furthermore, the reports generated by PepsiCo’s marketing and sales teams often have to query different tables or even separate storages, all while juggling long-running connections to different third-party APIs. Elixir’s programming model, inherited from the Erlang Virtual Machine, makes it trivial to run all of these operations concurrently, leading to fast and rich user interactions while the development team remains focused on delivering features.&lt;/p&gt;

&lt;h2 id=&quot;libraries-and-frameworks&quot;&gt;Libraries and frameworks&lt;/h2&gt;

&lt;p&gt;David Antaramian is quick to praise the Erlang runtime and its standard library. He says: “Since we are working with large amounts of data, it is also essential to avoid hitting the database whenever possible. Thankfully, Erlang ships with an in-memory table storage called &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;ETS&lt;/a&gt;, which we use to store hundreds of thousands of rows”.&lt;/p&gt;

&lt;p&gt;The Erlang standard library was also handy when communicating to some data stores. In particular, the Snowflake platform requires ODBC connections. The PepsiCo team built a library called &lt;a href=&quot;https://github.com/pepsico-ecommerce/snowflex&quot;&gt;Snowflex&lt;/a&gt;, designed on top of &lt;a href=&quot;http://www.erlang.org/doc/man/odbc.html&quot;&gt;Erlang’s built-in ODBC drivers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Elixir ecosystem nicely complements the Erlang one. The front-end, written in React, talks to the server via &lt;a href=&quot;http://absinthe-graphql.org/&quot;&gt;the Absinthe GraphQL toolkit&lt;/a&gt; running on top of &lt;a href=&quot;http://phoenixframework.org/&quot;&gt;the Phoenix web framework&lt;/a&gt;. The &lt;a href=&quot;https://github.com/elixir-ecto/ecto&quot;&gt;Ecto database library&lt;/a&gt; manages the communication to PostgreSQL. They also use the &lt;a href=&quot;https://github.com/handnot2/esaml&quot;&gt;esaml&lt;/a&gt; and &lt;a href=&quot;https://github.com/handnot2/samly&quot;&gt;Samly&lt;/a&gt; libraries to provide authentication within PepsiCo’s organization - another example of leveraging the tools within both Erlang and Elixir communities.&lt;/p&gt;

&lt;p&gt;Finally, the team also recognizes the &lt;a href=&quot;https://erlef.org/&quot;&gt;Erlang Ecosystem Foundation&lt;/a&gt;’s efforts, which PepsiCo are sponsors of, particularly the Observability Working Group. David remarks: “The adoption of Telemetry by the ecosystem has been a massive help in bringing monitoring visibility and metrics to our system. Now when we see spikes in one place, we can easily correlate them with other system parts”.&lt;/p&gt;

&lt;h2 id=&quot;hiring&quot;&gt;Hiring&lt;/h2&gt;

&lt;p&gt;Today there are approximately 40+ Elixir engineers within PepsiCo distributed across six teams. Eight of those engineers are part of the Search Marketing and Sales Intelligence Platform teams.&lt;/p&gt;

&lt;p&gt;While the team recognizes that there aren’t as many Elixir engineers compared to communities like JavaScript, they were effective in hiring qualified Elixir candidates. Chase Gilliam, a Software Engineering Manager at PepsiCo, explains: “We have met many engineers that, like us, found Elixir due to being burned out by previous experiences. So when it came to hiring, many Elixir candidates had a mindset similar to ours, which ultimately sped up the process.”&lt;/p&gt;

&lt;p&gt;This initial group of Elixir engineers paved the way for the language’s growth inside PepsiCo. David adds: “At first, we looked for engineers with Elixir experience to help us build a team that could guide other developers. Then we extended the pool to anyone who has a functional programming background and now to developers with either Ruby or Erlang experience. However, if someone is the right candidate, we onboard them even if they have no Elixir experience and train them”. He continues: “We also make extensive use of the learning resources available in the community, such as conferences, books, online courses, and others.”&lt;/p&gt;

&lt;p&gt;As the team grew, they adopted best practices and saw the quality of the codebase improve at the same time. Chase concludes: “At the beginning, there were some large modules in our application. Luckily, refactoring in a functional programming language is straightforward, thanks to immutability and limited side-effects. Adopting tools like Credo, ExDoc, and the code formatter was also essential to standardize how we use Elixir internally.” For those interested in learning more about the different use cases for Elixir inside PepsiCo and help continue its growth, &lt;a href=&quot;https://www.pepsicojobs.com/teams-ecommerce&quot;&gt;they are hiring&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Social messaging with Elixir at Community</title>
  <link href="http://elixir-lang.org/blog/2021/02/03/social-messaging-with-elixir-at-community/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-02-03T00:00:00+00:00</updated>
  <id>/blog/2021/02/03/social-messaging-with-elixir-at-community</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://community.com/&quot;&gt;Community&lt;/a&gt; is a platform that enables instant and direct communication with the people you want to reach, using the simplicity of text messaging. Used by names like Paul McCartney, Metallica, and Barack Obama, Community connects small businesses, stars, and high-profile individuals directly to their audiences.&lt;/p&gt;

&lt;p&gt;Community is powered by the Erlang Ecosystem, with Elixir and RabbitMQ playing central roles. This article gives an overview of the system and the tools used to handle spikes of million of users caused by events such as this tweet:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;All right, let&amp;#39;s try something new. If you’re in the United States, send me a text at 773-365-9687 — I want to hear how you&amp;#39;re doing, what&amp;#39;s on your mind, and how you&amp;#39;re planning on voting this year. &lt;br /&gt;&lt;br /&gt;I&amp;#39;ll be in touch from time to time to share what&amp;#39;s on my mind, too. &lt;a href=&quot;https://t.co/NX91bSqbtG&quot;&gt;pic.twitter.com/NX91bSqbtG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Barack Obama (@BarackObama) &lt;a href=&quot;https://twitter.com/BarackObama/status/1308769164190941187?ref_src=twsrc%5Etfw&quot;&gt;September 23, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;the-first-steps-with-elixir&quot;&gt;The first steps with Elixir&lt;/h2&gt;

&lt;p&gt;Tomas Koci and Ustin Zarubin were the two engineers behind Community’s initial implementation. The company was pivoting from a product they had written in Go and they felt the language was not expressive enough for the products they were building. So when faced with the challenge of developing a social messaging platform on top of SMS, they were open to trying a different stack.&lt;/p&gt;

&lt;p&gt;Their first encounter with Elixir was a casual one. They were chatting about the challenges ahead of them when their roommate mentioned Elixir. Shortly after, things started to click. They both had a physics background, so they found the functional paradigm quite intuitive. The Erlang VM also has its origins in telecommunications, and they were building a telecom centric product, which gave them more confidence.&lt;/p&gt;

&lt;p&gt;Besides the technological aspect, they also began to be active in the Elixir community. Tomas recaps: “we started attending the Elixir meetups happening here in Chattanooga. We met many developers, heard about production cases, and learned how companies like Bleacher Report were using Elixir at scale”. From then on, they were sold on giving Elixir a try.&lt;/p&gt;

&lt;p&gt;They started their prototype in January 2018, with the intent of onboarding dozens of users. They were learning Elixir while developing the system and reaching out to potential users.&lt;/p&gt;

&lt;p&gt;Their first challenge was in May 2018, when one of their users announced his phone number, managed by Community, to millions of viewers. Tomas still remembers that day: “It was a Saturday night, around 11:00 pm when we saw an influx of users. It caught us by surprise and, after 10 hours, more than 400 thousand users had signed up”. This influx of users stressed the system in unexpected ways, especially when it came to their upstream integrations. They had to patch the system to ensure they would not overload external systems or run over API limits they were required to conform to.&lt;/p&gt;

&lt;p&gt;This event also gave them insights into the types of spikes and traffic patterns the system would have to handle at scale. Early engineering hire Jeffrey Matthias urged them to break their application into different services, making it easy to scale each service individually, and he and Tomas decided to have those services communicate via message queues.&lt;/p&gt;

&lt;h2 id=&quot;the-next-millions-of-users&quot;&gt;The next millions of users&lt;/h2&gt;

&lt;p&gt;By October 2018, the company received funding and the newly-hired engineering team of five people, began to split the original application into services that could handle sharp increases in demand and operate at scale. Shortly after, they had their next challenge in hand: Metallica had just signed up with the platform and they were going to do an early launch with their fans on Feb 1st, 2019.&lt;/p&gt;

&lt;p&gt;The team is glad to report the announcement was a success with no hiccups on their end. They were then five backend engineers who tackled everything from architectural design and development to setting up and operating the whole infrastructure.&lt;/p&gt;

&lt;p&gt;Community was officially unveiled in May 2019, &lt;a href=&quot;https://www.billboard.com/amp/articles/business/8543190/why-hundreds-music-stars-giving-fans-phone-numbers-community-app&quot;&gt;attracting hundreds of music stars shortly after&lt;/a&gt;. Fourteen months later, &lt;a href=&quot;https://twitter.com/barackobama/status/1308769164190941187&quot;&gt;Barack Obama tweeted to millions his phone number powered by Community&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-current-architecture&quot;&gt;The current architecture&lt;/h2&gt;

&lt;p&gt;Today, more than 60 services with distinct responsibilities power Community, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A message hub between community leaders and members&lt;/li&gt;
  &lt;li&gt;User data management&lt;/li&gt;
  &lt;li&gt;Media services (video, audio, images)&lt;/li&gt;
  &lt;li&gt;Systems for Community’s internal team&lt;/li&gt;
  &lt;li&gt;Data science and machine learning&lt;/li&gt;
  &lt;li&gt;Billing, administration, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The vast majority of those services run Elixir, with Python covering the data science and machine learning endpoints, and Go on the infrastructure side.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; handles the communication between services. The Erlang-backed message queue is responsible for broadcasting messages and acting as &lt;a href=&quot;https://andrealeopardi.com/posts/rpc-over-rabbitmq-with-elixir/&quot;&gt;their RPC backbone&lt;/a&gt;. Messages between services are encoded with Protocol Buffers via &lt;a href=&quot;https://github.com/elixir-protobuf/protobuf&quot;&gt;the protobuf-elixir library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially, they used &lt;a href=&quot;http://github.com/elixir-lang/gen_stage/&quot;&gt;the GenStage library&lt;/a&gt; to interface with RabbitMQ, but they have migrated to the higher level &lt;a href=&quot;https://github.com/dashbitco/broadway&quot;&gt;Broadway&lt;/a&gt; library over the last year. Andrea Leopardi, one of their engineers, outlines their challenges: “Our system has to handle different traffic patterns when receiving and delivering data. Incoming data may arrive at any time and be prone to spikes caused by specific events powered by actions within Communities. On the other hand, we deliver SMSes in coordination with partners who impose different restrictions on volumes, rate limiting, etc.”&lt;/p&gt;

&lt;p&gt;He continues: “both GenStage and Broadway have been essential in providing abstractions to handle these requirements. They provide back-pressure, ensure that spikes never overload the system, and guarantee we never send more messages than the amount defined by our delivery partners”. As they implemented the same patterns over and over in different services, they found Broadway to provide the ideal abstraction level for them.&lt;/p&gt;

&lt;p&gt;Their most in-demand service, the message hub, is powered by only five machines. They use &lt;a href=&quot;https://mesos.apache.org/&quot;&gt;Apache Mesos&lt;/a&gt; to coordinate deployments.&lt;/p&gt;

&lt;h2 id=&quot;growing-the-team&quot;&gt;Growing the team&lt;/h2&gt;

&lt;p&gt;Community’s engineering team has seen stable growth over the last two years. Today they are 25 backend engineers, the majority being Elixir devs, and the company extends beyond 120 employees.&lt;/p&gt;

&lt;p&gt;Karl Matthias, who joined early on, believes the challenges they face and the excitement for working on a new language has been positive for hiring talent. He details: “we try to hire the best production engineers we can, sometimes they know Elixir, sometimes they don’t. Our team has generally seen learning Elixir as a positive and exciting experience”.&lt;/p&gt;

&lt;p&gt;The team is also happy and confident about the stability Elixir provides. Karl adds: “Elixir supervisors have our back every time something goes wrong. They automatically reestablish connections to RabbitMQ, they handle dropped database connections, etc. The system has never gone wrong to the point our infrastructure layer had to kick-in, which has been quite refreshing.”&lt;/p&gt;

&lt;p&gt;The Community team ended our conversation with a curious remark. They had just shut down their first implementation of the system, the one that received a sudden spike of four hundred thousand users on a Saturday night. Tomas concludes: “it is pretty amazing that the service we implemented while learning Elixir has been running and operating in production just fine, even after all of these milestones. And that’s generally true for all of our services: once deployed, we can mostly forget about them”.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Orchestrating computer vision with Elixir at V7</title>
  <link href="http://elixir-lang.org/blog/2021/01/13/orchestrating-computer-vision-with-elixir-at-v7/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2021-01-13T00:00:00+00:00</updated>
  <id>/blog/2021/01/13/orchestrating-computer-vision-with-elixir-at-v7</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.v7labs.com&quot;&gt;V7&lt;/a&gt; is a web platform to create the sense of sight. A hub for machine learning and software engineers to develop their computer vision projects with data set management, image/video labeling, and one-click model training to automate any visual task.&lt;/p&gt;

&lt;p&gt;Founded in 2018 by Alberto Rizzoli and Simon Edwardsson, V7 uses Elixir, Phoenix, and Cowboy to power their web platform, responsible for managing large amounts of data and orchestrating dozens of Python nodes to carry out machine learning jobs. They have &lt;a href=&quot;https://www.notion.so/V7-Labs-raises-3-million-to-empower-AI-teams-with-automated-training-data-workflows-2c9b36d2043e44f3b536efae0a204632&quot;&gt;recently closed a $3M seed round&lt;/a&gt;, and they are currently &lt;a href=&quot;https://www.v7labs.com/working-at-v7&quot;&gt;hiring backend engineers to augment their Elixir team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/v7.png&quot; alt=&quot;V7&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;visual-tasks&quot;&gt;Visual tasks&lt;/h2&gt;

&lt;p&gt;Throughout the years, we have been continuously automating visual tasks to speed up manual processes and reduce the rate of errors. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Routine inspection of infrastructure: oil pipelines and offshore oil rigs require constant examination against corrosion. Once there is too much rust, it can damage the pipeline and cause leakage. Nowadays, you can use drones to take pictures and automate the detection of oxidated spots.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Medical examination: there is a growing use of digital pathology to assist doctors in diagnosing diseases. For example, during a biopsy of possible liver cancer, doctors use a microscope to visualize human tissue and stitch together an image of the cells, which are then individually analyzed. AI can double-check these images and help speed up problematic cells in case of positives.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Agriculture and farming: a wine producer may want to count grapes in a vineyard to estimate the wine production for a given season with higher precision. Farmers may use video to assess the health and the amount of exercise on free-range chickens and pigs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Visual automation also plays a growing role in quality assurance and robotics: a fast-food manufacturer can use cameras to identify fries with black spots, while harvesters may use robots to pick apples from trees.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Neural networks are at the heart of these tasks, and there is a growing need to automate the creation of the networks themselves.&lt;/p&gt;

&lt;h2 id=&quot;automating-ai&quot;&gt;Automating AI&lt;/h2&gt;

&lt;p&gt;Training a neural network for image and video classification often requires multiple steps. First, you annotate images and frames with bounded-boxes, polygons, skeletons, and many other formats. The annotations are then labeled and used to train computer vision models. Labeled annotations are also used to verify models against biases, outliers, and over/underfitting.&lt;/p&gt;

&lt;p&gt;For many AI companies, this process exists in a loop as they continuously refine datasets and models. V7 helps teams manage and automate these steps, accelerating the creation of high-quality training data by 10-100x. Users may then export this data or use it to create neural networks directly via the platform.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; style=&quot;margin: 0 auto 30px; display: block&quot; src=&quot;https://www.youtube.com/embed/SvihDSAY4TQ&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;V7 uses Elixir to orchestrate all of these tasks. The front-end is a Vue.js application that talks to a &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;Phoenix-powered&lt;/a&gt; API. The Phoenix application has to work with a large amount of data across a wide variety of formats. For example, a microscope outputs images in a different format, often proprietary, than a regular laboratory camera.&lt;/p&gt;

&lt;p&gt;To perform all the machine learning tasks, V7 has a cluster of Python nodes orchestrated by an Elixir application running the &lt;a href=&quot;https://github.com/ninenines/cowboy/&quot;&gt;Cowboy&lt;/a&gt; webserver. Once a Python node comes up, it establishes a WebSocket connection with Cowboy and sends how much memory, CPU, GPU, and other relevant data it has available.&lt;/p&gt;

&lt;p&gt;The Phoenix-powered backend communicates with the orchestrator using another Erlang VM-based technology: &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;. For example, when the user tasks to auto-annotate an image, the Vue.js front-end sends a REST request to Phoenix. Phoenix then enqueues a message on RabbitMQ with the image’s location, typically an Amazon S3 bucket. The orchestrator picks this message up, finds an available Python node, and delivers the relevant instructions via WebSockets.&lt;/p&gt;

&lt;h2 id=&quot;ecosystem-and-infrastructure&quot;&gt;Ecosystem and Infrastructure&lt;/h2&gt;

&lt;p&gt;Other tools used by the V7 team are &lt;a href=&quot;https://github.com/dashbitco/broadway&quot;&gt;Broadway&lt;/a&gt; and the Erlang Distribution.&lt;/p&gt;

&lt;p&gt;V7 has to process and normalize images and videos. For these, they have a separate service that receives RabbitMQ messages and invokes &lt;a href=&quot;https://imagemagick.org/&quot;&gt;ImageMagick&lt;/a&gt; or &lt;a href=&quot;https://ffmpeg.org/&quot;&gt;FFmpeg&lt;/a&gt; accordingly. They use Broadway to receive RabbitMQ messages and to execute these tasks concurrently.&lt;/p&gt;

&lt;p&gt;The Erlang Distribution helps them broadcast information across nodes. Since they store their multimedia data on S3, they need to generate pre-signed URLs whenever the user wants to see an image or video. However, if users are routed to a different node, they would get a different URL, which would force them to download the asset again. To address this, they use the Erlang Distribution to communicate which URLs they have generated and for which purposes.&lt;/p&gt;

&lt;p&gt;Overall, their backend runs on Amazon ECS on about four nodes, which talk directly to PostgreSQL. The largest part of their infrastructure is the Python cluster, which takes up to two dozens of machines.&lt;/p&gt;

&lt;h2 id=&quot;learning-and-hiring&quot;&gt;Learning and Hiring&lt;/h2&gt;

&lt;p&gt;Elixir has been present inside the company since day one, back in August 2018. Andrea Azzini, the first engineer at V7, was the one responsible for introducing it. He believed the language would be a good fit for the challenges ahead of them based on his experience running Elixir in production.&lt;/p&gt;

&lt;p&gt;Simon Edwardsson, their CTO, had to learn the language as they developed the system, but he was able to get up and running quickly, thanks to his previous experiences with Python and Haskell. He remarks: “As a team, we were more familiar with Django, but we were concerned it would not handle well the amount of data and annotations that we manage - which could lead to rewrites or frustrations down the road. From this perspective, the investment in Elixir was worth it, as we never had to do major changes on our backend since we started.”&lt;/p&gt;

&lt;p&gt;Part of this is thanks to Phoenix’s ability to provide high-level abstractions while making its building blocks accessible to developers: “While there is magic happening inside Phoenix, it is straight-forward to peek under the hood and make sense of everything.”&lt;/p&gt;

&lt;p&gt;V7 has recently welcomed a new Elixir engineer to their team, making it a total of four, and they are looking for more developers interested in joining them. Historically, more engineers have applied to their machine learning positions, but they also believe many Elixir developers are prepared but don’t consider themselves ready. Simon finishes with an invitation: “We are primarily looking for backend engineers with either existing Elixir experience or willingness to learn on the job. If you are interested in automating computer vision across a large range of industries, &lt;a href=&quot;https://www.v7labs.com/working-at-v7&quot;&gt;we welcome you to get in touch&lt;/a&gt;.”&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Integrating travel with Elixir at Duffel</title>
  <link href="http://elixir-lang.org/blog/2020/12/10/integrating-travel-with-elixir-at-duffel/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-12-10T00:00:00+00:00</updated>
  <id>/blog/2020/12/10/integrating-travel-with-elixir-at-duffel</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://duffel.com/&quot;&gt;Duffel&lt;/a&gt; is building the new software backbone of the travel industry. Their first product is the Flights API, a developer-friendly platform that enables any business to instantly search flights, make bookings, reserve seats, and sell paid extras like checked bags. Duffel is connected to more than 20 of the world’s largest airlines, including American Airlines, Emirates, and Lufthansa. The company was founded in November 2017 and in 2019 it opened a private beta of their API and has raised $56M total in funding. It now has 40 employees across its offices in London and New York. This article discusses how Duffel has used Elixir as their technology of choice to modernize an industry built on old standards and outdated stacks. If you are interested in shaping the future of travel, &lt;a href=&quot;https://duffel.com/careers&quot;&gt;Duffel is hiring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/duffel.png&quot; alt=&quot;Duffel&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-elixir&quot;&gt;Why Elixir?&lt;/h2&gt;

&lt;p&gt;Today, to access flights and prices from airlines, companies have to go through a Global Distribution System (GDS), often using decades-old systems such as Amadeus and Sabre. Steve Domin, Duffel’s founder / CEO, explains: “The airline industry runs on a legacy data exchange standard called &lt;a href=&quot;https://en.wikipedia.org/wiki/EDIFACT&quot;&gt;EDIFACT standard&lt;/a&gt; and only recently moved to a ‘modern’ SOAP/XML world. Any integration work with a GDS or an airline is always scheduled to take months, and this creates a very high barrier to entry for new businesses.”&lt;/p&gt;

&lt;p&gt;At its heart, Duffel is building the new operating system for travel. A single request to Duffel’s API may translate into a chain of dozens of requests to different airlines. The response of each request needs to be parsed, normalized, and potentially be hydrated with more outgoing requests. All of this while managing slow responses, timeouts, large data payloads, and more. These challenges made it clear to Steve that Elixir would be a great fit: “We are building a highly concurrent platform with intensive data trafficking. From day one, it was clear the Erlang VM would be a great fit, as it was designed for telecommunication with similar requirements in mind.” They chose the Erlang VM, alongside &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;the Phoenix web framework&lt;/a&gt; and &lt;a href=&quot;https://github.com/elixir-ecto/ecto&quot;&gt;the Ecto database library&lt;/a&gt; as their stack to launch their initial JSON API. They leverage Elixir’s standard library for most of their concurrent work and &lt;a href=&quot;https://github.com/qcam/saxy&quot;&gt;the Saxy library for XML parsing&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;growing-with-open-source&quot;&gt;Growing with Open Source&lt;/h2&gt;

&lt;p&gt;When Steve co-founded the company in November 2017, he already had plenty of experience with Elixir. Steve started using the language before it reached 1.0, back in 2013. He started his journey by hacking on &lt;a href=&quot;https://github.com/devinus/dynamo&quot;&gt;Dynamo&lt;/a&gt;, Phoenix’s ancestor, and eventually introduced Elixir at his previous company, by using it for an internal project. He also organized meet-ups in London and contributed to Open Source projects, including some of his own, such as &lt;a href=&quot;https://github.com/swoosh/swoosh&quot;&gt;Swoosh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The founders joined &lt;a href=&quot;https://www.ycombinator.com/&quot;&gt;Y Combinator&lt;/a&gt; in Summer 2018. Once they came back to London, they hired Alan Kennedy as their first engineer. Alan first heard about Elixir when he and Steve were colleagues at GoCardless. Alan kept an eye on it but never actively used it until he joined Duffel. Alan recalls struggling to jump from a language that promotes mutability to an immutable language like Elixir. Once everything clicked, he acknowledged the new programming model is conceptually much simpler.&lt;/p&gt;

&lt;p&gt;Since then, the company has grown with a mixture of fresh and experienced engineers, including nearly 70% of the engineering organisation programming in Elixir.&lt;/p&gt;

&lt;p&gt;Johanna Larsson is one of the most recent engineers to join Duffel. She had already spoken at Elixir Conferences and made meaningful contributions to the ecosystem, such as &lt;a href=&quot;https://diff.hex.pm/&quot;&gt;the HexDiff project&lt;/a&gt;, before she was hired. In her opinion, one of Elixir’s biggest assets is the community, which she considers welcoming and supportive.&lt;/p&gt;

&lt;p&gt;Duffel has often been able to leverage the ecosystem and reach out to existing solutions. However, they don’t shy away from creating their own and open-sourcing them whenever it makes sense. Overall, the Duffel team has contributed to many areas of the ecosystem. Besides the previously mentioned Swoosh and HexDiff projects, their team members created &lt;a href=&quot;https://github.com/msz/hammox&quot;&gt;Hammox&lt;/a&gt;, &lt;a href=&quot;https://github.com/stevedomin/bigflake&quot;&gt;Bigflake&lt;/a&gt;, the company’s own &lt;a href=&quot;https://github.com/duffelhq/paginator/&quot;&gt;Paginator&lt;/a&gt; library, and others.&lt;/p&gt;

&lt;h2 id=&quot;upcoming-challenges&quot;&gt;Upcoming challenges&lt;/h2&gt;

&lt;p&gt;Duffel engineers have many interesting and exciting challenges ahead of them. For example, as more developers start using the product, they will begin to hit some rate-limits imposed by airlines that they haven’t yet exercised. As one would expect, different airlines have different rules and various constraints, and providing a unified solution has its hurdles.&lt;/p&gt;

&lt;p&gt;Some of the upcoming improvements are related to their usage of umbrella projects. Duffel started as a monolith, but they eventually migrated to Elixir’s umbrella projects - a mono-repo implementation within Elixir’s tooling - as soon as Phoenix v1.4 was released. Their primary motivation was to separate the communication with different airlines into different services. In the beginning, the services were clear in Steve’s head, but as the team grew, they experienced friction enforcing those boundaries, which led to cyclic dependencies.&lt;/p&gt;

&lt;p&gt;Luckily, Elixir v1.11 started emitting warnings for cyclic and undeclared dependencies between applications, which forced the Duffel team to revisit the areas that were not strict in the past to increase the quality of the codebase in the long term.&lt;/p&gt;

&lt;p&gt;The team is also always exploring how to improve their APIs by bringing new approaches and technologies, such as streaming and GraphQL, as well as intelligent ways to optimize their integrations. If you are interested in tackling these and many other challenges while reshaping the travel industry, you can &lt;a href=&quot;https://duffel.com/careers&quot;&gt;learn more about Duffel’s engineering opportunities&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Real-time collaboration with Elixir at Slab</title>
  <link href="http://elixir-lang.org/blog/2020/11/17/real-time-collaboration-with-elixir-at-slab/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-11-17T00:00:00+00:00</updated>
  <id>/blog/2020/11/17/real-time-collaboration-with-elixir-at-slab</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://slab.com/&quot;&gt;Slab&lt;/a&gt; is a knowledge base and team wiki that democratizes knowledge. Jason Chen started Slab in August 2016, after picking Elixir and Phoenix as the best tools to build real-time collaborative applications. The company has grown to 6 engineers since then, distributed worldwide, and relied upon by more than 7000 companies and customers like Asana, Discord, and Glossier. If you are interested in helping companies become a source of learning and purpose, especially  during these times where remote collaboration is essential, &lt;a href=&quot;https://slab.com/jobs?ref=elixir&quot;&gt;Slab is hiring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/slab.png&quot; alt=&quot;Slab&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-elixir&quot;&gt;Why Elixir?&lt;/h2&gt;

&lt;p&gt;Slab was not the first time Jason wrote a collaborative web app. He had previous practice building them in Rails and Node.js and he believed there was a lot to improve in the development experience, especially when it came to working with WebSockets. Both technologies were also troublesome in production, as the team faced issues scaling them vertically and horizontally.&lt;/p&gt;

&lt;blockquote style=&quot;font-size: 24px; color: #444&quot;&gt;
&lt;p&gt;I wanted a framework with the same developer experience as Django and Rails, but one that was designed for real-time applications.&lt;/p&gt;
&lt;p style=&quot;font-size: 20px&quot;&gt;— Jason Chen, CEO, on the Phoenix web framework&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jason doesn’t consider himself a person who is always looking for new things, but he knew he would have to survey the options around him when starting Slab. During this period, he explored two main languages: Go and Elixir. In the end, Jason chose Elixir, thanks to &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;the Phoenix web framework&lt;/a&gt;: “I was looking for a framework that offered a complete toolset for building web apps. I was not interested in making low-level choices, such as which  &lt;acronym title=&quot;Object-relational mapping&quot;&gt;ORM&lt;/acronym&gt; to use, which library to pick for parsing requests, etc. I wanted a framework with the same developer experience as Django and Rails, but one that was designed for real-time applications”.&lt;/p&gt;

&lt;p&gt;Jason gave himself two weeks to build a proof of concept. He wrote a collaborative blog, where multiple users could write a post simultaneously, and comments were added in real-time — all while learning Elixir and the Phoenix framework.&lt;/p&gt;

&lt;p&gt;The trial went better than expected, and Jason’s journey with Slab had officially begun.&lt;/p&gt;

&lt;h2 id=&quot;growing-with-the-platform&quot;&gt;Growing with the platform&lt;/h2&gt;

&lt;p&gt;Shortly after, Slab was in a private beta with a handful of companies as users. For each major feature they had along the way, Elixir and Phoenix provided the building blocks for it. When they implemented real-time comments, they used Phoenix Channels and Phoenix PubSub. The pattern goes on: “for asynchronous processing, we simply use &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html&quot;&gt;Elixir tasks&lt;/a&gt;”. Later on, to track users editing a document and give each a different cursor color, they used &lt;a href=&quot;https://hexdocs.pm/phoenix/Phoenix.Presence.html&quot;&gt;Phoenix Presence&lt;/a&gt;, a tool that no other web framework offers out-of-the-box.&lt;/p&gt;

&lt;p&gt;Another leap in Jason’s journey with Slab and Elixir was when he had to learn Erlang/OTP, a group of behaviors that ship as part of Erlang’s standard library for building distributed and fault-tolerant applications.&lt;/p&gt;

&lt;p&gt;To improve the real-time collaborative editor that is part of Slab, Jason implemented &lt;a href=&quot;https://en.wikipedia.org/wiki/Operational_transformation&quot;&gt;Operational Transformation&lt;/a&gt;. The client runs in the browser, implemented with &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;. As users make changes to the text, their diffs are sent to the server, which arbitrates these updates and synchronizes them across the various clients.&lt;/p&gt;

&lt;p&gt;Tackling the synchronization problem is not trivial, especially when the application is running on multiple nodes. Here is the challenge they faced. Imagine user Alice has a WebSocket connection to node X and user Bob is connected to node Y. Both Alice and Bob are working on the same text. How can Slab guarantee that changes from both users are applied, so both see the same document once done editing?&lt;/p&gt;

&lt;p&gt;One could try to solve this problem by keeping the server stateless. Every time the server receives a diff from the client, the server would read the document from the database, apply the changes, normalize the result, and broadcast the clients’ updates. With this approach, the issue is that loading the text from the database on every client update would quickly become expensive, especially as they grow in size. Response times would become higher and the user experience would degrade.&lt;/p&gt;

&lt;p&gt;When working with Node.js, Jason tried a different approach. If Alice and Bob were writing to the same document, a load balancer would guarantee that both would be routed to the same node. After trying out both Apache and Nginx, he implemented the balancer in Node.js. The overall solution was time-consuming to get right and introduced operational complexities.&lt;/p&gt;

&lt;p&gt;Luckily, these problems are the bread and butter of Erlang/OTP. Jason knew he needed a stateful abstraction to keep this state on the server. He had already heard about the options the platform provides, but he was unsure which one to pick. Jason recalls: “I remember asking the community if I should use an &lt;a href=&quot;https://hexdocs.pm/elixir/Agent.html&quot;&gt;Agent&lt;/a&gt; or a &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;GenServer&lt;/a&gt; and everyone was really helpful in providing guidance.” They quickly landed on GenServer as their tool of choice.&lt;/p&gt;

&lt;p&gt;By default, both GenServer and Agents are local to each node. However, they also support the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:global&lt;/code&gt; option, which registers a given name across the cluster. To use this option, they need the Erlang distribution, which they were already using for Phoenix PubSub and Presence, so this was a straight-forward change. This guarantees both Alice and Bob talk to the same GenServer, regardless if they joined node X or node Y.&lt;/p&gt;

&lt;p&gt;Later on, when running the system in production, the platform continued to impress him. Every time they increased the machine resources, they could see the runtime efficiently using everything it had available, without changes to the code.&lt;/p&gt;

&lt;h2 id=&quot;learning-and-tools&quot;&gt;Learning and tools&lt;/h2&gt;

&lt;p&gt;There are other few notable tools in Slab’s stack.&lt;/p&gt;

&lt;p&gt;Back in 2017, they migrated to GraphQL &lt;a href=&quot;http://absinthe-graphql.org/&quot;&gt;powered by Elixir’s Absinthe&lt;/a&gt;. There were concerns about adopting the query language, as it was a relatively new technology. Still, they felt it would address a real issue: they had different components in the application needing distinct data, and managing all of these possible combinations was becoming complex. This was one of the main problems GraphQL was designed to solve.&lt;/p&gt;

&lt;p&gt;They are also running on Google Cloud with Kubernetes (K8s), and, as many Elixir engineers, they wondered &lt;a href=&quot;https://dashbit.co/blog/kubernetes-and-the-erlang-vm-orchestration-on-the-large-and-the-small&quot;&gt;how the Erlang VM fit in a world with Docker and K8s&lt;/a&gt;. Today they run on 6 nodes, 5 of them running application code. The sixth one handles &lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;cron jobs&lt;/a&gt; and stays on standby for new deployments. They use &lt;a href=&quot;https://github.com/mrluc/peerage&quot;&gt;the peerage library&lt;/a&gt; to establish Distributed Erlang connections between the nodes.&lt;/p&gt;

&lt;blockquote style=&quot;font-size: 24px; color: #444&quot;&gt;
&lt;p&gt;We really value Elixir's ability to build complex systems using fewer moving parts. The code is simpler, and the system is easier to operate.&lt;/p&gt;
&lt;p style=&quot;font-size: 20px&quot;&gt;— Sheharyar Naseer, engineer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Overall the Slab team aims to keep the number of dependencies low, something they believe is made possible by the platform and positively impacts onboarding new developers. Sheharyar Naseer, a member of their engineering team, explains: “We really value Elixir’s ability to build complex systems using fewer moving parts. The code is simpler, and the system is easier to operate, making both experienced and new engineers more productive. We ran in production for more than 3 years without resorting to Redis. We just recently added it because we wanted our caches to survive across deployments. Many other stacks impose technologies like Redis from day one.”&lt;/p&gt;

&lt;p&gt;This approach also yields benefits when updating libraries. Sheharyar continues: “For the most part, upgrading Erlang, Elixir, and Phoenix is straight-forward. We go through the CHANGELOG, which always emphasizes the main changes we need to perform, and we have a pull request ready after one or two hours. The only time we could not upgrade immediately was when Erlang/OTP removed old SSL ciphers, which broke our HTTP client and we caught it early on during development.”&lt;/p&gt;

&lt;p&gt;When onboarding engineers, Slab recommends them different books and video courses — many of which you can find &lt;a href=&quot;/learning.html&quot;&gt;in our learning resources page&lt;/a&gt; — so they have the flexibility to choose a medium they are most productive with. New engineers also work on Slab itself and receive guidance through pull requests. They start with small tasks, usually in the client and GraphQL layers, and slowly tackle more complex problems around the database and Erlang/OTP. If you are interested in improving remote collaboration, &lt;a href=&quot;https://slab.com/jobs?ref=elixir&quot;&gt;learn more about their opportunities on their website&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Delivering social change with Elixir at Change.org</title>
  <link href="http://elixir-lang.org/blog/2020/10/27/delivering-social-change-with-elixir-at-change.org/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-10-27T00:00:00+00:00</updated>
  <id>/blog/2020/10/27/delivering-social-change-with-elixir-at-change.org</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://change.org/&quot;&gt;Change.org&lt;/a&gt; is a social change platform, with over 400 million users worldwide. Two years ago, their engineering team faced a challenge to migrate their messaging system from an external vendor to an in-house solution, to reduce costs and gain flexibility.&lt;/p&gt;

&lt;p&gt;This article will discuss how they approached this problem, why they chose Elixir, and how their system grew to deliver more than 1 billion emails per month. Change.org is also &lt;a href=&quot;https://www.change.org/careers&quot;&gt;hiring Elixir engineers to join their team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/change.png&quot; alt=&quot;Change.org&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-path-to-elixir&quot;&gt;The path to Elixir&lt;/h2&gt;

&lt;p&gt;The first step for Change.org’s engineering team was to outline the requirements for their system. The system would receive millions of events, such as campaign updates, new petitions, and more, and it should send emails to all interested parties whenever appropriate. They were looking for an event-driven solution at its core, in which concurrency and fault-tolerance were strong requirements.&lt;/p&gt;

&lt;p&gt;The next stage was to build proofs-of-concept in different programming languages. Not many companies can afford this step, but Change.org’s team knew the new system was vital to their business and wanted to be thorough in their analysis.&lt;/p&gt;

&lt;p&gt;Around this time, John Mertens, Director of Engineering, was coming back from parental leave. He used this opportunity to catch up with different technologies whenever possible. That’s when he stumbled upon &lt;a href=&quot;https://www.youtube.com/watch?v=XPlXNUXmcgE&quot;&gt;José Valim’s presentation at Lambda Days&lt;/a&gt;, which discussed two libraries in the Elixir ecosystem: &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;GenStage&lt;/a&gt; and &lt;a href=&quot;https://github.com/dashbitco/flow&quot;&gt;Flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They developed prototypes in four technologies: JRuby, Akka Streams, Node.js, and Elixir. The goal was to evaluate performance, developer experience, and community support for their specific use cases. Each technology had to process 100k messages as fast as possible. John was responsible for the Elixir implementation and put his newly acquired knowledge to use.&lt;/p&gt;

&lt;p&gt;After two evaluation rounds, the team chose to go ahead with Elixir. Their team of 3 engineers had 18 months to replace the stack they had been using for the last several years with their own Elixir implementation.&lt;/p&gt;

&lt;h2 id=&quot;learning-elixir&quot;&gt;Learning Elixir&lt;/h2&gt;

&lt;p&gt;When they started the project, none of the original team members had prior experience with Elixir. Only Justin Almeida, who joined when the project had been running by six months, had used Elixir before.&lt;/p&gt;

&lt;p&gt;Luckily, the team felt supported by the different resources available in the community. John recalls: “We were in one of our early meetings discussing how to introduce Elixir into our stack when Pragmatic Programmers announced the &lt;a href=&quot;https://pragprog.com/titles/tvmelixir/adopting-elixir/&quot;&gt;Adopting Elixir&lt;/a&gt; book, which was extremely helpful in answering many of our questions.”&lt;/p&gt;

&lt;h2 id=&quot;the-new-system&quot;&gt;The new system&lt;/h2&gt;

&lt;p&gt;The team developed three Elixir applications to replace the external vendor. The first application processes all incoming events to decide whether an email should go out and to whom.&lt;/p&gt;

&lt;p&gt;The next application is the one effectively responsible for dispatching the emails. For each message, it finds the appropriate template as well as the user locale and preferences. It then assembles the email and delivers it with the help of a Mail Transfer Agent (MTA).&lt;/p&gt;

&lt;p&gt;The last application is responsible for analytics. It receives webhook calls from the MTA with batches of different events, which are processed and funneled into their data warehouse for later use.&lt;/p&gt;

&lt;p&gt;After about four months, they put the new system in production. While Change.org has dozens of different email templates, the initial deployment handled a single and straight-forward case: password recovery.&lt;/p&gt;

&lt;p&gt;Once the new system was in production, they continued to migrate different use cases to the system, increasing the numbers of handled events and delivered emails day after day. After one year, they had completed the migration ahead of schedule.&lt;/p&gt;

&lt;h2 id=&quot;handling-spikes-and-load-regulation&quot;&gt;Handling spikes and load regulation&lt;/h2&gt;

&lt;p&gt;Today, those applications run on a relatively small number of nodes. The first two applications use 6 to 8 nodes, while the last one uses only two nodes.&lt;/p&gt;

&lt;p&gt;John explains they are over-provisioned because spikes are relatively frequent in the system: “for large campaigns, a single event may fan out to thousands or hundreds of thousands of emails.”&lt;/p&gt;

&lt;p&gt;The team was kind enough to share some of their internal graphs. In the example below, you can see a spike of over 10 million messages coming to the system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/change-graph.png&quot; alt=&quot;Usage at Change.org&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once this burst happens, all nodes max their CPUs, emitting around 3000 emails per second until they drain the message queue. The whole time memory usage remains at 5%.&lt;/p&gt;

&lt;p&gt;The back-pressure provided by the &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;GenStage&lt;/a&gt; library played a crucial role in the system’s performance.  Since those applications fetch events from message queues, process them, and submit them into third-party services, they must avoid overloading any part of the stack. GenStage addresses this by allowing the different components, called stages in the library terminology, to communicate how much data they can handle right now. For example, if sending messages to the MTA is slower than usual, the system will naturally get fewer events from the queue.&lt;/p&gt;

&lt;p&gt;Another essential feature of the system is to work in batches. Receiving and sending data is more efficient and cost-effective if you can do it in groups instead of one-by-one. John has given &lt;a href=&quot;https://www.youtube.com/watch?v=t46L9RKmlNo&quot;&gt;a presentation at ElixirConf Europe sharing the lessons learned from their first trillion messages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The activity on Change.org has grown considerably over the last year too. The systems have coped just fine. Justin remarks: “everything has been working so well that some of those services are not really on our minds.”&lt;/p&gt;

&lt;h2 id=&quot;working-with-the-ecosystem&quot;&gt;Working with the ecosystem&lt;/h2&gt;

&lt;p&gt;Change.org has relied on and contributed to the ecosystem whenever possible. During the migration, both old and new systems had to access many shared resources, such as &lt;a href=&quot;https://haml.info/&quot;&gt;HAML templates&lt;/a&gt;, Ruby’s I18N configuration files, and &lt;a href=&quot;https://sidekiq.org/&quot;&gt;Sidekiq’s background queues&lt;/a&gt;. Fortunately, they were able to find compatible libraries in the Elixir ecosystem, respectively &lt;a href=&quot;https://github.com/nurugger07/calliope&quot;&gt;calliope&lt;/a&gt;, &lt;a href=&quot;https://github.com/change/linguist&quot;&gt;linguist&lt;/a&gt;, and &lt;a href=&quot;https://github.com/akira/exq&quot;&gt;exq&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nowadays, some of those libraries have fallen out of flavor. For example, the community has chosen gettext for internationalization, as it is a more widely accepted format. For this reason, Change.org has stepped in and taken ownership of the linguist library.&lt;/p&gt;

&lt;p&gt;As Change.org adopted Elixir, the ecosystem grew to better support their use cases too. One recent example &lt;a href=&quot;https://github.com/dashbitco/broadway&quot;&gt;is the Broadway library&lt;/a&gt;, which makes it easy to assemble data pipelines. John explains: “Broadway builds on top of GenStage, so it provides the load regulation, concurrency, and fault-tolerance that we need. It also provides batching and partitioning, which we originally had to build ourselves. For new projects, Broadway is our first choice for data ingestion and data processing.”&lt;/p&gt;

&lt;h2 id=&quot;elixir-as-the-default-stack&quot;&gt;Elixir as the default stack&lt;/h2&gt;

&lt;p&gt;As projects migrate to Elixir, Elixir has informally become the default stack at Change.org for backend services. Today they have more than twenty projects. The engineering team has also converged on a common pattern for services in their event driven architecture, built with Broadway and Phoenix.&lt;/p&gt;

&lt;p&gt;In a nutshell, they use Broadway to ingest, aggregate, and store events in the database. Then they use Phoenix to expose this data, either through APIs, as analytics or as tooling for their internal teams.&lt;/p&gt;

&lt;p&gt;One recent example is &lt;a href=&quot;https://medium.com/making-change-org/our-elixir-bandit-service-e2b6af6eebc4&quot;&gt;Change.org’s Bandit service&lt;/a&gt;. The service provides a Phoenix API that decides which copy to present to users in various parts of their product. As users interact with these copies, data is fed into the system and analyzed in batches with Broadway. They use this feedback to optimize and make better choices in the future.&lt;/p&gt;

&lt;p&gt;The team has also grown to ten Elixir developers thanks to the multiple training and communities of practice they have organized internally. Change.org is also looking for Elixir backend engineers, as they aim to bring experience and diversity to their group. Interested developers can &lt;a href=&quot;https://www.change.org/careers&quot;&gt;learn more about these opportunities on their website&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Real time communication at scale with Elixir at Discord</title>
  <link href="http://elixir-lang.org/blog/2020/10/08/real-time-communication-at-scale-with-elixir-at-discord/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-10-08T00:00:00+00:00</updated>
  <id>/blog/2020/10/08/real-time-communication-at-scale-with-elixir-at-discord</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Founded in 2015 by Jason Citron and Stan Vishnevskiy, &lt;a href=&quot;https://discord.com/&quot;&gt;Discord&lt;/a&gt; is a permanent, invite-only space for your communities and friends, where people can hop between voice, video, and text, depending on how they want to talk, letting them have conversations in a very natural or authentic way. Today, the service has over 100 million monthly active users from across the globe. Every day people spend 4 billion minutes in conversation on Discord servers, across 6.7 million active servers / communities.&lt;/p&gt;

&lt;p&gt;From day one, Discord has used Elixir as the backbone of its chat infrastructure. When Discord first adopted the language, they were still working on building a viable business, with many questions and challenges in front of them. Elixir played a crucial role in giving them the desired technological flexibility to grow the company and also became the building block that would allow their systems to run on a massive scale.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/discord.jpg&quot; alt=&quot;Discord&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;starting-technologies&quot;&gt;Starting technologies&lt;/h2&gt;

&lt;p&gt;Back in 2015, Discord chose two main languages to build their infrastructure: Elixir and Python. Elixir was initially picked to power the WebSocket gateway, responsible for relaying messages and real-time replication, while Python powered their API.&lt;/p&gt;

&lt;p&gt;Nowadays, the Python API is a monolith while the Elixir stack contains 20 or so different services. These architectural choices do not represent a dichotomy between the languages but rather a pragmatic decision. Mark Smith, from the Discord team, explains it succinctly: “given the Elixir services would handle much bigger traffic, we designed them in a way where we could scale each service individually.”&lt;/p&gt;

&lt;p&gt;Discord has also explored other technologies along the way, Go and Rust being two examples, with distinct outcomes. While Discord completely phased out Go after a short foray, Rust has proven to be an excellent addition to their toolbox, boosted by its ability to play well with Elixir and Python.&lt;/p&gt;

&lt;h2 id=&quot;communication-at-scale&quot;&gt;Communication at scale&lt;/h2&gt;

&lt;p&gt;Effective communication plays an essential role when handling millions of connected users concurrently. To put things into perspective, some of Discord’s most popular servers, such as those dedicated to Fortnite and Minecraft, are nearing six hundred thousand users. At a given moment, it is not unlikely to encounter more than two hundred thousand active users in those servers. If someone changes their username, Discord has to broadcast this change to all connected users.&lt;/p&gt;

&lt;p&gt;Overall, Discord’s communication runs at impressive numbers. They have crossed more than 12 million concurrent users across all servers, with more than 26 million WebSocket events to clients per second, and Elixir is powering all of this.&lt;/p&gt;

&lt;blockquote style=&quot;font-size: 24px; color: #444&quot;&gt;
&lt;p&gt;In terms of real time communication, the Erlang VM is the best tool for the job.&lt;/p&gt;
&lt;p style=&quot;font-size: 20px&quot;&gt;— Jake Heinz, Lead Software Engineer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we asked their team “Why Elixir?”, Jake Heinz gave a straight-forward answer: “In terms of real time communication, the Erlang VM is the best tool for the job. It is a very versatile runtime with excellent tooling and reasoning for building distributed systems”. Technologically speaking, the language was a natural fit. However, Elixir was still a bet back in 2015: “Elixir v1.0 had just come out, so we were unsure in which direction the language would go. Luckily for us, we have been pleased with how the language has evolved and how the community shaped up.”&lt;/p&gt;

&lt;h2 id=&quot;the-chat-infrastructure-team&quot;&gt;The chat infrastructure team&lt;/h2&gt;

&lt;p&gt;To power their chat messaging systems, Discord runs a cluster with 400-500 Elixir machines. Perhaps, the most impressive feat is that Discord’s chat infrastructure team comprises five engineers. That’s right: five engineers are responsible for 20+ Elixir services capable of handling millions of concurrent users and pushing dozens of millions of messages per second.&lt;/p&gt;

&lt;p&gt;Discord also uses Elixir as the control plane of their audio and video services, also known as signaling, which establishes communication between users. C++ is then responsible for media streaming, a combination that altogether runs on 1000+ nodes.&lt;/p&gt;

&lt;p&gt;The Elixir services communicate between them using Distributed Erlang, the communication protocol that ships as part of the Erlang Virtual Machine. By default, Distributed Erlang builds a fully meshed network, but you can also ask the Erlang VM to leave the job of outlining the topology up to you, by setting the aptly named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-connect_all false&lt;/code&gt; flag. The Discord team sets this option to assemble a partially meshed network with &lt;a href=&quot;https://etcd.io/&quot;&gt;etcd&lt;/a&gt; being responsible for service discovery and hosting shared configuration.&lt;/p&gt;

&lt;p&gt;The chat infrastructure developers are not the only ones touching the Elixir codebases. According to Mark Smith, this is an important part of Discord’s culture: “We don’t work in silos. So a Python developer may have to work on the Elixir services when building a new feature. We will spec out the feature together, figure out the scalability requirements, and then they will work on a pull request, which we will review and help them iterate on it.”&lt;/p&gt;

&lt;h2 id=&quot;community-and-challenges&quot;&gt;Community and challenges&lt;/h2&gt;

&lt;p&gt;To run at this scale, Discord learned how to leverage the Erlang VM’s power, its community, and when to recognize challenges that require them to reach for their own solutions.&lt;/p&gt;

&lt;p&gt;For example, Discord uses &lt;a href=&quot;https://github.com/ninenines/cowboy/&quot;&gt;Cowboy&lt;/a&gt; for handling WebSocket connections and TCP servers. To manage data bursts and provide load regulation, such as back-pressure and load-shedding, they use &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;GenStage&lt;/a&gt;, which they have &lt;a href=&quot;https://blog.discord.com/how-discord-handles-push-request-bursts-of-over-a-million-per-minute-with-elixirs-genstage-8f899f0221b4&quot;&gt;discussed in detail in the past&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other times, the efforts of the company and the community go hand in hand. That was the case when Discord used &lt;a href=&quot;https://github.com/rusterlium/rustler&quot;&gt;the Rustler project&lt;/a&gt;, which provides a safe bridge between Elixir and Rust, to &lt;a href=&quot;https://blog.discord.com/using-rust-to-scale-elixir-for-11-million-concurrent-users-c6f19fc029d3&quot;&gt;scale to 11 million concurrent users&lt;/a&gt;. They used the Rustler to hook a custom data structure built in Rust directly into their Elixir services.&lt;/p&gt;

&lt;p&gt;However, the team has made abundantly clear that the powerhouse is the Erlang platform. Every time they had to push their stack forward, they never felt cornered by the technology. Quite the opposite, their engineers could always build efficient solutions that run at Discord’s scale, often in a few hundred lines of code. Discord frequently gives these projects back to the community, as seen in &lt;a href=&quot;https://github.com/discord/manifold&quot;&gt;Manifold&lt;/a&gt; and &lt;a href=&quot;https://github.com/discord/zen_monitor&quot;&gt;ZenMonitor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Discord team also adapted quickly when things went wrong. For instance, they attempted twice to use &lt;a href=&quot;https://www.erlang.org/doc/man/mnesia.html&quot;&gt;Mnesia&lt;/a&gt; in production —a database that ships as part of Erlang’s standard library. They tried Mnesia in persistent and in-memory modes, and the database nodes would often fall behind in failure scenarios, sometimes being unable to ever catch up. Eventually they ditched Mnesia altogether and built the desired functionality with Erlang’s builtin constructs, such as GenServer and ETS. Nowadays, they resolve these same failure scenarios within 2-3 seconds.&lt;/p&gt;

&lt;h2 id=&quot;mastering-elixir&quot;&gt;Mastering Elixir&lt;/h2&gt;

&lt;p&gt;None of the chat infrastructure engineers had experience with Elixir before joining the company. They all learned it on the job. Team members Matt Nowack and Daisy Zhou report initially struggling to understand how all of their services communicate. Matt adds: “In the beginning, it was hard to accept all of the guarantees that Erlang VM provides. I’d worry about data races and concurrency issues that were impossible to happen”. Eventually, they took these guarantees to heart and found themselves more productive and more capable of relying on the platform and its tools. Matt continues: “The introspection tools the Erlang VM provides is the best in class. We can look at any VM process in the cluster and see its message queue. We can use the remote shell to connect to any node and debug a live system. All of this has helped us countless times.”&lt;/p&gt;

&lt;p&gt;Running at Discord’s scale adds its own dimension to mastering the language, as they need to familiarize with the abstractions for providing concurrency, distribution, and fault-tolerance. Nowadays, frameworks such as Nerves and Phoenix handle these concerns for developers, but the underlying building blocks are always available for engineers assembling their own stack, such as the Discord team.&lt;/p&gt;

&lt;p&gt;In the end, Jake summarized how crucial Elixir and the Erlang VM have been at Discord and how it affected him personally: “What we do in Discord would not be possible without Elixir. It wouldn’t be possible in Node or Python. We would not be able to build this with five engineers if it was a C++ codebase. Learning Elixir fundamentally changed the way I think and reason about software. It gave me new insights and new ways of tackling problems.”&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.11 released</title>
  <link href="http://elixir-lang.org/blog/2020/10/06/elixir-v1-11-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-10-06T00:00:00+00:00</updated>
  <id>/blog/2020/10/06/elixir-v1-11-0-released</id>
  <content type="html">&lt;p&gt;Over the last releases, the Elixir team has been focusing on the compiler, both in terms of catching more mistakes at compilation time and making it faster. Elixir v1.11 has made excellent progress on both fronts. This release also includes many other goodies, such as tighter Erlang integration, support for more guard expressions, built-in datetime formatting, and other calendar enhancements.&lt;/p&gt;

&lt;p&gt;During this period, we have also started &lt;a href=&quot;/cases.html&quot;&gt;publishing a series of production cases&lt;/a&gt; on our website, featuring Elixir’s usage at &lt;a href=&quot;/blog/2020/08/20/embedded-elixir-at-farmbot/&quot;&gt;Farmbot&lt;/a&gt; and &lt;a href=&quot;/blog/2020/09/24/paas-with-elixir-at-Heroku/&quot;&gt;Heroku&lt;/a&gt;, with many more cases coming soon.&lt;/p&gt;

&lt;p&gt;For now, let’s focus on what’s new in Elixir v1.11.&lt;/p&gt;

&lt;h2 id=&quot;tighter-erlang-integration&quot;&gt;Tighter Erlang integration&lt;/h2&gt;

&lt;p&gt;On the footsteps of v1.10, we have further integrated with Erlang’s new logger by adding four new log levels: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notice&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;critical&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alert&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;emergency&lt;/code&gt;, matching all log levels found in the Syslog standard. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logger&lt;/code&gt; module now supports structured logging by passing maps and keyword lists to its various functions. It is also possible to specify the log level per module, via the &lt;a href=&quot;https://hexdocs.pm/logger/Logger.html#put_module_level/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logger.put_module_level/2&lt;/code&gt;&lt;/a&gt; function. Log levels per application will be added in future releases.&lt;/p&gt;

&lt;p&gt;IEx also has been improved to show the documentation for Erlang modules directly from your Elixir terminal. For example, here is a clip of me accessing the documentation for &lt;a href=&quot;erlang.org/doc/man/gen_server.html&quot;&gt;Erlang’s gen_server module&lt;/a&gt;:&lt;/p&gt;

&lt;script id=&quot;asciicast-1Kqwwkn0wMl0feePvWQwHe85G&quot; src=&quot;https://asciinema.org/a/1Kqwwkn0wMl0feePvWQwHe85G.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/iAOk0yaZtQDsuJqn2sXa1FRQW&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;This works with Erlang/OTP 23+ and requires Erlang modules to have been compiled with documentation chunks. A huge thank you to the Erlang/OTP team and the Documentation Working Group of the &lt;a href=&quot;https://erlef.org/&quot;&gt;Erlang Ecosystem Foundation&lt;/a&gt; for making this possible.&lt;/p&gt;

&lt;h2 id=&quot;compiler-checks-application-boundaries&quot;&gt;Compiler checks: application boundaries&lt;/h2&gt;

&lt;p&gt;Elixir v1.11 builds on top of the recently added compilation tracers to track application boundaries. From this release, Elixir will warn if you invoke a function from an existing module but this module does not belong to any of your listed dependencies.&lt;/p&gt;

&lt;p&gt;These two conditions may seem contradictory. After all, if a module is available, it must have come from a dependency. This is not true in two scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Modules from Elixir and Erlang/OTP are always available - even if their applications are not listed as a dependency&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In an umbrella project, because all child applications are compiled within the same VM, you may have a module from a sibling project available, even if you don’t depend on said sibling&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This new compiler check makes sure that all modules that you invoke are listed as part of your dependencies, emitting a warning like below otherwise:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:ssl.connect/2 defined in application :ssl is used by the current
application but the current application does not directly depend
on :ssl. To fix this, you must do one of:

  1. If :ssl is part of Erlang/Elixir, you must include it under
     :extra_applications inside &quot;def application&quot; in your mix.exs

  2. If :ssl is a dependency, make sure it is listed under &quot;def deps&quot;
     in your mix.exs

  3. In case you don't want to add a requirement to :ssl, you may
     optionally skip this warning by adding [xref: [exclude: :ssl]
     to your &quot;def project&quot; in mix.exs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This comes with extra benefits in umbrella projects, as it requires applications to depend on the siblings they depend on, which will fail if there are any cyclic dependencies.&lt;/p&gt;

&lt;h2 id=&quot;compiler-checks-data-constructors&quot;&gt;Compiler checks: data constructors&lt;/h2&gt;

&lt;p&gt;In Elixir v1.11, the compiler also tracks structs and maps fields across a function body. For example, imagine you wanted to write this code:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drive?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If there is either a typo on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:age&lt;/code&gt; field or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:age&lt;/code&gt; field was not yet defined, the compiler will fail accordingly. However, if you wrote this code:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drive?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The compiler would not catch the missing field and an error would only be raised at runtime. With v1.11, Elixir will track the usage of all maps and struct fields within the same function, emitting warnings for cases like above:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;warning: undefined field `age` in expression:

    # example.exs:7
    user.age

expected one of the following fields: name, address

where &quot;user&quot; was given the type %User{} in:

    # example.exs:7
    %User{} = user

Conflict found at
  example.exs:7: Check.drive?/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The compiler also checks binary constructors. Consider you have to send a string over the wire with length-based encoding, where the string is prefixed by its length, up to 4MBs. Your initial attempt may be this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, the code above has a bug. Each segment given between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; must be an integer, unless specified otherwise. With Elixir v1.11, the compiler will let you know so:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;warning: incompatible types:

    binary() !~ integer()

in expression:

    &amp;lt;&amp;lt;byte_size(string)::integer()-size(32), string&amp;gt;&amp;gt;

where &quot;string&quot; was given the type integer() in:

    # foo.exs:4
    &amp;lt;&amp;lt;byte_size(string)::integer()-size(32), string&amp;gt;&amp;gt;

where &quot;string&quot; was given the type binary() in:

    # foo.exs:3
    is_binary(string)

HINT: all expressions given to binaries are assumed to be of type integer()
unless said otherwise. For example, &amp;lt;&amp;lt;expr&amp;gt;&amp;gt; assumes &quot;expr&quot; is an integer.
Pass a modifier, such as &amp;lt;&amp;lt;expr::float&amp;gt;&amp;gt; or &amp;lt;&amp;lt;expr::binary&amp;gt;&amp;gt;, to change the
default behaviour.

Conflict found at
  foo.exs:4: Check.run_length/1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which can be fixed by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::binary&lt;/code&gt; to the second component:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While some of those warnings could be automatically fixed by the compiler, future versions will also perform those checks across functions and potentially across modules, where automatic fixes wouldn’t be desired (nor possible).&lt;/p&gt;

&lt;h2 id=&quot;compilation-time-improvements&quot;&gt;Compilation time improvements&lt;/h2&gt;

&lt;p&gt;Elixir v1.11 features many improvements to how the compiler tracks file dependencies, such that touching one file causes less files to be recompiled. In previous versions, Elixir tracked three types of dependencies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;compile time dependencies - if A depends on B at compile time, such as by using a macro, whenever B changes, A is recompiled&lt;/li&gt;
  &lt;li&gt;struct dependencies - if A depends on B’s struct, whenever B’s struct definition changed, A is recompiled&lt;/li&gt;
  &lt;li&gt;runtime dependencies - if A depends on B at runtime, A is never recompiled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, because dependencies are transitive, if A depends on B at compile time and B depends on C at runtime, A would depend on C at compile time. Therefore, it is very important to reduce the amount of compile time dependencies.&lt;/p&gt;

&lt;p&gt;Elixir v1.11 replaces “struct dependencies” by “exports dependencies”. In other words, if A depends on B, whenever B public’s interface changes, A is recompiled. B’s public interface is made by its struct definition and all of its public functions and macros.&lt;/p&gt;

&lt;p&gt;This change allows us to mark &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;s and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt;s as “exports dependencies” instead of “compile time” dependencies. This simplifies the dependency graph considerably. For example, &lt;a href=&quot;https://github.com/hexpm/hexpm&quot;&gt;in the Hex.pm project&lt;/a&gt;, changing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.ex&lt;/code&gt; file in Elixir v1.10 would emit this:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch lib/hexpm/accounts/user.ex &amp;amp;&amp;amp; mix compile
Compiling 90 files (.ex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Elixir v1.11, we now get:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch lib/hexpm/accounts/user.ex &amp;amp;&amp;amp; mix compile
Compiling 16 files (.ex)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make things even better, Elixir v1.11 also introduces a more granular tracking for umbrella projects (and path dependencies in general). In previous versions, a module from a sibling application would always be treated as a compile time dependency. This often meant that changing an application would cause many modules in sibling applications to recompile. Elixir v1.11 will tag modules from dependencies as exports whenever possible, yielding dramatic improvements in those cases.&lt;/p&gt;

&lt;p&gt;To round up the list of compiler enhancements, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--profile=time&lt;/code&gt; option added in Elixir v1.10 now also includes the time to compile each individual file. For example, in the Plug project, one can now get:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[profile] lib/plug/conn.ex compiled in 935ms
[profile] lib/plug/ssl.ex compiled in 147ms (plus 744ms waiting)
[profile] lib/plug/static.ex compiled in 238ms (plus 654ms waiting)
[profile] lib/plug/csrf_protection.ex compiled in 237ms (plus 790ms waiting)
[profile] lib/plug/debugger.ex compiled in 719ms (plus 947ms waiting)
[profile] Finished compilation cycle of 60 modules in 1802ms
[profile] Finished group pass check of 60 modules in 75ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While implementing those features, we have also made the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--long-compilation-threshold&lt;/code&gt; flag more precise. In previous versions, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--long-compilation-threshold&lt;/code&gt; would consider both the time a file spent to compile and the time spent waiting on other files. In Elixir v1.11, it considers only the compilation time. This means less false positives and you can now effectively get all files that take longer than 2s to compile, in execution time, by passing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--long-compilation-threshold 2&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configruntimeexs-and-mix-appconfig&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix app.config&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Elixir v1.9 introduced a new configuration file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/releases.exs&lt;/code&gt;. However, this new configuration file was executed only during releases. For those not familiar with releases, a release is a self-contained artifact with the Erlang VM, Elixir and your application, ready to run in production.&lt;/p&gt;

&lt;p&gt;This new configuration file was considered a very useful addition to releases. Therefore, we are also introducing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt;, which is executed after the code compilation on all environments (dev, test, and prod) - for both Mix and releases. Our goal is to provide a better runtime configuration experience to developers, in contrast to our current configuration system which has been mostly compile-time centric.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt; works the same as any other configuration file in Elixir. However, given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt; is meant to run in production systems, where our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix&lt;/code&gt; build tool is not available, developers must not use &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.env()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#target/0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.target()&lt;/code&gt;&lt;/a&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt;. Instead, they must use the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_env()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config_target()&lt;/code&gt;, which have been added to the &lt;a href=&quot;https://hexdocs.pm/elixir/Config.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;While &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/releases.exs&lt;/code&gt; will continue to be supported, developers can migrate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt; without loss of functionality. For example, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/releases.exs&lt;/code&gt; file such as this one&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/releases.exs&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;could run as is as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt;. However, given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt; runs in all environments, you may want to restrict part of your configuration to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:prod&lt;/code&gt; environment:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/runtime.exs&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:prod&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If both files are available, releases will pick the now preferred &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/releases.exs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To wrap it all up, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix&lt;/code&gt; also includes a new task called &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.App.Config.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix app.config&lt;/code&gt;&lt;/a&gt;. This task loads all applications and configures them, without starting them. Whenever you write your own Mix tasks, you will typically want to invoke either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix app.start&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix app.config&lt;/code&gt; before running your own code. Which one is better depends if you want your applications running or only configured.&lt;/p&gt;

&lt;h2 id=&quot;other-improvements&quot;&gt;Other improvements&lt;/h2&gt;

&lt;p&gt;Elixir v1.11 adds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_struct/2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_exception/1&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_exception/2&lt;/code&gt; guards. It also adds support for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map.field&lt;/code&gt; syntax in guards.&lt;/p&gt;

&lt;p&gt;The Calendar module ships with a new &lt;a href=&quot;https://hexdocs.pm/elixir/Calendar.html#strftime/3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calendar.strftime/3&lt;/code&gt;&lt;/a&gt; function, which provides datetime formatting based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strftime&lt;/code&gt; format. The &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;&lt;/a&gt; module got new functions for working with weeks and months, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.beginning_of_month/1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.end_of_week/2&lt;/code&gt;. Finally, all calendar types got conversion functions from and to gregorian timestamps, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.from_gregorian_days/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaiveDateTime.to_gregorian_seconds/1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, to bring visibility to the compiler tracking improvements described in previous sections, we have also added new features to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Xref.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt;&lt;/a&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; is a task that describes cross-references between files in your projects and can be helpful to diagnose large compilation cycles in projects.&lt;/p&gt;

&lt;p&gt;For a complete list of all changes, see the &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.11.0&quot;&gt;full release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>PaaS with Elixir at Heroku</title>
  <link href="http://elixir-lang.org/blog/2020/09/24/paas-with-elixir-at-Heroku/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-09-24T00:00:00+00:00</updated>
  <id>/blog/2020/09/24/paas-with-elixir-at-Heroku</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.heroku.com&quot;&gt;Heroku&lt;/a&gt; provides services and tools to build, run, and scale web applications. They enable developers and teams to focus on the design and craft of their apps. Heroku started development back in 2007, focused on the Ruby programming language, and since then, they have expanded to support multiple runtimes, either officially or via buildpacks.&lt;/p&gt;

&lt;p&gt;As the platform grew, their engineering teams also adopted different languages, one of them being Elixir. In this article, we will talk about how two distinct engineering teams at Heroku, the Front-end team and the Vault team, have adopted Elixir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/heroku.png&quot; alt=&quot;Heroku&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;first-steps-with-elixir&quot;&gt;First steps with Elixir&lt;/h2&gt;

&lt;p&gt;The Vault team was first to use Elixir inside Heroku. Their team is responsible for licensing and financial services, such as invoicing, credit card payments, etc. Most of their services are used internally at Heroku.&lt;/p&gt;

&lt;p&gt;They had to rewrite one of their existing services and that was the perfect occasion to give Elixir a try, since the difficulties and risks with the service were mostly known. The experiment was a success: they deployed and ran their first Elixir application in production. This paved the way to use Elixir more and more.&lt;/p&gt;

&lt;p&gt;Later on, they had a new challenge: they had to audit a large amount of data, and they knew from experience that the Ruby implementation would take too long to finish. Given they were already ramping up their familiarity with Elixir, they chose to apply &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;Elixir’s GenStage&lt;/a&gt; to the problem, which is a low-level library for data processing, and that took only a couple hours. From this moment on, they were sold on the language and the platform.&lt;/p&gt;

&lt;h2 id=&quot;tackling-operational-complexity-with-elixir&quot;&gt;Tackling operational complexity with Elixir&lt;/h2&gt;

&lt;p&gt;The Front-end team shares a similar story: they first used Elixir to solve a well-understood problem and took it forward from there.&lt;/p&gt;

&lt;p&gt;The Front-end engineers are responsible for maintaining all user interfaces: the CLI, the dashboard, and a bunch of backend services that work with data. One of the features they provide to Heroku customers is analytics.&lt;/p&gt;

&lt;p&gt;At first, they were sending their analytics to Mixpanel. However, they had some issues fetching the data, due to cross-domain concerns, and they decided to replace Mixpanel by an in-house Elixir service. The service used &lt;a href=&quot;https://github.com/elixir-plug/plug&quot;&gt;Plug&lt;/a&gt;, a library for building web applications, and had a single endpoint.&lt;/p&gt;

&lt;blockquote style=&quot;font-size: 24px; color: #444&quot;&gt;
&lt;p&gt;We were having a lot of fun and a lot of luck with it, so we kept doing it.&lt;/p&gt;
&lt;p style=&quot;font-size: 20px&quot;&gt;— Micah Woods, Lead Engineer, on migrating to Elixir.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They later spent most of a year focused on operational stability, and during this period, they started rewriting part of their Node.js microservices into Elixir. Today they have migrated their numerous Node.js microservices into one main Elixir application with one auxiliary service for authentication. The fact that Elixir was capable of handling everything they threw at it alongside their experience with Erlang’s stability - &lt;a href=&quot;https://blog.heroku.com/erlang-in-anger&quot;&gt;Heroku’s router uses Erlang&lt;/a&gt; - allowed them to simplify their operations considerably.&lt;/p&gt;

&lt;h2 id=&quot;productivity-and-scalability&quot;&gt;Productivity and scalability&lt;/h2&gt;

&lt;p&gt;The Front-end team has been using Elixir for two years. The team has 21 engineers: about 4 of them doing Elixir full-time, and 8 engineers altogether doing Elixir here and there.&lt;/p&gt;

&lt;p&gt;The first service that they built with Elixir, the analytics services, receives requests and puts them into an in-memory queue to be processed within the same VM. It handles about 3k to 4k requests per second. 99% of the response times stay within 0-1ms, occasionally 4ms. They use 3 Heroku dynos for fault-tolerance - of course, Heroku uses Heroku for their own infrastructure.&lt;/p&gt;

&lt;p&gt;The main Elixir application uses &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;the Phoenix web framework&lt;/a&gt; to power the Heroku Dashboard, provide real-time functionality via WebSockets, and support other services. This application runs on 5 Heroku dynos - although their engineering team believes they could probably do with less. Memory consumption is also on the lower side: their biggest dyno uses 256MB.&lt;/p&gt;

&lt;p&gt;The Vault team doing Elixir is only three engineers. Most of their apps are used internally, so they are generally not worried about performance. They continue using Elixir because &lt;strong&gt;they feel productive and happy with it&lt;/strong&gt;. They have also found it is an easier language to maintain compared to their previous experiences.&lt;/p&gt;

&lt;h2 id=&quot;on-phoenix&quot;&gt;On Phoenix&lt;/h2&gt;

&lt;p&gt;Both teams generally use Phoenix for web applications, unless they have a reason not to, which is rare. They acknowledge there is not a performance penalty for using Phoenix and you get a lot out of the box. Phoenix makes it easy to opt-in on the pieces that they need and remove the parts that they don’t want.&lt;/p&gt;

&lt;p&gt;They have also found it easier to understand how Phoenix itself works under the hood, especially compared to their previous experiences with other frameworks, such as Ruby on Rails. This knowledge is consistently helping them maintain and update their applications as time passes.&lt;/p&gt;

&lt;h2 id=&quot;learning-elixir-and-growing-the-team&quot;&gt;Learning Elixir and growing the team&lt;/h2&gt;

&lt;p&gt;The growth of both Elixir teams has been mostly organic. Given there are multiple languages in their stack, they often hire for one or another language in particular, and not specifically for Elixir. If the new team members gravitate towards Elixir, they are further encouraged to explore and learn the language. They are also active practitioners of pair programming, so there are many opportunities in their team to learn from each other, rotate pairs, swap projects, and so on.&lt;/p&gt;

&lt;p&gt;According to Matthew Peck, “the paradigm shift from Object-Oriented languages to Functional Programming was our biggest challenge when first learning Elixir”. However, the team agrees the investment was worth it: “Learning Elixir has made us better programmers. We have found that immutability made our code more readable, easier to test, and simpler to make concurrent. Now when we go back to an Object-Oriented language, we are thinking about how we can apply the same concepts there” - said Mike Hagerdon.&lt;/p&gt;

&lt;p&gt;Amanda Dolan added some remarks on Elixir’s capabilities for writing concurrent and fault-tolerant applications: “One other challenge when learning Elixir is fully grasping concurrency and the Erlang/OTP patterns”. Some of them felt it took longer to master those concepts than they first expected.&lt;/p&gt;

&lt;p&gt;Taylor Mock has his take on the challenges teams may face when adopting Elixir: “Another difference between Elixir and our previous stacks, Ruby and Node.js, is in the ecosystems”. They were initially concerned that the Elixir ecosystem would lack when it comes to third-party tools, but that was not what they saw. Taylor continues: “We found out that we can get really far with the concepts and mechanisms that the language itself provides. This shift can be scary, but we are now past it, and we find ourselves with leaner applications and fewer dependencies”.&lt;/p&gt;

&lt;p&gt;Overall, both teams found the language itself quite approachable. Given they started with a small proof of concept, they were able to tackle their concerns in regards to adoption, development, and deployment as they moved forward. Historically Heroku also has had much success with Erlang, and that has contributed to the success adopting Elixir has seen inside Heroku.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Embedded Elixir at Farmbot</title>
  <link href="http://elixir-lang.org/blog/2020/08/20/embedded-elixir-at-farmbot/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-08-20T00:00:00+00:00</updated>
  <id>/blog/2020/08/20/embedded-elixir-at-farmbot</id>
  <content type="html">&lt;p&gt;&lt;em&gt;Welcome to our series of case studies about companies using Elixir in production. &lt;a href=&quot;/cases.html&quot;&gt;See all cases&lt;/a&gt; we have published so far.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://farm.bot/&quot;&gt;FarmBot&lt;/a&gt; is an open-source precision agriculture CNC farming project that includes a robot farming machine, software, and documentation including a farming data repository. FarmBot’s machines use IoT technology to make it easy for farmers to remotely manage their gardens.&lt;/p&gt;

&lt;p&gt;Farmbot is built with &lt;a href=&quot;https://www.nerves-project.org/&quot;&gt;Nerves&lt;/a&gt;, an open-source platform and infrastructure to build, deploy, and securely manage your fleet of IoT devices at speed and scale.&lt;/p&gt;

&lt;p&gt;When Connor Rigby, former embedded systems engineer at Farmbot, initially joined the company, his first project was to build a Farmbot application using Ruby. After completing the proof-of-concept, he knew that he needed a way to make the embedded development process more efficient, reliable, and secure. Connor had used Nerves before at a previous company and was a regular open-source contributor to Nerves, so he knew the platform would help him accomplish these goals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/cases/bg/farmbot.jpg&quot; alt=&quot;Farmbot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-nerves-helped&quot;&gt;How Nerves helped&lt;/h2&gt;

&lt;p&gt;Connor brought Nerves to Farmbot by porting the entire proof-of-concept Ruby application he’d created over to Nerves, which he did in his free time over the course of a month, taking him about 20 hours total. He also continued to make open-source contributions to Nerves, helping to structure the networking functionality that is now part of &lt;a href=&quot;https://www.nerves-hub.org/&quot;&gt;NervesHub&lt;/a&gt;, the extensible web service that enables over-the-air firmware update management.&lt;/p&gt;

&lt;blockquote style=&quot;font-size: 24px; color: #444&quot;&gt;
&lt;p&gt;The biggest benefit of using Nerves is definitely how fast you can get up and running.&lt;/p&gt;
&lt;p style=&quot;font-size: 20px&quot;&gt;— Connor Rigby, Embedded Systems Engineer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Connor says that the Nerves Platform and what eventually became NervesHub was a great choice for Farmbot because:&lt;/p&gt;

&lt;h3 id=&quot;1-nerves-supports-lean-systems-and-operates-well-in-low-bandwidth-areas&quot;&gt;1. Nerves supports lean systems and operates well in low-bandwidth areas&lt;/h3&gt;

&lt;p&gt;Because Nerves bundles entire applications into relatively small archives in terms of firmware images for full Linux systems, Farmbot can use NervesHub to send over-the-air updates more quickly and users can download them faster. For comparison, an Android update generally clocks in at around 4 GB, but a Nerves update can be packed into as little as 12 MB.&lt;/p&gt;

&lt;p&gt;This is especially helpful for Farmbot users who operate in more remote locations with lower bandwidth and less reliable access to Wi-Fi. When an internet connection is available, NervesHub will connect and check if there’s an update, and then prompt the user to install the update.&lt;/p&gt;

&lt;h3 id=&quot;2-nerves-adds-convenience-with-low-overhead&quot;&gt;2. Nerves adds convenience with low overhead&lt;/h3&gt;

&lt;p&gt;For devices that are already connected to the internet, connecting to Nerves requires no additional configuration because NervesHub is compatible with the current public key infrastructure for device-to-cloud communication. Since Farmbot already had internet-connected devices when they brought Nerves onboard, they were able to use the same “key” to sign in to NervesHub that they use for their cloud service.&lt;/p&gt;

&lt;h3 id=&quot;3-nerves-has-all-the-benefits-of-elixir-and-erlang&quot;&gt;3. Nerves has all the benefits of Elixir and Erlang&lt;/h3&gt;

&lt;p&gt;Because it’s written in Elixir and built within the Erlang runtime system, Nerves retains the qualities of that language and framework — notably that they are distributed, fault-tolerant, soft real-time, and highly available. Connor also says that with Nerves, it’s easy to reason about the things you build with Nerves because you only input what you need into a Nerves application, helping you to avoid unnecessary complexities or unforeseen security vulnerabilities. You can check up on devices as they’re running and debug them without disruption to the user experience.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;FarmBot now has around 300 devices live in NervesHub, with a different deployment for each of their device models. Nerves is built to scale, so as Farmbot continues to grow its user base and expand their product capabilities, they’ll be able to continue developing and releasing reliable firmware updates using Nerves.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This case study has first been published on &lt;a href=&quot;https://www.nerves-project.org/customer-farmbot&quot;&gt;Nerves’ website&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.10 released</title>
  <link href="http://elixir-lang.org/blog/2020/01/27/elixir-v1-10-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2020-01-27T00:00:00+00:00</updated>
  <id>/blog/2020/01/27/elixir-v1-10-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.10 comes with improvements to the standard library, the compiler, as well as several additions to the &lt;a href=&quot;/blog/2019/06/24/elixir-v1-9-0-released/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix release&lt;/code&gt; feature added in v1.9&lt;/a&gt;. In particular, this version adds a lot of polish to existing features, such as our configuration system and our sorting APIs.&lt;/p&gt;

&lt;p&gt;Also note Elixir v1.10 requires Erlang/OTP 21+. This allows us to provide tighter integration with Erlang/OTP’s new logger. This means that the logger level, logger metadata, as well as all log messages are now shared between Erlang and Elixir APIs.&lt;/p&gt;

&lt;p&gt;Let’s take a look at what else is new.&lt;/p&gt;

&lt;h2 id=&quot;releases-improvements&quot;&gt;Releases improvements&lt;/h2&gt;

&lt;p&gt;Elixir v1.9 introduced releases as a mechanism to package self-contained applications. Elixir v1.10 further improves releases with bug fixes and new enhancements based on feedback we got from the community. The highlights are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Allow the dual boot system of releases to be disabled on environments that are boot-time sensitive, such as embedded devices&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Track and raise if compile-time configuration is set or changes at runtime (more in the next section)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support overlays to easily add extra files to a packaged releases&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RELEASE_DISTRIBUTION&lt;/code&gt; to be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt; in order to fully disable distribution&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:tar&lt;/code&gt; step that automatically packages releases&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.10.0&quot;&gt;full release notes for more improvements&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements-to-sort-based-apis-in-enum&quot;&gt;Improvements to sort-based APIs in Enum&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#sort/1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.sort/1&lt;/code&gt;&lt;/a&gt; in Elixir by default sorts from lowest to highest:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to sort from highest to lowest, you need to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.sort/2&lt;/code&gt; with a custom sorting function, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.sort(collection, &amp;amp;&amp;gt;=/2)&lt;/code&gt;, which is not immediately obvious to someone reading the code:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;gt;=/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Furthermore, comparison operators, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;, perform structural sorting, instead of a semantic one. For example, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt; to sort dates descendingly won’t yield the correct result:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To perform proper semantic comparison for dates, one would also need to pass a custom sorting function:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Elixir v1.10 streamlines the sorting functions by introducing both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:asc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:desc&lt;/code&gt; shortcuts:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:asc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As well as adding the possibility to pass a module to perform semantic comparisons. For example, to sort dates, one now only needs to pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; module or even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{:desc, Date}&lt;/code&gt; for descending semantical sort:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;~D[2020-01-01]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~D[2019-12-31]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These API improvements make the code more concise and readable and they have also been added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.sort_by&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.min_by&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.max_by&lt;/code&gt;, and friends.&lt;/p&gt;

&lt;h3 id=&quot;tracking-of-compile-time-configuration&quot;&gt;Tracking of compile-time configuration&lt;/h3&gt;

&lt;p&gt;In Elixir, we organize our code in applications. Libraries, your dependencies, and your own project are all separate applications. All applications in Elixir also come with an application environment.&lt;/p&gt;

&lt;p&gt;The application environment is a key-value store that allows us to configure said application. While reading the application environment at runtime is the preferred approach, in some rare occasions you may want to use the application environment to configure the compilation of a certain project. This is often done by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application.get_env/3&lt;/code&gt; outside of a function:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DBClient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@db_host&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db.local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SomeLib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DBClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach has one big limitation: if you change the value of the application environment after the code is compiled, the value used at runtime is not going to change! For example, if you are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix release&lt;/code&gt; and your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/releases.exs&lt;/code&gt; has:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config :my_app, :db_host, &quot;db.production&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/releases.exs&lt;/code&gt; is read after the code is compiled, the new value will have no effect as the code was compiled to connect to “db.local”.&lt;/p&gt;

&lt;p&gt;Of course, the obvious solution to this mismatch is to not read the application environment at compilation time in the first place, and instead move the code to inside a function:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DBClient&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;SomeLib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DBClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db.local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this is the preferred approach, there are still two scenarios we need to address:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Not everyone may be aware of this pitfall, so they will mistakenly read the application environment at compile-time, until they are bitten by this behaviour&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In rare occasions, you truly need to read the application environment at compile-time, and you want to be warned when you try to configure at runtime something that is valid only at compilation time&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Elixir v1.10 aims to solve these two scenarios by introducing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application.compile_env/3&lt;/code&gt; function. For example, to read the value at compile time, you can now do:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;@db_host&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db_host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;db.local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compile_env/3&lt;/code&gt;, Elixir will store the values used during compilation and compare them with the runtime values whenever your system starts, raising an error in case they differ. This helps developers ensure they are running their production systems with the configuration they intend to.&lt;/p&gt;

&lt;p&gt;In future versions, we will deprecate the use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application.get_env/3&lt;/code&gt; at compile-time with a clear message pointing users to configuration best practices, effectively addressing the scenario where users read from the application environment at compile time unaware of its pitfalls.&lt;/p&gt;

&lt;h3 id=&quot;compiler-tracing&quot;&gt;Compiler tracing&lt;/h3&gt;

&lt;p&gt;This release brings enhancements to the Elixir compiler and adds new capabilities for developers to listen to compilation events.&lt;/p&gt;

&lt;p&gt;In previous Elixir versions, Elixir would compile a database of cross references between modules (such as function calls, references, structs, etc) for each project in order to perform all kinds of checks, such as deprecations and undefined functions.&lt;/p&gt;

&lt;p&gt;Although this database was not public, developers would still use it to run their own checks against their projects. With time, developers would request more data to be included in the database, which was problematic as Elixir itself did not have a use for the additional data, and the database was not meant to be used externally in the first place.&lt;/p&gt;

&lt;p&gt;In Elixir v1.10, we have addressed these problems by &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#module-compilation-tracers&quot;&gt;introducing compiler tracing&lt;/a&gt;. The compiler tracing allows developers to listen to events as they are emitted by the compiler, so they can store all of the information they need - and only the information they need.&lt;/p&gt;

&lt;p&gt;Elixir itself is using the new compiler tracing to provide new functionality. One advantage of this approach is that developers can now disable undefined function warnings directly on the callsite. For example, imagine you have an optional dependency which may not be available in some cases. You can tell the compiler to skip warning on calls to optional modules with:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@compile {:no_warn_undefined, OptionalDependency}
defdelegate my_function_call(arg), to: OptionalDependency
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Previously, this information had to be added to the overall project configuration, which was far away from where the optional call effectively happened.&lt;/p&gt;

&lt;h3 id=&quot;other-enhancements&quot;&gt;Other enhancements&lt;/h3&gt;

&lt;p&gt;Elixir’s calendar data types got many improvements, such as sigil support for third-party calendars, as well as the additions of &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#now!/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.now!/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#shift_zone!/3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.shift_zone!/3&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html#local_now/0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaiveDateTime.local_now/0&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are many improvements related to Elixir’s AST in this release too. &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#string_to_quoted/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.string_to_quoted/2&lt;/code&gt;&lt;/a&gt; has two new options, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:token_metadata&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:literal_encoder&lt;/code&gt;, that give more control over Elixir’s parser. This information was already available to the Elixir code formatter and has now been made public. These changes alongside compiler tracing means tools like &lt;a href=&quot;https://github.com/rrrene/credo&quot;&gt;Credo&lt;/a&gt;, &lt;a href=&quot;https://github.com/sasa1977/boundary&quot;&gt;Boundary&lt;/a&gt;, and IDE integrations have an even better foundation to analyze the source code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/ex_unit&quot;&gt;ExUnit&lt;/a&gt;, our test framework, ships two small but important improvements: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExUnit.CaptureIO&lt;/code&gt; can now be used by tests that run concurrently and we have added “pattern-matching diffing”. To understand the last feature, take this code:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json_payload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now imagine that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json_payload&lt;/code&gt; is a large JSON blob and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;key&quot;&lt;/code&gt; inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;body&quot;&lt;/code&gt; did not have value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;foo&quot;&lt;/code&gt;. In previous Elixir versions, if the assertion failed, Elixir would print the right side and let you up to your own devices to figure out what went wrong. In Elixir v1.10, we diff the data structure against the pattern so you can see exactly which parts of the data matched the pattern and which ones did not. Note ExUnit already performed diffing when comparing data types, this new version adds diffing when matching data against a pattern.&lt;/p&gt;

&lt;p&gt;Finally, this release also adds two new guards, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_struct/1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_map_key/2&lt;/code&gt;, thanks to the strict requirement on Erlang/OTP 21+.&lt;/p&gt;

&lt;p&gt;To learn what else is new, you can read the &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.10.0&quot;&gt;full release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.9 released</title>
  <link href="http://elixir-lang.org/blog/2019/06/24/elixir-v1-9-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2019-06-24T00:00:00+00:00</updated>
  <id>/blog/2019/06/24/elixir-v1-9-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.9 is out with releases support, improved configuration, and more.&lt;/p&gt;

&lt;p&gt;We are also glad to announce &lt;a href=&quot;https://github.com/fertapric&quot;&gt;Fernando Tapia Rico&lt;/a&gt; has joined the Elixir Core Team. Fernando has been extremely helpful in keeping the issues tracker tidy, by fixing bugs and improving Elixir in many different areas, such as the code formatter, IEx, the compiler, and others.&lt;/p&gt;

&lt;p&gt;Now let’s take a look at what’s new in this new version.&lt;/p&gt;

&lt;h2 id=&quot;releases&quot;&gt;Releases&lt;/h2&gt;

&lt;p&gt;The main feature in Elixir v1.9 is the addition of releases. A release is a self-contained directory that consists of your application code, all of its dependencies, plus the whole Erlang Virtual Machine (VM) and runtime. Once a release is assembled, it can be packaged and deployed to a target as long as the target runs on the same operating system (OS) distribution and version as the machine running the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix release&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;Releases have always been part of the Elixir community thanks to Paul Schoenfelder’s work on &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt; (and EXRM before that). Distillery was announced in July 2016. Then in 2017, &lt;a href=&quot;https://dockyard.com/&quot;&gt;DockYard&lt;/a&gt; hired Paul to work on improving deployments, an effort that would lead to &lt;a href=&quot;https://dockyard.com/blog/2018/08/23/announcing-distillery-2-0&quot;&gt;Distillery 2.0&lt;/a&gt;. Distillery 2.0 provided important answers in areas where the community was struggling to establish conventions and best practices, such as configuration.&lt;/p&gt;

&lt;p&gt;At the beginning of this year, thanks to &lt;a href=&quot;http://plataformatec.com.br/&quot;&gt;Plataformatec&lt;/a&gt;, I was able to prioritize the work on bringing releases directly into Elixir. Paul was aware that we wanted to have releases in Elixir itself and during &lt;a href=&quot;https://elixirconf.com&quot;&gt;ElixirConf 2018&lt;/a&gt; I announced that releases was the last planned feature for Elixir.&lt;/p&gt;

&lt;p&gt;The goal of Elixir releases was to double down on the most important concepts provided by Distillery and provide extensions points for the other bits the community may find important. &lt;a href=&quot;http://github.com/bitwalker/&quot;&gt;Paul&lt;/a&gt; and &lt;a href=&quot;https://github.com/tsloughter&quot;&gt;Tristan&lt;/a&gt; (who maintains &lt;a href=&quot;https://github.com/erlware/relx&quot;&gt;Erlang’s relx&lt;/a&gt;) provided excellent feedback on Elixir’s implementation, which we are very thankful for. &lt;a href=&quot;https://dashbit.co/blog/updating-hex-pm-to-use-elixir-releases&quot;&gt;The Hex package manager is already using releases in production&lt;/a&gt; and we also got feedback from other companies doing the same.&lt;/p&gt;

&lt;p&gt;Enough background, let’s see why you would want to use releases and how to assemble one.&lt;/p&gt;

&lt;h3 id=&quot;why-releases&quot;&gt;Why releases?&lt;/h3&gt;

&lt;p&gt;Releases allow developers to precompile and package all of their code and the runtime into a single unit. The benefits of releases are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Code preloading. The VM has two mechanisms for loading code: interactive and embedded. By default, it runs in the interactive mode which dynamically loads modules when they are used for the first time. The first time your application calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.map/2&lt;/code&gt;, the VM will find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module and load it. There’s a downside. When you start a new server in production, it may need to load many other modules, causing the first requests to have an unusual spike in response time. Releases run in embedded mode, which loads all available modules upfront, guaranteeing your system is ready to handle requests after booting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Configuration and customization. Releases give developers fine grained control over system configuration and the VM flags used to start the system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Self-contained. A release does not require the source code to be included in your production artifacts. All of the code is precompiled and packaged. Releases do not even require Erlang or Elixir in your servers, as they include the Erlang VM and its runtime by default. Furthermore, both Erlang and Elixir standard libraries are stripped to bring only the parts you are actually using.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Multiple releases. You can assemble different releases with different configuration per application or even with different applications altogether.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Management scripts. Releases come with scripts to start, restart, connect to the running system remotely, execute RPC calls, run as daemon, run as a Windows service, and more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-2-3-released-assembled&quot;&gt;1, 2, 3: released assembled!&lt;/h3&gt;

&lt;p&gt;You can start a new project and assemble a release for it in three easy steps:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mix new my_app
$ cd my_app
$ MIX_ENV=prod mix release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A release will be assembled in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_build/prod/rel/my_app&lt;/code&gt;. Inside the release, there will be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app&lt;/code&gt; file which is the entry point to your system. It supports multiple commands, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app start&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app start_iex&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app restart&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app stop&lt;/code&gt; - for general management of the release&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app rpc COMMAND&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app remote&lt;/code&gt; - for running commands on the running system or to connect to the running system&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app eval COMMAND&lt;/code&gt; - to start a fresh system that runs a single command and then shuts down&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app daemon&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app daemon_iex&lt;/code&gt; - to start the system as a daemon on Unix-like systems&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/my_app install&lt;/code&gt; - to install the system as a service on Windows machines&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hooks-and-configuration&quot;&gt;Hooks and Configuration&lt;/h3&gt;

&lt;p&gt;Releases also provide built-in hooks for configuring almost every need of the production system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt; (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/prod.exs&lt;/code&gt;) - provides build-time application configuration, which is executed when the release is assembled&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/releases.exs&lt;/code&gt; - provides runtime application configuration. It is executed every time the release boots and is further extensible via config providers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel/vm.args.eex&lt;/code&gt; - a template file that is copied into every release and provides static configuration of the Erlang Virtual Machine and other runtime flags&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel/env.sh.eex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel/env.bat.eex&lt;/code&gt; - template files that are copied into every release and executed on every command to set up environment variables, including ones specific to the VM, and the general environment&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have written &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;extensive documentation on releases&lt;/a&gt;, so we recommend checking it out for more information.&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;We also use the work on releases to streamline Elixir’s configuration API. A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config&lt;/code&gt; module has been added to Elixir. The previous configuration API, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.Config&lt;/code&gt;, was part of the Mix build tool. However, since releases provide runtime configuration and Mix is not included in releases, we ported the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.Config&lt;/code&gt; API to Elixir. In other words, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use Mix.Config&lt;/code&gt; has been soft-deprecated in favor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import Config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another important change related to configuration is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix new&lt;/code&gt; will no longer generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt; file. &lt;a href=&quot;https://hexdocs.pm/elixir/library-guidelines.html#avoid-application-configuration&quot;&gt;Relying on configuration is undesired for most libraries&lt;/a&gt; and the generated config files pushed library authors in the wrong direction. Furthermore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix new --umbrella&lt;/code&gt; will no longer generate a configuration for each child app, instead all configuration should be declared in the umbrella root. That’s how it has always behaved, we are now making it explicit.&lt;/p&gt;

&lt;h2 id=&quot;other-improvements&quot;&gt;Other improvements&lt;/h2&gt;

&lt;p&gt;There are many other enhancements in Elixir v1.9. The Elixir CLI got a handful of new options in order to best support releases. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logger&lt;/code&gt; now computes its sync/async/discard thresholds in a decentralized fashion, reducing contention. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EEx&lt;/code&gt; (Embedded Elixir) templates support more complex expressions than before. Finally, there is a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~U&lt;/code&gt; sigil for working with UTC DateTimes as well as new functions in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System&lt;/code&gt; modules.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, releases was the last planned feature for Elixir. We don’t have any major user-facing feature in the works nor planned. I know for certain some will consider this fact the most excing part of this announcement!&lt;/p&gt;

&lt;p&gt;Of course, it does not mean that v1.9 is the last Elixir version. We will continue shipping new releases every 6 months with enhancements, bug fixes and improvements. You can see the &lt;a href=&quot;http://github.com/elixir-lang/elixir/issues&quot;&gt;Issues Tracker&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;We also are working on some structural changes. One of them is move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; pass straight into the compiler, which would allow us to emit undefined function and deprecation warnings in more places. We are also considering a move to &lt;a href=&quot;https://cirrus-ci.org/&quot;&gt;Cirrus-CI&lt;/a&gt;, so we can test Elixir on Windows, Unix, and FreeBSD through a single service.&lt;/p&gt;

&lt;p&gt;It is also important to highlight that there are two main reasons why we can afford to have an empty backlog.&lt;/p&gt;

&lt;p&gt;First of all, Elixir is built on top of Erlang/OTP and we simply leverage all of the work done by Ericsson and the OTP team on the runtime and Virtual Machine. The Elixir team has always aimed to contribute back as much as possible and those contributions have increased in the last years.&lt;/p&gt;

&lt;p&gt;Second, Elixir was designed to be an extensible language. The same tools and abstractions we used to create and enhance the language are also available to libraries and frameworks. This means the community can continue to improve the ecosystem without a need to change the language itself, which would effectively become a bottleneck for progress.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more. We have also updated our &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html&quot;&gt;advanced Mix &amp;amp; OTP&lt;/a&gt; to talk about releases. If you are looking for a more fast paced introduction to the language, see the &lt;a href=&quot;http://howistart.org/posts/elixir/1/index.html&quot;&gt;How I Start: Elixir&lt;/a&gt; tutorial, which has also been brought to the latest and greatest.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Mint, a new HTTP client for Elixir</title>
  <link href="http://elixir-lang.org/blog/2019/02/25/mint-a-new-http-library-for-elixir/"/>
  
  <author>
    <name>Eric Meadows-Jönsson</name>
  </author>
  
  <updated>2019-02-25T00:00:00+00:00</updated>
  <id>/blog/2019/02/25/mint-a-new-http-library-for-elixir</id>
  <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/ericmj/mint&quot;&gt;Mint&lt;/a&gt; is a new low-level HTTP client that aims to provide a small and functional core that others can build on top. Mint is connection based: each connection is a single struct with an associated socket belonging to the process that started the connection. Since no extra processes are started for the connection, you can choose the process architecture that better fits your application.&lt;/p&gt;

&lt;p&gt;To validate this we built out the library with a common API supporting both HTTP/1 and HTTP/2 with automatic version negotiation. In addition, Mint comes with a &lt;a href=&quot;https://github.com/ericmj/castore&quot;&gt;CA certificate store&lt;/a&gt; to do safe by default HTTPS connections.&lt;/p&gt;

&lt;h2 id=&quot;connections-without-processes&quot;&gt;Connections without processes&lt;/h2&gt;

&lt;p&gt;Mint HTTP connections are managed directly in the process that starts the connection, which means no connection pool is used nor new processes spawned when a connection is opened. This allows the user of the library to build their own process structure that fits their application.&lt;/p&gt;

&lt;p&gt;With Mint each connection has a single immutable data structure that the user needs to manage. Mint uses &lt;a href=&quot;http://www.erlang.org/doc/man/inet.html#setopts-2&quot;&gt;“active mode”&lt;/a&gt; sockets. This means data and events from the socket are sent as messages to the process that started the connection. The user passes the messages to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream/2&lt;/code&gt; function that returns the updated connection and a list of “responses”. Responses are streamed back which means you won’t receive a single full HTTP response back from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream/2&lt;/code&gt;, instead the response is returned in partial response chunks. A chunk can be the status line, HTTP headers, or part of the response body.&lt;/p&gt;

&lt;p&gt;Let’s look at an example of sending a request with Mint:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;httpbin.org&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request_ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;label:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;label:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;message:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tcp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Port&amp;lt;0.8&amp;gt;, &quot;HTTP/1.1 200 OK\r\n&quot; &amp;lt;&amp;gt; ...}&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;responses:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Reference&amp;lt;...&amp;gt;, 200},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Reference&amp;lt;...&amp;gt;, [{&quot;connection&quot;, &quot;keep-alive&quot;}, ...},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Reference&amp;lt;...&amp;gt;, &quot;&amp;lt;!DOCTYPE html&amp;gt;&quot; &amp;lt;&amp;gt; ...},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Reference&amp;lt;...&amp;gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see all calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mint.HTTP&lt;/code&gt; functions return an updated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conn&lt;/code&gt; which holds the state for the connection. It is important to carry on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conn&lt;/code&gt; to the next function call or the state will be corrupted.&lt;/p&gt;

&lt;p&gt;On line 2 we send a request to the server. A reference to the request is returned: this reference is useful when sending concurrent requests, either with HTTP/1 pipelining or with HTTP/2 multiplexed streams.&lt;/p&gt;

&lt;p&gt;Next we start a receive block waiting for a TCP active mode message and pass it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream/2&lt;/code&gt;. The message is parsed and the response to the request is returned. As you can see the response is split over multiple tuples: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:status&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:headers&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:data&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:done&lt;/code&gt;. This is because Mint was built from the ground with streaming in mind. The parts of the response will be returned continuously as TCP messages are passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream/2&lt;/code&gt; so that we don’t have to wait for the full response to complete before starting to process it.&lt;/p&gt;

&lt;p&gt;If the response body is larger than a single packet &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream/2&lt;/code&gt; may return multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:data&lt;/code&gt; tuples and if the response includes trailing headers multiple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:headers&lt;/code&gt; will be returned. When the response is complete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:done&lt;/code&gt; will be returned.&lt;/p&gt;

&lt;p&gt;Note that if you send concurrent requests on a HTTP/2 connection responses can be returned interleaved from the requests using HTTP/2’s stream multiplexing. Additionally, responses can be spread over multiple messages so we may need to continually receive messages and pass them to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See more examples on how to use Mint in the &lt;a href=&quot;https://hexdocs.pm/mint&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-process-less&quot;&gt;Why process-less?&lt;/h2&gt;

&lt;p&gt;Mint may seem more cumbersome to use than most other HTTP libraries you have used and that is true in many ways. But by providing a low-level API without a predetermined process architecture it gives more flexibility to the user of the library.&lt;/p&gt;

&lt;p&gt;Many times you do not need a general purpose connection pool and can avoid the additional complexity, single point of failure, and potential performance bottlenecks that it brings. For example, if you are building quick CLI scripts, you most likely don’t need a pool and performing a single one-off request with Mint is good enough.&lt;/p&gt;

&lt;p&gt;Another good use case for Mint is &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;GenStage&lt;/a&gt;. If you write GenStage pipelines, it is most likely that you have a pool of producers that fetch data from external sources via HTTP. If you are using a high-level HTTP library, that comes with its own pool, now you have two pools, one of GenStage producers and another from the HTTP library. With Mint, you can have each GenStage producer manage its own connection, reducing overhead and simplifying the code.&lt;/p&gt;

&lt;p&gt;Of course, none of this stops you from building a connection pool on top of Mint. The point is exactly that Mint won’t impose an architecture onto you. At the end of the day, we hope Mint will be a useful building block for more complex scenario and use cases.&lt;/p&gt;

&lt;h2 id=&quot;http1-and-http2&quot;&gt;HTTP/1 and HTTP/2&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mint.HTTP&lt;/code&gt; module has a single interface for both HTTP/1 and HTTP/2 connections and performs version negotiation on HTTPS connections, HTTP connections default to HTTP/1. You can specify which HTTP version you want to use or use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mint.HTTP1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mint.HTTP2&lt;/code&gt; modules directly if you want to use version-specific features.&lt;/p&gt;

&lt;h2 id=&quot;safe-by-default-https&quot;&gt;Safe-by-default HTTPS&lt;/h2&gt;

&lt;p&gt;When connecting over HTTPS, Mint will perform certificate verification by default. We believe it’s crucial that an HTTP library defaults to be secure out of the box.&lt;/p&gt;

&lt;p&gt;Mint uses an optional dependency on &lt;a href=&quot;https://github.com/ericmj/castore&quot;&gt;CAStore&lt;/a&gt; to provide certificates from &lt;a href=&quot;https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/&quot;&gt;Mozilla’s CA Certificate Store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can of course tweak specific SSL settings without re-building the safe defaults yourself.&lt;/p&gt;

&lt;h2 id=&quot;current-state-of-the-library&quot;&gt;Current state of the library&lt;/h2&gt;

&lt;p&gt;The first version of Mint has just been released. It is an experimental library trying a new approach to building HTTP libraries so don’t expect a fully stable API yet.&lt;/p&gt;

&lt;p&gt;Use Mint to explore new ideas for HTTP connection management and building higher level clients on top of Mint. In the future connection pooling and a higher level API may be added to supplement the current low level API, either directly to Mint or via different libraries.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Mint is being announced in the official Elixir blog because it was originally being considered for inclusion in Elixir itself. However, at some point the Elixir team decided it doesn’t make sense to include an HTTP client in Elixir itself, at least as long as Erlang/OTP ships with a client too. Mint is not maintained by the Elixir team, although it is maintained by Eric and Andrea, who are part of the team.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.8 released</title>
  <link href="http://elixir-lang.org/blog/2019/01/14/elixir-v1-8-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2019-01-14T00:00:00+00:00</updated>
  <id>/blog/2019/01/14/elixir-v1-8-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.8 comes with many improvements at the infrastructure level, improving compilation time, speeding up common patterns, and adding features around introspection of the system.&lt;/p&gt;

&lt;h2 id=&quot;custom-struct-inspections&quot;&gt;Custom struct inspections&lt;/h2&gt;

&lt;p&gt;Elixir now provides a derivable implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; protocol. In a nutshell, this means it is really easy to filter data from your data structures whenever they are inspected. For example, imagine you have a user struct with security and privacy sensitive information:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defstruct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, if you inspect a user via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inspect(user)&lt;/code&gt;, it will include all fields. This can cause fields such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:email&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:encrypted_password&lt;/code&gt; to appear in logs, error reports, etc. You could always define a custom implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; protocol for such cases but Elixir v1.8 makes it simpler by allowing you to derive the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; protocol:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@derive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defstruct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now all user structs will be printed with all remaining fields collapsed:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#User&amp;lt;id: 1, name: &quot;Jane&quot;, age: 33, ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@derive {Inspect, except: [...]}&lt;/code&gt; in case you want to keep all fields by default and exclude only some.&lt;/p&gt;

&lt;h2 id=&quot;time-zone-database-support&quot;&gt;Time zone database support&lt;/h2&gt;

&lt;p&gt;In Elixir v1.3, Elixir added four types, known as Calendar types, to work with dates and times: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; (without time zone), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; (with time zone). Over the last versions we have added many enhancements to the Calendar types but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; module always evolved at a slower pace since Elixir did not provide an API for time zone databases.&lt;/p&gt;

&lt;p&gt;Elixir v1.8 now defines a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calendar.TimeZoneDatabase&lt;/code&gt; behaviour, allowing developers to bring in their own time zone databases. By defining an explicit contract for time zone behaviours, Elixir can now extend the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; API, adding functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime.shift_zone/3&lt;/code&gt;. By default, Elixir ships with a time zone database called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt; that only handles UTC.&lt;/p&gt;

&lt;p&gt;Other Calendar related improvements include the addition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.day_of_year/1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.quarter_of_year/1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.year_of_era/1&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.day_of_era/1&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;faster-compilation-and-other-performance-improvements&quot;&gt;Faster compilation and other performance improvements&lt;/h2&gt;

&lt;p&gt;Due to improvements to the compiler made over the last year, Elixir v1.8 should compile code about 5% faster on average. This is yet another release where we have been able to reduce compilation times and provide a more joyful development experience to everyone.&lt;/p&gt;

&lt;p&gt;The compiler also emits more efficient code for range checks in guards (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x in y..z&lt;/code&gt;), for charlists with interpolation (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'foo #{bar} baz'&lt;/code&gt;), and when working with records via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Record&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;Finally, EEx templates got their own share of optimizations, emitting more compact code that runs faster.&lt;/p&gt;

&lt;h2 id=&quot;improved-instrumentation-and-ownership-with-callers&quot;&gt;Improved instrumentation and ownership with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$callers&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt; module is one of the most common ways to spawn light-weight processes to perform work concurrently. Whenever you spawn a new process, Elixir annotates the parent of that process through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; key. This information can be used by instrumentation tools to track the relationship between events occurring within multiple processes. However, many times, tracking only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; is not enough.&lt;/p&gt;

&lt;p&gt;For example, we recommend developers to always start tasks under a supervisor. This provides more visibility and allows us to control how those tasks are terminated when a node shuts down. In your code, this can be done by invoking something like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Supervisor.start_child(MySupervisor, task_specification)&lt;/code&gt;. This means that, although your code is the one who invokes the task, the actual parent of the task would be the supervisor, as the supervisor is the one spawning it. We would list the supervisor as one of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; for the task, but the relationship between your code and the task is lost.&lt;/p&gt;

&lt;p&gt;In Elixir v1.8, we now track the relationship between your code and the task via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$callers&lt;/code&gt; key in the process dictionary, which aligns well with the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; key. Therefore, assuming the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Supervisor&lt;/code&gt; call above, we have:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[your code] -- calls --&amp;gt; [supervisor] ---- spawns --&amp;gt; [task]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which means we store the following relationships:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[your code]              [supervisor] &amp;lt;-- ancestor -- [task]
     ^                                                  |
     |--------------------- caller ---------------------|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When a task is spawned directly from your code, without a supervisor, then the process running your code will be listed under both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$callers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This small feature is very powerful. It allows instrumentation and monitoring tools to better track and relate the events happening in your system. This feature can also be used by tools like the “Ecto Sandbox”. The “Ecto Sandbox” allows developers to run tests concurrently against the database, by using transactions and an ownership mechanism where each process explicitly gets a connection assigned to it. Without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$callers&lt;/code&gt;, every time you spawned a task that queries the database, the task would not know its caller, and therefore it would be unable to know which connection was assigned to it. This often meant features that rely on tasks could not be tested concurrently. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$callers&lt;/code&gt;, figuring out this relationship is trivial and you have more tests using the full power of your machine.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;We are really proud of this release (as usual!) which brings many improvements at the infrastructure level. Those improvements were designed with feedback from the community and from the many different companies using Elixir in production. The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.8.0&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is only one last major feature planned for upcoming Elixir versions, which is the addition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix release&lt;/code&gt; to Elixir itself, streamlining the experience provided by packages like &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;distillery&lt;/a&gt;. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix release&lt;/code&gt;, a developer can bundle the VM and all compiled code in a single directory, which can then be packaged and sent to production. We are glad to say the &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/8612&quot;&gt;work on this feature has already started&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During &lt;a href=&quot;https://www.youtube.com/watch?v=suOzNeMJXl0&quot;&gt;my keynote at ElixirConf 2018 US&lt;/a&gt;, I talked about the next five years for Elixir and much of the emphasis is put on the community. Elixir was designed to be an extensible language and therefore the work on the language itself is meant to reduce with time, which we have seen in the last two releases. We trust the community to continue building on this solid foundation, bringing new challenges to the ecosystem and taking the language to new domains.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Your turn. :)&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.7 released</title>
  <link href="http://elixir-lang.org/blog/2018/07/25/elixir-v1-7-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2018-07-25T00:00:00+00:00</updated>
  <id>/blog/2018/07/25/elixir-v1-7-0-released</id>
  <content type="html">&lt;p&gt;A new semester has started, which means it is time for a new Elixir release! This release brings quality of life improvements to the documentation, to error handling, to logger reporting, and to ExUnit, Elixir’s testing library.&lt;/p&gt;

&lt;p&gt;We are also glad to welcome Michał Muskała to the Elixir Core team. Prior to joining the team, he was &lt;a href=&quot;https://github.com/elixir-ecto/ecto&quot;&gt;a member of the Ecto team&lt;/a&gt;, he has made &lt;a href=&quot;https://github.com/elixir-lang/elixir/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Amichalmuskala&quot;&gt;plenty of contributions to Elixir&lt;/a&gt;, often to improve performance, and &lt;a href=&quot;https://github.com/erlang/otp/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Amichalmuskala&quot;&gt;is a frequent to contribute to Erlang/OTP too&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;documentation-metadata&quot;&gt;Documentation metadata&lt;/h2&gt;

&lt;p&gt;Elixir v1.7 implements &lt;a href=&quot;http://www.erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt;. EEP 48 aims to bring documentation interoperability across all languages running on the Erlang VM.&lt;/p&gt;

&lt;p&gt;Furthermore, EEP 48 introduces the ability to annotate documentation with metadata, which we have made possible to leverage from Elixir:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;@moduledoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A brand new module&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@moduledoc&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;authors:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Jane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;since:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.4.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Metadata can be given to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@moduledoc&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@typedoc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@doc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have updated &lt;a href=&quot;https://github.com/elixir-lang/ex_doc&quot;&gt;the ExDoc tool&lt;/a&gt; to start leveraging metadata in order to provide better documentation for developers. Some of the improvements include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Deprecated modules, functions, callbacks and types have a warning automatically attached to them. &lt;a href=&quot;https://hexdocs.pm/elixir/Behaviour.html&quot;&gt;See the deprecated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Behaviour&lt;/code&gt; module as an example&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Functions, macros, callbacks and types now include the version in which they were added. For example, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defguard/1&quot;&gt;see the top right corner of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defguard&lt;/code&gt; docs&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Future Elixir versions will &lt;a href=&quot;https://hexdocs.pm/elixir/main/Kernel.html#guards&quot;&gt;include its own section for guards in the documentation and in the sidebar&lt;/a&gt;. We are currently exploring ways to &lt;a href=&quot;https://github.com/elixir-lang/ex_doc/issues/876&quot;&gt;generalize this feature in ExDoc itself&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elixir’s interactive shell, IEx, has also been updated to print metadata:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/iex-metadata.png&quot; alt=&quot;IEx metadata&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While Elixir allows any metadata to be given, those tools currently exhibit only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:deprecated&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:since&lt;/code&gt;. Other keys may be shown in the future.&lt;/p&gt;

&lt;p&gt;Those improvements are not exclusive to the standard library, they are available to every Elixir library and application. We hope one day they will be available to all applications running on the Erlang VM too.&lt;/p&gt;

&lt;p&gt;To access the new documentation format, developers should use &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#fetch_docs/1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt;. We have always been proud of treating documentation as a first-class citizen and the ability to add structured information to the documentation is a further step in this direction.&lt;/p&gt;

&lt;h2 id=&quot;the-__stacktrace__-construct&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__STACKTRACE__&lt;/code&gt; construct&lt;/h2&gt;

&lt;p&gt;Erlang/OTP 21.0 introduces a new way to retrieve the stacktrace that is lexically scoped and no longer relies on side-effects like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.stacktrace/0&lt;/code&gt; does. Before one would write:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stacktrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reraise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stacktrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Elixir v1.7, this can be written as:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__STACKTRACE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reraise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__STACKTRACE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This change may also yield performance improvements in the future, since the lexical scope allows us to track precisely when a stacktrace is used and we no longer need to keep references to stacktrace entries after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; construct finishes.&lt;/p&gt;

&lt;p&gt;Other parts of the exception system have also been improved. For example, more information is provided in certain occurrences of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArgumentError&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArithmeticError&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeyError&lt;/code&gt; messages.&lt;/p&gt;

&lt;h2 id=&quot;erlangotp-logger-integration&quot;&gt;Erlang/OTP logger integration&lt;/h2&gt;

&lt;p&gt;Erlang/OTP 21 includes a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:logger&lt;/code&gt; module. Elixir v1.7 fully integrates with the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:logger&lt;/code&gt; and leverages its metadata system. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logger.Translator&lt;/code&gt; mechanism has also been improved to export metadata, allowing custom Logger backends to leverage information such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:crash_reason&lt;/code&gt; - a two-element tuple with the throw/error/exit reason as the first argument and the stacktrace as the second&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:initial_call&lt;/code&gt; - the initial call that started the process&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:registered_name&lt;/code&gt; - the process’ registered name as an atom&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We recommend Elixir libraries that previously hooked into Erlang’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:error_logger&lt;/code&gt; to hook into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Logger&lt;/code&gt; instead, in order to support all current and future Erlang/OTP versions.&lt;/p&gt;

&lt;h2 id=&quot;logger-compile-time-purging&quot;&gt;Logger compile-time purging&lt;/h2&gt;

&lt;p&gt;Previously, Logger macros such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debug&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info&lt;/code&gt;, and so on would always evaluate their arguments, even when nothing would be logged. From Elixir v1.7 the arguments are only evaluated when the message is logged.&lt;/p&gt;

&lt;p&gt;The Logger configuration system also accepts a new option called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:compile_time_purge_matching&lt;/code&gt; that allows you to remove log calls with specific compile-time metadata. For example, to remove all logger calls from application &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:foo&lt;/code&gt; with level lower than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:info&lt;/code&gt;, as well as remove all logger calls from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bar.foo/3&lt;/code&gt;, you can use the following configuration:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;compile_time_purge_matching:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;application:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;level_lower_than:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;module:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;function:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo/3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exunit-improvements&quot;&gt;ExUnit improvements&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/ex_unit/&quot;&gt;ExUnit&lt;/a&gt; is Elixir’s unit testing library. ExUnit has always leveraged Elixir macros to provide excellent error reports when a failure happens. For example, the following code:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fox jumps over the lazy dog&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;brown fox jumps over the dog&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will fail with the following report:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/exunit-diff.png&quot; alt=&quot;ExUnit Diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; macro is able to look at the code, extract the current file, the line, extract the operands and show a diff between the data structures alongside the stacktrace when the assertion fails.&lt;/p&gt;

&lt;p&gt;However, sometimes we need to write assertions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert some_function(expr1, var2)&lt;/code&gt;. When such assertion fails, we usually have to re-run the tests, now debugging or printing the values of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expr1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var2&lt;/code&gt;. In Elixir v1.7, when a “bare” assertion fails, we will print the value of each argument individually. For a simple example such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert some_vars(1 + 2, 3 + 4)&lt;/code&gt;, we get this report:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/exunit-bare-assertion-diff.png&quot; alt=&quot;ExUnit Bare Assertion Diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have also &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.DocTest.html#content&quot;&gt;added coloring and diffing to doctests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While ExUnit is our test framework, Mix is our build tool. Developers typically run their tests by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test&lt;/code&gt; side of things, there is a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--failed&lt;/code&gt; flag that runs all tests that failed the last time they ran. Finally, coverage reports generated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test --cover&lt;/code&gt; include a summary out of the box:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Generating cover results ...

Percentage | Module
-----------|--------------------------
   100.00% | Plug.Exception.Any
   100.00% | Plug.Adapters.Cowboy2.Stream
   100.00% | Collectable.Plug.Conn
   100.00% | Plug.Crypto.KeyGenerator
   100.00% | Plug.Parsers
   100.00% | Plug.Head
   100.00% | Plug.Router.Utils
   100.00% | Plug.RequestId
       ... | ...
-----------|--------------------------
    77.19% | Total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;We are really proud of this release, as it focuses mostly on quality of life improvements, instead of flashy new features. As Elixir continues to mature, expect more releases like this one. The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.7.0&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have also seen important developments in other areas not directly related to the Elixir codebase:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We have added &lt;a href=&quot;https://elixir-lang.org/development.html&quot;&gt;a “Development” section&lt;/a&gt; to the website, that outlines the Elixir team structure and goals&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://doc.honeypot.io/elixir-documentary-2018/&quot;&gt;Elixir now has its own mini-documentary&lt;/a&gt;, by &lt;a href=&quot;https://www.honeypot.io/&quot;&gt;Honeypot&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We have already highlighted some of the improvements in the ExDoc tool. Another improvement worth mentioning is the syntax highlighting is now done in Elixir itself, via the &lt;a href=&quot;https://github.com/tmbb/makeup&quot;&gt;Makeup&lt;/a&gt; library. This gives us more control over the grammar, the style, and improves load times. If you would like to add support for other languages, &lt;a href=&quot;https://github.com/tmbb/makeup&quot;&gt;reach out&lt;/a&gt;!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, don’t forget &lt;a href=&quot;https://elixirconf.com/&quot;&gt;ElixirConf US&lt;/a&gt; is coming soon, in Bellevue, WA, September 4-7. Last year my keynote focused on the last 5 years with Elixir. This year we are ready to look into the 5 years ahead.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Google Summer of Code 2018 projects</title>
  <link href="http://elixir-lang.org/blog/2018/06/28/gsoc-projects/"/>
  
  <author>
    <name>Andrea Leopardi</name>
  </author>
  
  <updated>2018-06-28T00:00:00+00:00</updated>
  <id>/blog/2018/06/28/gsoc-projects</id>
  <content type="html">&lt;p&gt;Like previous years, the Elixir community is happy to participate in &lt;a href=&quot;https://summerofcode.withgoogle.com&quot;&gt;Google Summer of Code&lt;/a&gt; 2018. We are currently working on four different projects. Let’s have a look at them.&lt;/p&gt;

&lt;h2 id=&quot;streamdata-integration-with-typespecs&quot;&gt;StreamData integration with typespecs&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Student: Nikola Jichev&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;StreamData&lt;/a&gt; is a data-generation and property-based testing library for Elixir. The goal of this GSoC project is to integrate StreamData with typespecs.&lt;/p&gt;

&lt;p&gt;The data-generation side of StreamData provides tools to generate random data through composable generators. For example, you could generate keyword lists like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StreamData&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;keywords_generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:alphanumeric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()})&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keywords_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [[_: [true]], [tm: 2, h: %{}]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In many cases, it would be useful to be able to generate such random data starting from already existing or user-defined types. For example, Elixir already provides a built-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keyword/0&lt;/code&gt; type for keyword lists defined roughly as:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The goal of the first part of this GSoC project is to provide StreamData with the ability to create data generators from type definitions. The API is not yet defined, but in this case, it could look something like the following:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StreamData&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;keywords_generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keywords_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [[_: [true]], [tm: 2, h: %{}]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the second part of the GSoC project, the aim is to be able to property-test functions with specs automatically.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;@spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has_key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first part of the project focuses on generating data from types, so we know how to generate function arguments. The missing piece is &lt;strong&gt;validating&lt;/strong&gt; that a given term &lt;em&gt;belongs to&lt;/em&gt; a given type. For example, in the snippet above, we want to be able to check if a term is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean()&lt;/code&gt;. Once we’re able to do this, automatic spec validation will be straightforward: it will be a matter of generating random arguments for the given function, calling the function with those arguments, and asserting that the returned value belongs to the return type defined in the spec.&lt;/p&gt;

&lt;p&gt;This kind of property-based testing doesn’t test for &lt;em&gt;correctness&lt;/em&gt;. In the snippet above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_key?/2&lt;/code&gt; could be implemented to ignore arguments always return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; and the automatic spec validation would pass since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; is always a boolean. However, this is a kind of &lt;strong&gt;smoke testing&lt;/strong&gt; useful for discovering inconsistencies in the arguments and return values of functions.&lt;/p&gt;

&lt;h2 id=&quot;tensorflex-tensorflow-bindings-for-the-elixir-programming-language&quot;&gt;Tensorflex: Tensorflow bindings for the Elixir programming language&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Student: Anshuman Chhabra&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Currently, there is a lack of machine learning tools and frameworks for Elixir. With the number of programmers learning/using machine learning only set to grow, supporting machine learning capabilities is essential for any programming language. Moreover, there are discussions on &lt;a href=&quot;https://elixirforum.com&quot;&gt;ElixirForum&lt;/a&gt; regarding this and recent talks given at ElixirConf that reflect the need for Elixir to provide machine learning capabilities.&lt;/p&gt;

&lt;p&gt;This project’s goal is Tensorflex, an Elixir machine learning framework similar to &lt;a href=&quot;https://keras.io&quot;&gt;Keras for Python&lt;/a&gt;. Keras uses Tensorflow as a backend for doing all the machine learning. Tensorflex will use Using Native Implemented Functions (NIFs) and the Tensorflow C API as a backend to provide a low-level API. This low-level API will then be used to write a Keras-like framework in the form of a high-level API. This will allow Elixir developers to write expedient and efficient machine learning code in Elixir.&lt;/p&gt;

&lt;h2 id=&quot;dialyzer-task-for-elixir&quot;&gt;Dialyzer task for Elixir&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Student: Gabriel Gatu&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dialyzer is a discrepancy analyzer that ships as part of Erlang/OTP. Currently, there are two projects that add Dialyzer support to Elixir applications: &lt;a href=&quot;https://github.com/jeremyjh/dialyxir&quot;&gt;dialyxir&lt;/a&gt; and &lt;a href=&quot;https://github.com/Comcast/dialyzex&quot;&gt;dialyzex&lt;/a&gt;. The goal of this project is to bring ideas from both projects into Elixir itself in order to make using Dialyzer in Elixir projects easier. The task we aim to add to Elixir will focus on two main features: better user experience (in particular, better error messages and formatting) and the ability to analyze projects incrementally.&lt;/p&gt;

&lt;h2 id=&quot;elixirbench&quot;&gt;ElixirBench&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Student: Tallys Martins&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ElixirBench aims to be a service to monitor performance of Elixir projects. The goal of the GSoC project is to bring ElixirBench up and have it run nightly performance monitoring of significant Elixir projects (including Elixir itself). The end goal is to have a platform that, given a project from GitHub, will monitor the performance of new releases of that project and look for performance regressions. The benchmarking process will be controlled through a configuration file that will specify the benchmark scripts to run.&lt;/p&gt;

&lt;p&gt;We have high hopes for this tool as we see value in it for the whole community and for core Elixir projects alike.&lt;/p&gt;

</content>
</entry>

<entry>
  <title>Elixir v1.6 released</title>
  <link href="http://elixir-lang.org/blog/2018/01/17/elixir-v1-6-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2018-01-17T00:00:00+00:00</updated>
  <id>/blog/2018/01/17/elixir-v1-6-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.6 includes new features, enhancements, and bug fixes. The main feature in this release is a code formatter. Important improvements can also be found in the standard library and in the Mix build tool.&lt;/p&gt;

&lt;h2 id=&quot;code-formatter&quot;&gt;Code formatter&lt;/h2&gt;

&lt;p&gt;The big feature in Elixir v1.6 is the addition of &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#format_string!/2&quot;&gt;a code formatter&lt;/a&gt; and an accompanying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix format&lt;/code&gt; task that adds automatic formatting to your projects.&lt;/p&gt;

&lt;p&gt;The goal of the formatter is to automate the styling of codebases into a unique and consistent layout used across teams and the whole community. Code is now easier to write, as you no longer need to concern yourself with formatting rules. Code is also easier to read, as you no longer need to convert the styles of other developers in your mind.&lt;/p&gt;

&lt;p&gt;The formatter also helps new developers to learn the language by giving immediate feedback on code structure, and eases code reviews by allowing teams to focus on business rules and code quality rather than code style.&lt;/p&gt;

&lt;p&gt;To automatically format your codebase, you can run the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Format.html&quot;&gt;new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix format&lt;/code&gt; task&lt;/a&gt;. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.formatter.exs&lt;/code&gt; file may be added to your project root for rudimentary formatter configuration. The mix task also supports flags for CI integration. For instance, you can make your build or a Pull Request fail if the code is not formatted accordingly by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--check-formatted&lt;/code&gt; flag. We also recommend developers to check their favorite editor and see if it already provides key bindings for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix format&lt;/code&gt;, allowing a file or a code snippet to be formatted without hassle.&lt;/p&gt;

&lt;p&gt;The Elixir codebase itself &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/6643&quot;&gt;has already been fully formatted&lt;/a&gt; and all further contributions are expected to contain formatted code. We recommend existing codebases to be formatted in steps. While the formatter will correctly handle long lines and complex expressions, refactoring the code by breaking those into variables or smaller functions as you format them will lead to overall cleaner and more readable codebases.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-supervisor&quot;&gt;Dynamic Supervisor&lt;/h2&gt;

&lt;p&gt;Supervisors in Elixir are responsible for starting, shutting down, and restarting child processes when things go wrong. Most of the interaction with supervisors happens through &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt; module&lt;/a&gt; and it provides three main strategies: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:one_for_one&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:rest_for_one&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:one_for_all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, sometimes the children of a supervisor are not known upfront and are rather started dynamically. For example, if you are building a web server, you have each request being handled by a separate supervised process. Those cases were handled in the Supervisor module under a special strategy called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:simple_one_for_one&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, this special strategy changed the semantics of the supervisor in regards to initialization and shutdown. Plus some APIs expected different inputs or would be completely unavailable depending on the supervision strategy.&lt;/p&gt;

&lt;p&gt;Elixir v1.6 addresses this issue by introducing &lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html&quot;&gt;a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicSupervisor&lt;/code&gt; module&lt;/a&gt;, which encapsulates the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:simple_one_for_one&lt;/code&gt; strategy and APIs in a proper module while allowing the documentation and API of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt; module to focus on its main use cases. Having a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DynamicSupervisor&lt;/code&gt; module also makes it simpler to add new features to the dynamic supervisor, such as the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:max_children&lt;/code&gt; option that limits the maximum number of children supervised dynamically.&lt;/p&gt;

&lt;h2 id=&quot;deprecated-and-since-attributes&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@deprecated&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@since&lt;/code&gt; attributes&lt;/h2&gt;

&lt;p&gt;This release also introduces two new attributes associated with function definitions: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@deprecated&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@since&lt;/code&gt;. The former marks if a function or macro is deprecated, the latter annotates the version the API was introduced:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Breaks a collection into chunks&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@since&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@deprecated&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Use chunk_every/2 instead&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;chunk_every&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; task was also updated to warn if your project calls deprecated code. So if a definition is marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@deprecated&lt;/code&gt; and a module invokes it, a warning will be emitted during compilation. This effectively provides libraries and frameworks a mechanism to deprecate code without causing multiple warnings to be printed in runtime and without impacting performance.&lt;/p&gt;

&lt;p&gt;Note those attributes are not yet available to tools that generate documentation. Such functionality will be added in Elixir v1.7 once &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/7198&quot;&gt;Elixir adopts EEP-48&lt;/a&gt;. We still recommend developers to start annotating their APIs so the information is already available when the tooling is updated.&lt;/p&gt;

&lt;h2 id=&quot;defguard-and-defguardp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defguard&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defguardp&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Elixir provides the concepts of guards: expressions used alongside pattern matching to select a matching clause. Let’s see an example straight from &lt;a href=&quot;https://elixir-lang.org&quot;&gt;Elixir’s home page&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Code that drives a car&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%User{age: age}&lt;/code&gt; is matching on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; struct with an age field and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when age &amp;gt;= 16&lt;/code&gt; is the guard.&lt;/p&gt;

&lt;p&gt;Since only a handful of constructs are &lt;a href=&quot;https://hexdocs.pm/elixir/guards.html#content&quot;&gt;allowed in guards&lt;/a&gt;, if you were in a situation where you had to check the age to be more than or equal to 16 in multiple places, extracting the guard to a separate function would be &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/2469&quot;&gt;less than obvious and error prone&lt;/a&gt;. To address those issues, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#defguard/1&quot;&gt;this release introduces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defguard/1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defguardp/1&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defguard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_old_to_drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_old_to_drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Code that drives a car&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;iex-improvements&quot;&gt;IEx improvements&lt;/h2&gt;

&lt;p&gt;IEx also got its share of improvements. The new code formatter allows us to pretty print code snippets, types and specifications, improving the overall experience when exploring code through the terminal.&lt;/p&gt;

&lt;p&gt;The autocomplete mechanism also got smarter, being able to provide context autocompletion. For example, typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t Enum.&lt;/code&gt; and hitting TAB will autocomplete only the types in Enum (in contrast to all functions). Typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b GenServer.&lt;/code&gt; and hitting TAB will autocomplete only the behaviour callbacks.&lt;/p&gt;

&lt;p&gt;Finally, the breakpoint functionality added &lt;a href=&quot;https://elixir-lang.org/blog/2017/07/25/elixir-v1-5-0-released/&quot;&gt;in Elixir v1.5&lt;/a&gt; has been improved to support pattern matching and guards. For example, to pattern match on a function call when the first argument is the atom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:foo&lt;/code&gt;, you may do:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex&amp;gt; break! SomeFunction.call(:foo, _, _)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#break!/4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;mix-xref&quot;&gt;mix xref&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Xref.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt;&lt;/a&gt; is a task added in Elixir v1.3 which provides general information about how modules and files in an application depend on each other. This release brings many improvements to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xref&lt;/code&gt;, extending the reach of the analysis and helping developers digest the vast amount of data it produces.&lt;/p&gt;

&lt;p&gt;One of such additions is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--include-siblings&lt;/code&gt; option that can be given to all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xref&lt;/code&gt; commands inside umbrella projects. For example, to find all of the callers of a given module or function of an application in an umbrella:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mix xref callers SomeModule --include-siblings
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graph&lt;/code&gt; command in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; now can also output general statistics about the graph. In &lt;a href=&quot;https://github.com/hexpm/hexpm&quot;&gt;the hexpm project&lt;/a&gt;, you would get:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mix xref graph --format stats
Tracked files: 129 (nodes)
Compile dependencies: 256 (edges)
Structs dependencies: 46 (edges)
Runtime dependencies: 266 (edges)

Top 10 files with most outgoing dependencies:
  * test/support/factory.ex (18)
  * lib/hexpm/accounts/user.ex (13)
  * lib/hexpm/accounts/audit_log.ex (12)
  * lib/hexpm/web/controllers/dashboard_controller.ex (12)
  * lib/hexpm/repository/package.ex (12)
  * lib/hexpm/repository/releases.ex (11)
  * lib/hexpm/repository/release.ex (10)
  * lib/hexpm/web/controllers/package_controller.ex (10)
  * lib/mix/tasks/hexpm.stats.ex (9)
  * lib/hexpm/repository/registry_builder.ex (9)

Top 10 files with most incoming dependencies:
  * lib/hexpm/web/web.ex (84)
  * lib/hexpm/web/router.ex (29)
  * lib/hexpm/web/controllers/controller_helpers.ex (29)
  * lib/hexpm/web/controllers/auth_helpers.ex (28)
  * lib/hexpm/web/views/view_helpers.ex (27)
  * lib/hexpm/web/views/icons.ex (27)
  * lib/hexpm/web/endpoint.ex (23)
  * lib/hexpm/ecto/changeset.ex (22)
  * lib/hexpm/accounts/user.ex (19)
  * lib/hexpm/repo.ex (19)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref graph&lt;/code&gt; also got the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--only-nodes&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--label&lt;/code&gt; options. The former asks Mix to only output file names (nodes) without the edges. The latter allows you to focus on certain relationships:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# To get all files that depend on lib/foo.ex
mix xref graph --sink lib/foo.ex --only-nodes

# To get all files that depend on lib/foo.ex at compile time
mix xref graph --label compile --sink lib/foo.ex --only-nodes

# To get all files lib/foo.ex depends on
mix xref graph --source lib/foo.ex --only-nodes

# To limit statistics only to compile time dependencies
mix xref graph --format stats --label compile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Those improvements will help developers better understand the relationship between files and reveal potentially complex parts of their systems.&lt;/p&gt;

&lt;p&gt;Other improvements in Mix include &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Task.Compiler.html&quot;&gt;better compiler diagnostics&lt;/a&gt; for editor integration, support for &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--slowest N&lt;/code&gt; flag in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test&lt;/code&gt;&lt;/a&gt; that shows the slowest tests in your suite, and a new &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Eprof.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix profile.eprof&lt;/code&gt; task&lt;/a&gt; that provides time based profiling, complementing the existing &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Profile.Cprof.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix profile.cprof&lt;/code&gt; (count based)&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Profile.Fprof.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix profile.fprof&lt;/code&gt; (flame based)&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.6.0&quot;&gt;release notes&lt;/a&gt;. There are many other exciting changes, such as compiler enhancements to better track dependencies, leading to less files being recompiled whenever there are changes in project, and overall faster compilation.&lt;/p&gt;

&lt;p&gt;Work on Elixir v1.7 has already started. We still welcome developers to try out the &lt;a href=&quot;https://elixir-lang.org/blog/2017/10/31/stream-data-property-based-testing-and-data-generation-for-elixir/&quot;&gt;previously announced StreamData library&lt;/a&gt;, that aims to bring data generation and property-based testing to Elixir. The other &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues&quot;&gt;features scheduled for v1.7 can be found in the issues tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t forget to check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>StreamData: Property-based testing and data generation</title>
  <link href="http://elixir-lang.org/blog/2017/10/31/stream-data-property-based-testing-and-data-generation-for-elixir/"/>
  
  <author>
    <name>Andrea Leopardi</name>
  </author>
  
  <updated>2017-10-31T00:00:00+00:00</updated>
  <id>/blog/2017/10/31/stream-data-property-based-testing-and-data-generation-for-elixir</id>
  <content type="html">&lt;p&gt;In this blog post, we’ll talk about property-based testing and sample data generation. We’ll cover what these are, why we want them in Elixir, and what are are plans for the future. If you want to use the features discussed here or you want to read more formal documentation, head over to &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;stream_data&lt;/a&gt;, which is a library that currently provides both features (albeit in beta form) and which is where we are focusing our efforts.&lt;/p&gt;

&lt;h2 id=&quot;sample-data-generation&quot;&gt;Sample data generation&lt;/h2&gt;

&lt;p&gt;The core of the &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;stream_data&lt;/a&gt; library is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData&lt;/code&gt;: this module provides all the functionalities related to generating sample data of many kinds. It includes both data generators for data types (like integers or booleans) as well as tools to combine other generators (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one_of(list_of_generators)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Developers are not supposed to create generators from scratch, but use the provided generators and the provided combinator functions to compose them. An example of a generator is the one returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData.integer()&lt;/code&gt;: this function returns a generator that generates integers. Generators are infinite streams of terms that implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; protocol. This means we can do operations such as taking terms out of a generator through functions from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [1, -1, 3, 4, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData&lt;/code&gt; contains some functions to modify generators. For example, you can build a generator of positive integers on top of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData.integer()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData.map/2&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StreamData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [0, 1, 3, 3, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData.map/2&lt;/code&gt; is encouraged over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.map/2&lt;/code&gt; because generators return values that can shrink, which is something property-based testing takes advantage of as we’ll see later on. When treated as enumerables, generators return normal values that cannot be shrunk.&lt;/p&gt;

&lt;p&gt;We decided to separate data-generation from property-based testing because it’s something that developers can take advantage of in situations outside of property-based testing. For example, data streams can be used to seed a database or to have randomly generated data available during regular tests.&lt;/p&gt;

&lt;h2 id=&quot;property-based-testing&quot;&gt;Property-based testing&lt;/h2&gt;

&lt;p&gt;We often write tests like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;length/1 calculates the length of a list&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This test is written using an &lt;em&gt;example-based approach&lt;/em&gt;. We are writing both the input to the piece of software we are testing as well as the expected output, and the testing tool is verifying that running the software on the given input results in the expected output. This style of testing is common and useful because it lets you get up and running easily and also lets you test known corner cases in an explicit way. However, it’s hard to test many cases this way and even harder to uncover &lt;em&gt;unknown&lt;/em&gt; corner cases that may reveal bugs in your code.&lt;/p&gt;

&lt;p&gt;Property-based testing is an intuitive way to fix some of the problems mentioned above.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;length/1 is always &amp;gt;= 0&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With property-based testing, you specify a set of valid inputs (lists in the example above) for your code and verify that your code holds some property for values taken at random from the valid inputs. In the example above, the test takes many (usually around 100) values at random from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list_of(term())&lt;/code&gt; &lt;em&gt;generator&lt;/em&gt; and verifies a property of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length/1&lt;/code&gt;, that is, that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length/1&lt;/code&gt; always returns a non-negative integer. A generator is just a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData&lt;/code&gt; generator, as we discussed in the previous section.&lt;/p&gt;

&lt;h3 id=&quot;shrinking&quot;&gt;Shrinking&lt;/h3&gt;

&lt;p&gt;Since we’re generating lots of random inputs to test, inputs that cause failures are often complex and convoluted. Take this trivial example of a property:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;list does not contain multiples of 4&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;positive_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;refute&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When running this property, the failure might trigger for a list like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From this list, it’s not easy to see why the test is failing (well, we know why because we wrote a doctored test that’s supposed to fail). When running the property though, the failure that will be reported will look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) property list does not contain multiples of 7 (MyPropertyTest)
   my_property_test.exs:6
   Failed with generated values (after 4 attempt(s)):

       list &amp;lt;- list_of(positive_integer())
       #=&amp;gt; [4]

   Expected false or nil, got true
   code: refute Enum.any?(list, &amp;amp;(rem(&amp;amp;1, 4) == 0))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This error shows the minimal generated value that triggers the failure, that is, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[4]&lt;/code&gt;. The process of finding the minimal generated value that triggers a failure is called &lt;em&gt;shrinking&lt;/em&gt;. All generators that come with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData&lt;/code&gt; generate values that “bundle” a way to shrink them so that property-based testing can use this to provide the shrinking functionality. Shrinking is a fundamental part of property-based testing as it takes out the &lt;em&gt;noise&lt;/em&gt; of random-generated data to reduce the failing data to focused and easier-to-understand terms.&lt;/p&gt;

&lt;h3 id=&quot;using-property-based-testing-in-stream_data&quot;&gt;Using property-based testing in stream_data&lt;/h3&gt;

&lt;p&gt;The core of property-based testing in stream_data is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check all&lt;/code&gt; macro. In this macro, you list a bunch of generators and filters (very similarly to how you would in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; comprehensions) and then pass a body where you can verify that a property holds for the generated data.&lt;/p&gt;

&lt;p&gt;To make the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check all&lt;/code&gt; macro available in your test, alongside importing all functions from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData&lt;/code&gt;, you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use ExUnitProperties&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyPropertyTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnitProperties&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the in/2 operator works with lists&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, we can filter generated data (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list != []&lt;/code&gt;) directly in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check all&lt;/code&gt; macro. We can also do simple assignments. The example above uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check all&lt;/code&gt; macro inside a regular &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;. If you want that your properties are reported as “property” at the end of an ExUnit test run, you can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;property&lt;/code&gt; macro instead:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyPropertyTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnitProperties&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;the in/2 operator works with lists&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By doing this your properties will also be tagged with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:property&lt;/code&gt; tag, which means you will be able to do things like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--only&lt;/span&gt; property
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to run only properties.&lt;/p&gt;

&lt;p&gt;There’s not much more to the mechanics of stream_data. Most of the work you will have to do revolves around finding good properties to test for your code and writing good generators for the data over which you want to test. Head over to &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;stream_data&lt;/a&gt;’s documentation for detailed documentation.&lt;/p&gt;

&lt;h3 id=&quot;advantages-of-property-based-testing&quot;&gt;Advantages of property-based testing&lt;/h3&gt;

&lt;p&gt;Using property-based testing has some advantages. First of all, it lets you test properties of your code over many more values than you otherwise would with example-based testing. While it’s true that random data generation can’t cover all the possible values that a piece of code can deal with, the confidence in your codebase can still increase over time because the property-based tests will likely generate different values on each run. Example-based testing means your test data will not change over time.&lt;/p&gt;

&lt;p&gt;Property-based testing however can also have a more powerful impact on the way you design software. When you start writing property-based tests, you will start thinking about what guarantees your code provides and what properties it satisfies. If you write properties before writing code, this can easily influence the way you write that code.&lt;/p&gt;

&lt;h3 id=&quot;learning-resources&quot;&gt;Learning resources&lt;/h3&gt;

&lt;p&gt;Property-based testing is not something specific to Elixir. While having its roots in Haskell (check out the &lt;a href=&quot;http://www.cs.tufts.edu/~nr/cs257/archive/john-hughes/quick.pdf&quot;&gt;original QuickCheck paper&lt;/a&gt; if you’re interested), nowadays many languages have stable and usable implementations of it: Clojure has &lt;a href=&quot;https://github.com/clojure/test.check&quot;&gt;test.check&lt;/a&gt;, Python has &lt;a href=&quot;https://github.com/HypothesisWorks/hypothesis-python&quot;&gt;Hypothesis&lt;/a&gt;, and many more. One of the most famous and complete tools for property-based testing exists for Erlang itself: &lt;a href=&quot;http://quviq.com&quot;&gt;QuickCheck&lt;/a&gt; by Quviq is a complete commercial solution for property-based testing in Erlang of both stateless as well as stateful systems, and Quviq even provides a custom Erlang scheduler to test race conditions in your concurrent programs.&lt;/p&gt;

&lt;p&gt;A young but awesome book about property-based testing written by Fred Hebert is also available at &lt;a href=&quot;http://propertesting.com&quot;&gt;propertesting.com&lt;/a&gt;. This book is a &lt;em&gt;proper&lt;/em&gt; (pun intended) guide to property-based testing and uses an Erlang library called &lt;a href=&quot;https://github.com/manopapad/proper&quot;&gt;PropEr&lt;/a&gt;. However, the concepts and techniques perfectly apply to Elixir and stream_data as well.&lt;/p&gt;

&lt;h2 id=&quot;why-include-property-based-testing-in-elixir-and-rewriting-from-scratch&quot;&gt;Why include property-based testing in Elixir (and rewriting from scratch)&lt;/h2&gt;

&lt;p&gt;The community has expressed some concern regarding two main things: why do we want to include a property-based testing tool in Elixir’s standard library? And why write such a tool from scratch instead of using one of the existing Erlang or Elixir solutions?&lt;/p&gt;

&lt;p&gt;The answer to the first question is that we believe providing such a tool in the standard library will encourage developers to use property-based testing and ultimately improve their software and the way they write it. At the same time, we want to be able to use property-based testing to test the Elixir codebase itself (which already turned out great &lt;a href=&quot;https://github.com/elixir-lang/elixir/pull/5022#issuecomment-233195478&quot;&gt;in the past&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The reasons for writing a new property-based testing library from scratch are best explained by José in &lt;a href=&quot;https://elixirforum.com/t/questions-about-property-testing-stream-data/9445/47&quot;&gt;this ElixirForum post&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Since we want to bundle it as part of Elixir, the code should be open source with an appropriate license.&lt;/li&gt;
    &lt;li&gt;We wanted to add both data generation and property testing to Elixir. That’s why the library is called stream_data instead of something named after property tests. The goal is to reduce the learning curve behind property testing by exposing the data generation aspect as streams, which is a known construct to most Elixir developers. We had this approach in mind for a while and the first library we saw leveraging this in practice was &lt;a href=&quot;https://github.com/pragdave/pollution&quot;&gt;@pragdave’s pollution&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Finally, since the core team are taking the responsibility of maintaining property testing as part of Elixir for potentially the rest of our lives, we want to have full understanding of every single line of code. This is non-negotiable as it guarantees we can continue to consistently improve the code as we move forward.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;We understand rolling our own implementation has its downsides, especially since it lacks maturity compared to alternatives, but we balance it by actively seeking input from knowledgeable folks and by listening to the feedback that comes from the community, which we are very thankful for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stream_data&lt;/code&gt; and the functionalities it includes are scheduled to be included in one of the next two Elixir releases, likely 1.6 but possibly 1.7. We have used the names &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExUnitProperties&lt;/code&gt; to avoid conflicts when those modules are eventually merged into Elixir. When merged, they will be renamed to the proper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.Data&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExUnit.Properties&lt;/code&gt; modules. Right now, all development is happening in the &lt;a href=&quot;https://github.com/whatyouhide/stream_data&quot;&gt;stream_data&lt;/a&gt; repository, where we are discussing features and giving users a chance to try out the functionalities early on. We’d love for anyone to get involved in trying stream_data and we’d love feedback!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update Jun/2020:&lt;/strong&gt; after careful consideration, the Elixir team decided to not include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StreamData&lt;/code&gt; in Elixir itself, and keep it as package, as it is able to provide all of the necessary features without a need for direct integration with the language.&lt;/p&gt;

</content>
</entry>

<entry>
  <title>Elixir v1.5 released</title>
  <link href="http://elixir-lang.org/blog/2017/07/25/elixir-v1-5-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2017-07-25T00:00:00+00:00</updated>
  <id>/blog/2017/07/25/elixir-v1-5-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.5 includes new features, enhancements, and bug fixes. While &lt;a href=&quot;/blog/2017/01/05/elixir-v1-4-0-released/&quot;&gt;Elixir v1.4&lt;/a&gt; focused on tools for concurrency and scalability, Elixir v1.5 brings many improvements to the developer experience and quality of life. As we will see, many of those are powered by the latest Erlang/OTP 20. This is also the last Elixir release that supports Erlang/OTP 18.&lt;/p&gt;

&lt;p&gt;Note: this announcement contains &lt;a href=&quot;https://asciinema.org&quot;&gt;asciinema&lt;/a&gt; snippets. You may need to enable 3rd-party JavaScript on this site in order to see them. If JavaScript is disabled, noscript tags with the proper links will be shown.&lt;/p&gt;

&lt;h2 id=&quot;utf-8-atoms-function-names-and-variables&quot;&gt;UTF-8 atoms, function names and variables&lt;/h2&gt;

&lt;p&gt;Elixir v1.5 supports non-quoted atoms and variables to be in UTF-8 when using Erlang/OTP 20. For example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;こんにちは世界&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;こんにちは世界&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sauda&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;çã&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bom dia!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Elixir follows the recommendations in &lt;a href=&quot;http://unicode.org/reports/tr31/&quot;&gt;Unicode Annex #31&lt;/a&gt; to make Elixir more accessible to other languages and communities. Identifiers must still be a sequence of letters, followed by digits and combining marks. This means symbols, such as mathematical notations and emoji, are not allowed in identifiers.&lt;/p&gt;

&lt;p&gt;For a complete reference on Elixir syntax, see the &lt;a href=&quot;https://hexdocs.pm/elixir/1.5/syntax-reference.html&quot;&gt;Syntax Reference&lt;/a&gt;. For technical details on Unicode support, see &lt;a href=&quot;https://hexdocs.pm/elixir/1.5/unicode-syntax.html&quot;&gt;Unicode Syntax&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;iex-helpers-and-breakpoints&quot;&gt;IEx helpers and breakpoints&lt;/h2&gt;

&lt;p&gt;IEx got many enhancements to the developer experience.&lt;/p&gt;

&lt;p&gt;First of all, the autocompletion system is now capable of autocompleting variables and user imports:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/iAOk0yaZtQDsuJqn2sXa1FRQW.js&quot; id=&quot;asciicast-iAOk0yaZtQDsuJqn2sXa1FRQW&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/iAOk0yaZtQDsuJqn2sXa1FRQW&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;IEx also got new functions, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exports/1&lt;/code&gt;, for listing all functions and macros in a module, and the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime_info/0&lt;/code&gt;:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/NT3xvSaB8f1vv7yaTvzaoJxBD.js&quot; id=&quot;asciicast-NT3xvSaB8f1vv7yaTvzaoJxBD&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/NT3xvSaB8f1vv7yaTvzaoJxBD&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;Finally, IEx also features a breakpoint system for code debugging when running on Erlang/OTP 20. The following functions have been added to aid debugging:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break!/2&lt;/code&gt; - sets up a breakpoint for a given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mod.fun/arity&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break!/4&lt;/code&gt; - sets up a breakpoint for the given module, function, arity&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;breaks/0&lt;/code&gt; - prints all breakpoints and their ids&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue/0&lt;/code&gt; - continues until the next breakpoint in the same process&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open/0&lt;/code&gt; - opens editor on the current breakpoint&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_breaks/0&lt;/code&gt; - removes all breakpoints in all modules&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_breaks/1&lt;/code&gt; - removes all breakpoints in a given module&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset_break/1&lt;/code&gt; - sets the number of stops on the given id to zero&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset_break/3&lt;/code&gt; - sets the number of stops on the given module, function, arity to zero&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respawn/0&lt;/code&gt; - starts a new shell (breakpoints will ask for permission once more)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whereami/1&lt;/code&gt; - shows the current location&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see an example:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/0h3po0AmTcBAorc5GBNU97nrs.js&quot; id=&quot;asciicast-0h3po0AmTcBAorc5GBNU97nrs&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/0h3po0AmTcBAorc5GBNU97nrs&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;In the snippet above we set a breakpoint in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URI.decode_query/2&lt;/code&gt; function, which is then triggered when invoked the function. We used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whereami/1&lt;/code&gt; to get more information about the surrounded code and we were also able to access the variables at place of debugging. From there, we can either set more breakpoints, remove existing breakpoints and continue execution. The session ended by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open&lt;/code&gt;, which will open your editor at the file and line under debugging. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open/1&lt;/code&gt; can also be invoked by passing any module or function, and IEx will open your editor at that place.&lt;/p&gt;

&lt;p&gt;The debugging functions improve the experience both within IEx and during testing. For example, if you are debugging a Phoenix application, you can start &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx&lt;/code&gt; while running your test suite with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iex -S mix test --trace&lt;/code&gt; and then call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx.break!(MyAppWeb.UserController.index/2)&lt;/code&gt; to debug the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; action of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserController&lt;/code&gt;. Note we gave the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--trace&lt;/code&gt; flag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test&lt;/code&gt;, which ensures only one test runs at a time and removes any timeouts from the suite.&lt;/p&gt;

&lt;h2 id=&quot;exceptionblame&quot;&gt;Exception.blame&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception.blame/3&lt;/code&gt; is a new function in Elixir that is capable of attaching debug information to certain exceptions. Currently this is used to augment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FunctionClauseError&lt;/code&gt;s with a summary of all clauses and which parts of clause match and which ones didn’t. Let’s try it out:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/EgQUdDe1CIz90EYYeipiS8jo8.js&quot; id=&quot;asciicast-EgQUdDe1CIz90EYYeipiS8jo8&quot; async=&quot;&quot;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;a href=&quot;https://asciinema.org/a/EgQUdDe1CIz90EYYeipiS8jo8&quot;&gt;See the example in asciinema&lt;/a&gt;&lt;/p&gt;&lt;/noscript&gt;

&lt;p&gt;In the example above, an argument that did not match or guard that did not evaluate to true are shown between in red. If the terminal does not support ANSI coloring, they are wrapped in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; instead of shown in red.&lt;/p&gt;

&lt;p&gt;Since blaming an exception can be expensive, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exception.blame/3&lt;/code&gt; must be used exclusively in debugging situations. It is not advised to apply it to production components such as a Logger. This feature has been integrated into the compiler, the command line, ExUnit and IEx.&lt;/p&gt;

&lt;p&gt;This feature also requires Erlang/OTP 20.&lt;/p&gt;

&lt;h2 id=&quot;streamlined-child-specs&quot;&gt;Streamlined child specs&lt;/h2&gt;

&lt;p&gt;Elixir v1.5 streamlines how supervisors are defined and used in Elixir. Elixir now allows child specifications, which specify how a child process is supervised, to be defined in modules. In previous versions, a project using Phoenix would write:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Spec&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;strategy:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Elixir v1.5, one might do:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;strategy:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above works by calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child_spec/1&lt;/code&gt; function on the given modules.&lt;/p&gt;

&lt;p&gt;This new approach allows &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp.Repo&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp.Endpoint&lt;/code&gt; to control how they run under a supervisor. This reduces the chances of mistakes being made, such as starting an Ecto repository as a worker or forgetting to declare that tasks are temporary in a supervision tree.&lt;/p&gt;

&lt;p&gt;If it is necessary to configure any of the children, such can be done by passing a tuple instead of an atom:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ecto://localhost:4567/my_dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The modules &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Agent&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Supervisor&lt;/code&gt; have been updated to include a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child_spec/1&lt;/code&gt; function, allowing them to be used directly in a supervision tree similar to the examples above. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use Agent&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use GenServer&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use Supervisor&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use Task&lt;/code&gt; have also been updated to automatically define an overridable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child_spec/1&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Finally, child specifications are now provided as maps (data-structures) instead of the previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor.Spec.worker/3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor.Spec.supervisor/3&lt;/code&gt; APIs. This behaviour also aligns with how supervisors are configured in Erlang/OTP 18+. See the updated &lt;a href=&quot;https://hexdocs.pm/elixir/1.5/Supervisor.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor&lt;/code&gt;&lt;/a&gt; docs for more information, as well as the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor.init/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Supervisor.child_spec/2&lt;/code&gt; functions.&lt;/p&gt;

&lt;h2 id=&quot;impl&quot;&gt;@impl&lt;/h2&gt;

&lt;p&gt;This release also allows developers to mark which functions in a given module are an implementation of a callback. For example, when using the &lt;a href=&quot;https://github.com/elixir-lang/plug&quot;&gt;Plug&lt;/a&gt; project, one needs to implement both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init/1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call/2&lt;/code&gt; when writing a Plug:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@behaviour&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The problem with the approach above is that, once more and more functions are added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; module, it becomes increasingly harder to know the purposes of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init/1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call/2&lt;/code&gt; functions. For example, for a developer unfamiliar with Plug, are those functions part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyApp&lt;/code&gt; API or are they implementations of a given callback?&lt;/p&gt;

&lt;p&gt;Elixir v1.5 introduces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@impl&lt;/code&gt; attribute, which allows us to mark that certain functions are implementation of callbacks:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@behaviour&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@impl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@impl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may even use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@impl Plug&lt;/code&gt; if you want to explicitly document which behaviour defines the callback you are implementing.&lt;/p&gt;

&lt;p&gt;Overall, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@impl&lt;/code&gt; has the following advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Readability of the code is increased, as it is now clear which functions are part of your API and which ones are callback implementations. To reinforce this idea, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@impl true&lt;/code&gt; automatically marks the function as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@doc false&lt;/code&gt;, disabling documentation unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@doc&lt;/code&gt; is explicitly set&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@impl&lt;/code&gt; before a function that is not a callback, Elixir will error. This is useful in case of typos or in case the behaviour definition changes (such as a new major version of a library you depend on is released)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@impl&lt;/code&gt; in one implementation, Elixir will force you to declare &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@impl&lt;/code&gt; for all other implementations in the same module, keeping your modules consistent&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;calendar-improvements&quot;&gt;Calendar improvements&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://elixir-lang.org/blog/2016/06/21/elixir-v1-3-0-released/&quot;&gt;Elixir v1.3&lt;/a&gt; introduced the Calendar module with the underlying  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Datetime&lt;/code&gt; data types. We are glad to announce we consider the base Calendar API to be finished in Elixir v1.5. This release includes many enhancements, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.range/2&lt;/code&gt; and the ability to convert between different calendars.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.5.0&quot;&gt;release notes&lt;/a&gt;. There are many other exciting changes, such as compiler enhancements that reduces compilation times by 10%-15% on averages. When taken into account with the compiler improvements in Erlang/OTP 20 itself, some applications have seen gains up to 30% in compilation times.&lt;/p&gt;

&lt;p&gt;Don’t forget to check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.4 released</title>
  <link href="http://elixir-lang.org/blog/2017/01/05/elixir-v1-4-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2017-01-05T00:00:00+00:00</updated>
  <id>/blog/2017/01/05/elixir-v1-4-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.4 brings new features, enhancements and bug fixes. The most notable changes are the addition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt; module, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.async_stream/3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.async_stream/5&lt;/code&gt; function which aid developers in writing concurrent software, and the new application inference and commands added to Mix.&lt;/p&gt;

&lt;p&gt;In this post we will cover the main additions. The complete &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.4.0&quot;&gt;release notes&lt;/a&gt; are also available.&lt;/p&gt;

&lt;h2 id=&quot;registry&quot;&gt;Registry&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Registry&lt;/code&gt;&lt;/a&gt; is a new module in Elixir’s standard library that allows Elixir developers to implement patterns such as name lookups, code dispatching or even a pubsub system in a simple and scalable way.&lt;/p&gt;

&lt;p&gt;Broadly speaking, the Registry is a local, decentralized and scalable key-value process storage. Let’s break this in parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Local because keys and values are only accessible to the current node (opposite to distributed)&lt;/li&gt;
  &lt;li&gt;Decentralized because there is no single entity responsible for managing the registry&lt;/li&gt;
  &lt;li&gt;Scalable because performance scales linearly with the addition of more cores upon partitioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A registry may have unique or duplicate keys. Every key-value pair is associated to the process registering the key. Keys are automatically removed once the owner process terminates. Starting, registering and looking up keys is quite straight-forward:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, huge thanks to &lt;a href=&quot;https://twitter.com/voltonez&quot;&gt;Bram Verburg&lt;/a&gt; who has performed &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1MByRZJMCnZ1wPiLhBEnSRRSuy1QXp8kr27PIOXO3qqg/edit#gid=0&quot;&gt;extensive benchmarks&lt;/a&gt; on the registry to show it scales linearly with the number of cores by increasing the number of partitions.&lt;/p&gt;

&lt;h2 id=&quot;syntax-coloring&quot;&gt;Syntax coloring&lt;/h2&gt;

&lt;p&gt;Elixir v1.4 introduces the ability to syntax color inspected data structures and IEx automatically relies on this feature to provide syntax coloring for evaluated shell results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/iex-coloring.png&quot; alt=&quot;IEx coloring&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This behaviour can be configured via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:syntax_colors&lt;/code&gt; coloring option:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;IEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;colors:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;syntax_colors:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;atom:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cyan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;string:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To disable coloring altogether, simply pass an empty list to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:syntax_colors&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;taskasync_stream&quot;&gt;Task.async_stream&lt;/h2&gt;

&lt;p&gt;When there is a need to traverse a collection of items concurrently, Elixir developers often resort to tasks:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeMod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The snippet above will spawn a new task by invoking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeMod.function(element)&lt;/code&gt; for every element in the collection and then await for the task results.&lt;/p&gt;

&lt;p&gt;However, the snippet above will spawn and run concurrently as many tasks as there are items in the collection. While this may be fine in many occasions, including small collections, sometimes it is necessary to restrict amount of tasks running concurrently, specially when shared resources are involved.&lt;/p&gt;

&lt;p&gt;Elixir v1.4 adds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.async_stream/3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.async_stream/5&lt;/code&gt; which brings some of the lessons we learned from &lt;a href=&quot;/blog/2016/07/14/announcing-genstage/&quot;&gt;the GenStage project&lt;/a&gt; directly into Elixir:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async_stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeMod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;max_concurrency:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code above will also start the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SomeMod.function(element)&lt;/code&gt; task for every element in the collection except it will also guarantee we have at most 8 tasks being processed at the same time. You can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.schedulers_online&lt;/code&gt; to retrieve the number of cores and balance the processing based on the amount of cores available.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.async_stream&lt;/code&gt; functions are also lazy, allowing developers to partially consume the stream until a condition is reached. Furthermore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Supervisor.async_stream/4&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task.Supervisor.async_stream/6&lt;/code&gt; can be used to ensure the concurrent tasks are spawned under a given supervisor.&lt;/p&gt;

&lt;h2 id=&quot;application-inference&quot;&gt;Application inference&lt;/h2&gt;

&lt;p&gt;In previous Mix versions, most of your dependencies had to be added both to your dependencies list and applications list. Here is how a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; would look like:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:postgrex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:postgrex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was a common source of confusion and quite error prone as many developers would not list their dependencies in the applications list.&lt;/p&gt;

&lt;p&gt;Mix v1.4 now automatically infers your applications list as long as you leave the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:applications&lt;/code&gt; key empty. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; above can be rewritten to:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;extra_applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:postgrex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the above, Mix will automatically build your application list based on your dependencies. Developers now only need to specify which applications shipped as part of Erlang or Elixir that they require, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:logger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if there is a dependency you don’t want to include in the application runtime list, you can do so by specifying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runtime: false&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{:distillery, &quot;&amp;gt; 0.0.0&quot;, runtime: false}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We hope this feature provides a more streamlined workflow for developers who are building releases for their Elixir projects.&lt;/p&gt;

&lt;h2 id=&quot;mix-install-from-scm&quot;&gt;Mix install from SCM&lt;/h2&gt;

&lt;p&gt;Mix v1.4 can now install escripts and archives from both Git and Hex, providing you with even more options for distributing Elixir code.&lt;/p&gt;

&lt;p&gt;This makes it possible to distribute CLI applications written in Elixir by publishing a package which builds an escript to Hex. &lt;a href=&quot;https://hex.pm/packages/ex_doc&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ex_doc&lt;/code&gt;&lt;/a&gt; has been updated to serve as an example of how to use this new functionality.&lt;/p&gt;

&lt;p&gt;Simply running:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix escript.install hex ex_doc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will fetch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ex_doc&lt;/code&gt; and its dependencies, build them, and then install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ex_doc&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.mix/escripts&lt;/code&gt; (by default). After adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.mix/escripts&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ex_doc&lt;/code&gt; is as simple as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ex_doc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can now also install archives from Hex in this way. Since they are fetched and built on the user’s machine, they do not have the same limitations as pre-built archives. However, keep in mind archives are loaded on every Mix command and may conflict with modules or dependencies in your projects. For this reason, escripts is the preferred format for sharing executables.&lt;/p&gt;

&lt;p&gt;It is also possible to install escripts and archives by providing a Git/GitHub repo. See &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix help escript.install&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix help archive.install&lt;/code&gt; for more details.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.4.0&quot;&gt;release notes&lt;/a&gt;. Don’t forget to check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Announcing GenStage</title>
  <link href="http://elixir-lang.org/blog/2016/07/14/announcing-genstage/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2016-07-14T00:00:00+00:00</updated>
  <id>/blog/2016/07/14/announcing-genstage</id>
  <content type="html">&lt;p&gt;Today we are glad to announce the official release of GenStage. GenStage is a new Elixir behaviour for exchanging events with back-pressure between Elixir processes. In the short-term, we expect GenStage to replace the use cases for GenEvent as well as providing a composable abstraction for consuming data from third-party systems.&lt;/p&gt;

&lt;p&gt;In this blog post we will cover the background that led us to GenStage, some example use cases, and what we are exploring for future releases. If instead you are looking for a quick reference, &lt;a href=&quot;https://github.com/elixir-lang/gen_stage&quot;&gt;check the project source code&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/gen_stage/Experimental.GenStage.html&quot;&gt;access its documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;One of the original motivations for &lt;a href=&quot;https://www.youtube.com/watch?v=Lqo9-pQuRKE&quot;&gt;creating and designing Elixir was to introduce better abstractions for working with collections&lt;/a&gt;. Not only that, we want to provide developers interested in manipulating collections with a path to take their code from eager to lazy, to concurrent and then distributed.&lt;/p&gt;

&lt;p&gt;Let’s discuss a simple but actual example: word counting. The idea of word counting is to receive one file and count how many times each word appears in the document. Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module it could be implemented as follows:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/some/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the solution above works fine and is efficient for small files, it is quite restrictive for large inputs as it loads the whole file into memory.&lt;/p&gt;

&lt;p&gt;Another issue with the solution above is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.flat_map/2&lt;/code&gt; step will build a huge list, with all the words in the file, before we effectively start counting them. Again, for a large document, this means more memory usage and a waste of processing time in building a list that will be traversed right after.&lt;/p&gt;

&lt;p&gt;Luckily, Elixir provides a solution to this problem (and has provided it for quite some time): streams. One of the advantage of streams is they are lazy, allowing us to traverse collections item by item, in this case, line by line, instead of loading the whole data set into memory. Let’s rewrite the example above to use streams:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/some/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.stream!&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.flat_map&lt;/code&gt;, we build a lazy computation that will emit a single line, break that line into words, and emit such words one by one without building huge lists in memory when enumerated. The functions in the &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;Stream module&lt;/a&gt; just express the computation we want to perform. The computation itself, like traversing the file or breaking into words in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flat_map&lt;/code&gt;, only happens when we call a function in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module. We have covered &lt;a href=&quot;https://dashbit.co/blog/introducing-reducees&quot;&gt;the foundation for Enum and Streams&lt;/a&gt; in another article.&lt;/p&gt;

&lt;p&gt;The solution above allows us to work with large datasets without loading them all into memory. For large files, it is going to provide much better performance than the eager version. However, the solution above still does not leverage concurrency. For a machine with more than one core, which is the huge majority of machines we have available today, it is a suboptimal solution.&lt;/p&gt;

&lt;p&gt;That said, how could we leverage concurrency in the example above?&lt;/p&gt;

&lt;p&gt;During my ElixirConf 2015 keynote, &lt;a href=&quot;http://confreaks.tv/videos/elixirconf2015-keynote&quot;&gt;I discussed one of the most immediate solutions to this problem&lt;/a&gt; which was to convert parts of your pipeline to separate processes:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/some/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# NEW!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.async&lt;/code&gt; would run the previous computations in a separate process that would stream its messages to the process that called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.reduce&lt;/code&gt;. Unfortunately, the solution above is less than ideal.&lt;/p&gt;

&lt;p&gt;First of all, we want to avoid moving data between processes as much as possible. Instead, we want to start multiple processes that perform the same computation in parallel. Not only that, if we are requiring developers to place &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.async&lt;/code&gt; manually, it may lead to inefficient and error prone solutions.&lt;/p&gt;

&lt;p&gt;Although the solution above has many flaws, it has helped us ask the right questions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.async&lt;/code&gt; is introducing new processes, how can we guarantee those processes are supervised?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Since we are exchanging messages between processes, how do we prevent a process from receiving too many messages? We need a back-pressure mechanism that allows the receiving process to specify how much it can handle from the sending process.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have jumped through different abstractions trying to answer those questions until we have finally settled on GenStage.&lt;/p&gt;

&lt;h2 id=&quot;genstage&quot;&gt;GenStage&lt;/h2&gt;

&lt;p&gt;GenStage is a new Elixir behaviour for exchanging events with back-pressure between Elixir processes. Developers who use GenStage only need to worry about how the data is produced, manipulated and consumed. The act of dispatching the data and providing back-pressure is completely abstracted away from the developers.&lt;/p&gt;

&lt;p&gt;As a quick example, let’s write a simple pipeline that will produce events as increasing numbers, multiply those numbers by two, and then print them to the terminal. We will do so by implementing three stages, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:producer&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:producer_consumer&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:consumer&lt;/code&gt;, which we will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; respectively. We will go back to the word counting example at the end of this post.&lt;/p&gt;

&lt;p&gt;Let’s start with the producer that we will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; is a producer, its main responsibility is to receive demand, which is the number of events the consumer is willing to handle, and generate events. Those events may be in memory or an external data source. For now let’s implement a simple counter starting from a given value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter&lt;/code&gt; received on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init/1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Note: all of the modules in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage&lt;/code&gt; project are prefixed with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Experimental&lt;/code&gt; namespace. That’s why the examples below and your code should &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias Experimental.GenStage&lt;/code&gt; at the top of your files.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# If the counter is 3 and we ask for 2 items, we will&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# emit the items 3 and 4, and set the state to 5.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The events to emit is the second element of the tuple,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the third being the state.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is a producer-consumer. This means it does not explicitly handle the demand because the demand is always forwarded to its producers. Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; receives the demand from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;, it will send events to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; which will be transformed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; as desired and then sent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt;. In our case, B will receive events and multiply them by a number given on initialization and stored as the state:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:producer_consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; is the consumer which will finally receive those events and print them every second to the terminal:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleeping_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleeping_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleeping_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Print events to terminal.&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Sleep the configured time.&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleeping_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# We are a consumer, so we never emit events.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleeping_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the stages defined, we can start and connect them:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# starting from zero&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# multiply by 2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sleep for a second&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Sleep so we see events printed.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As soon as we subscribe the stages, we should see items being printed to the terminal. Notice that, even though we have introduced a sleep command to the consumer, the producers will never overflow the consumer with data. That’s because the communication between stages is demand-driven. The producer can only send items to consumers after the consumers have sent demand upstream. The producer must never send more items than the consumer has specified.&lt;/p&gt;

&lt;p&gt;One consequence of this design decision is that parallelizing stateless stages like the consumer above is really straightforward:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# starting from zero&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# multiply by 2&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sleep for a second&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sleep for a second&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sleep for a second&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sleep for a second&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Sleep so we see events printed.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By simply starting multiple consumers, the stage &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; will now receive demand from multiple stages and dispatch events to those stages which are now running concurrently, always picking the stage that is able to process more items. We can also leverage concurrency from the opposite direction: if the producer is the slow stage in a pipeline, you can start multiple producers and have each consumer subscribe to them.&lt;/p&gt;

&lt;p&gt;In order to know which consumer should receive a particular event, producer stages depend on a behaviour called &lt;a href=&quot;https://hexdocs.pm/gen_stage/Experimental.GenStage.Dispatcher.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.Dispatcher&lt;/code&gt;&lt;/a&gt;. The default dispatcher is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.DemandDispatcher&lt;/code&gt; we have briefly described above: it will collect the demand from different consumers and dispatch to the one with highest demand. This means if one consumer is slow, maybe because we increased its sleeping time to 10 seconds, it will receive less items.&lt;/p&gt;

&lt;h3 id=&quot;genstage-for-data-ingestion&quot;&gt;GenStage for data-ingestion&lt;/h3&gt;

&lt;p&gt;One of the use cases for GenStage is to consume data from third-party systems. The demand system with back-pressure guarantees we won’t import more data than we can effectively handle. The demand dispatcher allows us to easily leverage concurrency when processing the data by simply adding more consumers.&lt;/p&gt;

&lt;p&gt;During the Elixir London Meetup, I have live-coded a short example that shows how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage&lt;/code&gt; to concurrently process data stored in a PostgreSQL database as a queue:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/aZuY5-2lwW4&quot; class=&quot;video&quot; allowfullscreen=&quot;&quot; title=&quot;Elixir London June 2016 w/ José Valim&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;genstage-for-event-dispatching&quot;&gt;GenStage for event dispatching&lt;/h3&gt;

&lt;p&gt;Another scenario where GenStage can be useful today is to replace cases where developers would have used &lt;a href=&quot;https://hexdocs.pm/elixir/GenEvent.html&quot;&gt;GenEvent&lt;/a&gt; in the past. For those unfamiliar with GenEvent, it is a behaviour where events are sent to an “event manager” which then proceeds to invoke “event handlers” for each event. GenEvent, however, has one big flaw: the event manager and all event handlers run in the same process. This means GenEvent handlers cannot easily leverage concurrency without forcing developers to implement those mechanisms themselves. Furthermore, GenEvent handlers have very awkward error semantics. Because event handlers are not separate processes, we cannot simply rely on supervisors restarting them.&lt;/p&gt;

&lt;p&gt;GenStage solves those problems by having a producer as the event manager. The producer itself should be configured to use &lt;a href=&quot;https://hexdocs.pm/gen_stage/Experimental.GenStage.BroadcastDispatcher.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.BroadcastDispatcher&lt;/code&gt;&lt;/a&gt; as its dispatcher. The broadcast dispatcher will guarantee events are dispatched to all consumers in a way that does not exceed the demand of any of the consumers. This allows us to leverage concurrency and having the “event manager” as a producer gives us much more flexibility in terms of buffering and reacting to failures.&lt;/p&gt;

&lt;p&gt;Let’s see an example of building an event manager as a producer:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EventManager&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
  Starts the manager.
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
  Sends an event and returns only after the event is dispatched.
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sync_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;## Callbacks&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:producer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;dispatcher:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BroadcastDispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;incoming_demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;incoming_demand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;dispatch_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventManager&lt;/code&gt; works as a buffer. If there is demand but not events to be sent, we store such demand. If there are events but no demand, we store such events in a queue. If a client tries to broadcast an event, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync_notify&lt;/code&gt; call will block until the event is effectively broadcasted. The bulk of the logic is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch_events/3&lt;/code&gt; function that takes events from the queue while there is demand.&lt;/p&gt;

&lt;p&gt;By implementing the event manager as a producer, we can configure all sorts of behaviours that are simply not possible with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenEvent&lt;/code&gt;, such as how much data we want to queue (or for how long) and if events should be buffered or not when there are no consumers (via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_subscribe/4&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle_cancel/3&lt;/code&gt; callbacks).&lt;/p&gt;

&lt;p&gt;Implementing event handlers is as straightforward as writing any other consumer. We could in fact use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; consumer implemented earlier. However, given event managers are often defined before the handlers, it is recommended for handlers to subscribe to managers when they start:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EventHandler&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Callbacks&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Starts a permanent subscription to the broadcaster&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# which will automatically start requesting items.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;subscribe_to:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EventManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle_events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:noreply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Such guarantees that, if a supervised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EventHandler&lt;/code&gt; crashes, the supervisor will start a new event handler which will promptly subscribe to the same manager, solving the awkward error handling semantics we have seen with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenEvent&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-path-forward&quot;&gt;The path forward&lt;/h2&gt;

&lt;p&gt;With the release of GenStage v0.3.0, we have reached an important milestone as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage&lt;/code&gt; can be used as both event managers and a way to exchange events between processes, often external data sources, with back-pressure.&lt;/p&gt;

&lt;p&gt;The v0.3.0 release also includes the &lt;a href=&quot;https://hexdocs.pm/gen_stage/Experimental.GenStage.html#stream/1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.stream&lt;/code&gt;&lt;/a&gt; function, which allows us to consume data from a GenStage as a stream, and &lt;a href=&quot;https://hexdocs.pm/gen_stage/Experimental.GenStage.html#from_enumerable/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.from_enumerable&lt;/code&gt;&lt;/a&gt; which allows us to use an enumerable or a stream, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File.stream!&lt;/code&gt;, as a producer. Closing the gap between stages and streams.&lt;/p&gt;

&lt;p&gt;However, we are far from done!&lt;/p&gt;

&lt;p&gt;First of all, now is the moment for the community to step in and try GenStage out. If you have used GenEvent in the past, can it be replaced by a GenStage? Similarly, if you were planning to implement an event handling system, give GenStage a try.&lt;/p&gt;

&lt;p&gt;Developers who maintain libraries that integrate with external data sources, be it a RabbitMQ, Redis or Apacha Kafka, can explore GenStage as an abstraction for consuming data from those sources. Library developers must implement producers and leave it up for their users to configure the consumer stages.&lt;/p&gt;

&lt;p&gt;Once we get enough feedback, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage&lt;/code&gt; will be included in some shape as part of the standard library. The goal is to introduce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage&lt;/code&gt; and phase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenEvent&lt;/code&gt; out in the long term.&lt;/p&gt;

&lt;p&gt;We, on the Elixir team, have just got started too. The next milestone for GenStage is to revisit the original problem and provide developers a clear path to take their collection processing code from eager, to lazy, to concurrent (and then distributed).&lt;/p&gt;

&lt;p&gt;As seen earlier, today we allow developers to transform eager code into lazy by introducing streams.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/some/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%{},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the above is helpful when working with large or infinite collections, it still does not leverage concurrency. To address that, we are currently exploring a solution named &lt;a href=&quot;https://hexdocs.pm/gen_stage/Experimental.Flow.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.Flow&lt;/code&gt;&lt;/a&gt;, that allows us to express our computations similarly to streams, except they will run across multiple stages instead of a single process:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/some/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the highly optimized version:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Experimental&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GenStage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Let's compile common patterns for performance&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;empty_space&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile_pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NEW!&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path/to/some/file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;read_ahead:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NEW!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flat_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty_space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;storage:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# NEW!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Flow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flow will look at the computations we want to perform and start a series of stages to execute our code while keeping the amount of data being transferred between processes to a minimum. If you are interested in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.Flow&lt;/code&gt; and how the computations above are spread across multiple stages, &lt;a href=&quot;https://hexdocs.pm/gen_stage/Experimental.Flow.html&quot;&gt;we have written some documentation based on the prototypes we have built so far&lt;/a&gt;. The code itself is coming in future GenStage releases. We will also have to consider how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.Flow&lt;/code&gt; API mirrors the functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; to make the path from eager to concurrent clearer.&lt;/p&gt;

&lt;p&gt;For the word counting problem with a fixed data, early experiments show a linear increase in performance with a fixed overhead of 20%. In other words, a dataset that takes 60s with a single core, takes 36s on a machine with 2 cores and 18s in one with 4 cores. All of those gains by simply moving your computations from streams to Flow. We plan to benchmark on machines with over 40 cores soon.&lt;/p&gt;

&lt;p&gt;We are very excited with the possibilities GenStage brings to developers and all new paths it allows us to explore and research. So give it a try and let us know! &lt;a href=&quot;http://www.elixirconf.com/&quot;&gt;GenStage, Flows, and more will also be the topic of my keynote at ElixirConf 2016&lt;/a&gt; and we hope to see you there.&lt;/p&gt;

&lt;p&gt;Finally, we want to thank the &lt;a href=&quot;http://reactive-streams.io&quot;&gt;akka-streams and reactive-streams projects&lt;/a&gt; which provided us guidance in implementing the demand-driven exchange between stages as well as the &lt;a href=&quot;http://spark.apache.org/&quot;&gt;Apache Spark&lt;/a&gt; and &lt;a href=&quot;http://beam.incubator.apache.org/&quot;&gt;Apache Beam&lt;/a&gt; initiatives that inspire the work behind &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GenStage.Flow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.3 released</title>
  <link href="http://elixir-lang.org/blog/2016/06/21/elixir-v1-3-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2016-06-21T00:00:00+00:00</updated>
  <id>/blog/2016/06/21/elixir-v1-3-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.3 brings many improvements to the language, the compiler and its tooling, specially Mix (Elixir’s build tool) and ExUnit (Elixir’s test framework). The most notable additions are the new Calendar types, the new cross-reference checker in Mix, and the assertion diffing in ExUnit. We will explore all of them and a couple more enhancements below.&lt;/p&gt;

&lt;p&gt;With this release, we also welcome &lt;a href=&quot;http://github.com/whatyouhide&quot;&gt;Andrea Leopardi&lt;/a&gt; to Elixir Core Team. He has contributed greatly to this release and maintains important packages in the community, like &lt;a href=&quot;https://github.com/elixir-lang/gettext&quot;&gt;Gettext&lt;/a&gt; and &lt;a href=&quot;https://github.com/whatyouhide/redix&quot;&gt;Redix&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;language-improvements&quot;&gt;Language improvements&lt;/h2&gt;

&lt;p&gt;The language has been improved semantically and includes new types and APIs. Let’s see the three major features.&lt;/p&gt;

&lt;h3 id=&quot;deprecation-of-imperative-assignment&quot;&gt;Deprecation of imperative assignment&lt;/h3&gt;

&lt;p&gt;Elixir will now warn if constructs like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; and friends assign to a variable that is accessed in an outer scope. As an example, imagine a function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format&lt;/code&gt; that receives a message and some options and it must return a path alongside the message:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative_to_cwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_file_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; block above is implicitly changing the value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt;. Now imagine we want to move the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; block to its own function to clean up the implementation:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_file_and_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with_file_and_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative_to_cwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format_file_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The refactored version is broken because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; block was actually returning two values, the relative path &lt;em&gt;and&lt;/em&gt; the new message. Elixir v1.3 will warn on such cases, forcing both variables to be explicitly returned from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; and other constructs. Furthermore, this change gives us the opportunity to unify the language scoping rules in future releases.&lt;/p&gt;

&lt;h3 id=&quot;calendar-types-and-sigils&quot;&gt;Calendar types and sigils&lt;/h3&gt;

&lt;p&gt;Elixir v1.3 introduces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Calendar&lt;/code&gt; module as well as 4 new calendar types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt; - used to store dates (year, month, day) in a given calendar&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Time&lt;/code&gt; - used to store time (hour, minute, second, microseconds)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; - used to store datetimes without a timezone (year, month, day, hour, minute, second, microseconds) in a given calendar. It is called naïve because without a timezone, the datetime may not actually exist. For example, when there are daylight savings changes, a whole hour may not exist (when the clock moves forward) or a particular instant may happen twice (when the clock moves backwards)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; - used to store datetimes with timezone (year, month, day, hour, minute, second, microsecond and time zone, with abbreviation, UTC and standard offset)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The aim of the current implementation of the Calendar modules and its types is to provide a base for interoperatibility in the ecosystem instead of full-featured datetime API. This release includes basic functionality for building new types and converting them from and back strings.&lt;/p&gt;

&lt;p&gt;Elixir v1.3 also introduces 3 new sigils related to the types above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~D[2016-05-29]&lt;/code&gt; - builds a new date&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~T[08:00:00]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~T[08:00:00.285]&lt;/code&gt; - builds a new time (with different precisions)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~N[2016-05-29 08:00:00]&lt;/code&gt; - builds a naive date time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;access-selectors&quot;&gt;Access selectors&lt;/h3&gt;

&lt;p&gt;This release introduces new accessors to make it simpler for developers to traverse nested data structures, traversing and updating data in different ways.  For instance, given a user with a list of languages, here is how to deeply traverse the map and convert all language names to uppercase:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&amp;gt;&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;languages:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;elixir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:functional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&amp;gt;&lt;/span&gt;                      &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:procedural&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:languages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upcase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;languages:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ELIXIR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:functional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:procedural&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see the new accessors in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access&lt;/code&gt; module.&lt;/p&gt;

&lt;h2 id=&quot;mix&quot;&gt;Mix&lt;/h2&gt;

&lt;p&gt;Mix includes new tasks to improve your everyday workflow. Some of those tasks relies on many compiler improvements to know more about your code, providing static analysis to find possible bugs in your code and faster compilation cycles.&lt;/p&gt;

&lt;h3 id=&quot;compiling-n-files&quot;&gt;Compiling n files&lt;/h3&gt;

&lt;p&gt;Mix no longer announces every file it compiles. Instead it outputs how many files there is to compile per compilers. Here is the output for a project like &lt;a href=&quot;https://github.com/elixir-lang/gettext&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gettext&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Compiling 1 file (.yrl)
Compiling 1 file (.erl)
Compiling 19 files (.ex)
Generated gettext app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In case a file is taking too long to compile, Mix will announce such, for example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Compiling lib/gettext.ex (it's taking more than 10s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The goal of these changes is to put an increased focus on the “warnings” emitted by the compiler.&lt;/p&gt;

&lt;p&gt;In any case, the previous behaviour can be brought back with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--verbose&lt;/code&gt; flag and the compilation threshold for files that are taking long can be set via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--long-compilation-threshold&lt;/code&gt; option.&lt;/p&gt;

&lt;h3 id=&quot;mix-xref&quot;&gt;mix xref&lt;/h3&gt;

&lt;p&gt;Speaking about warnings, Mix v1.3 includes a new task called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xref&lt;/code&gt; that performs cross reference checks in your code. One of such checks is the ability to find calls to modules and functions that do not exist. For example, if in your library code you call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ThisModuleDoesNotExist.foo(1, 2, 3)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref unreachable&lt;/code&gt; will be able to find such code and let you know about it.&lt;/p&gt;

&lt;p&gt;Since such checks can discover possible bugs in your codebase, a new compiler called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xref&lt;/code&gt; has been added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.compilers/0&lt;/code&gt;, so it runs by default every time you compile your code. &lt;a href=&quot;https://pragtob.wordpress.com/2016/06/02/elixir-1-3s-mix-xref-working-its-magic-in-a-real-world-example/&quot;&gt;PragTob has written an article exploring how this new compiler has found bugs in existing projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have included other modes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xref&lt;/code&gt;, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref callers Foo&lt;/code&gt; - used to find all places in your code that calls a function from the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref graph&lt;/code&gt; - generates a graph with dependencies between source files&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find documentation for all modes by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix help xref&lt;/code&gt;. We hope tools and text editors can leverage such features to provide useful functionality for their users, helping developers understand code complexity and finding bugs early on.&lt;/p&gt;

&lt;h3 id=&quot;better-dependency-tracking&quot;&gt;Better dependency tracking&lt;/h3&gt;

&lt;p&gt;Besides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xref&lt;/code&gt;, Elixir v1.3 provides better module tracking generally. For example, in previous versions, if you changed a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:path&lt;/code&gt; dependency, Elixir would always fully recompile the current project. In this release, we have improved the tracking algorithms such that, if you change a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:path&lt;/code&gt; dependency, only the files that depend on such dependency are recompiled.&lt;/p&gt;

&lt;p&gt;Such improvements do not only make compilation faster but they also make working with umbrella applications much more productive. Previously, changing a sibling application triggered a full project recompilation, now Elixir can track between sibling applications and recompile only what is needed.&lt;/p&gt;

&lt;h3 id=&quot;mix-apptree-and-depstree&quot;&gt;mix app.tree and deps.tree&lt;/h3&gt;

&lt;p&gt;Mix also includes both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix app.tree&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix deps.tree&lt;/code&gt;. The first will list all applications your current project needs to start in order to boot (i.e. the ones listed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/0&lt;/code&gt; in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;) while the second will lists all of your dependencies and so on recursively.&lt;/p&gt;

&lt;p&gt;Here is a quick example from &lt;a href=&quot;https://github.com/elixir-lang/plug&quot;&gt;Plug&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mix&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elixir&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;├──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elixir&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;└──&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elixir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--format dot&lt;/code&gt; option can also be given to generate graph files to be opened by &lt;a href=&quot;http://www.graphviz.org&quot;&gt;GraphViz&lt;/a&gt;. For example, here is the output of running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix deps.tree --format dot --only prod&lt;/code&gt; in the &lt;a href=&quot;http://phoenixframework.org&quot;&gt;Phoenix web framework&lt;/a&gt;:&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/images/contents/deps-tree-phoenix.svg&quot; alt=&quot;mix deps.tree for Phoenix in production&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;mix-escriptinstall&quot;&gt;mix escript.install&lt;/h3&gt;

&lt;p&gt;Mix also includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix escript.install&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix escript.uninstall&lt;/code&gt; tasks for managing escripts. The tasks was designed in a way to mimic the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix archive&lt;/code&gt; functionality except that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Archives must be used sparingly because every new archive installed affects Mix performance, as every new archive is loaded when Mix boots. Escripts solve this by being managed apart from your Elixir/Mix installed&lt;/li&gt;
  &lt;li&gt;Archives depends on the current Elixir version. Therefore, updating your Elixir version may break an archive. Fortunately, escripts include Elixir inside themselves, and therefore do not depend on your Elixir system version&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Escripts will be installed at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.mix/escripts&lt;/code&gt; which must be added to your &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;option-parser-integration&quot;&gt;Option parser integration&lt;/h3&gt;

&lt;p&gt;Elixir v1.3 includes improvements to the option parser, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionParser.parse!/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OptionParser.parse_head!/2&lt;/code&gt; functions that will raise in case of invalid or unknown switches. Mix builds on top of this functionality to provide automatic error reporting solving a common complaint where invalid options were not reported by Mix tasks.&lt;/p&gt;

&lt;p&gt;For example, invoking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test --unknown&lt;/code&gt; in earlier Elixir versions would silently discard the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--unknown&lt;/code&gt; option. Now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test&lt;/code&gt; correctly reports such errors:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mix test --unknown
** (Mix) Could not invoke task &quot;test&quot;: 1 error found!
--unknown : Unknown option
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note not all tasks have been updated to use strict option parsing. Some tasks, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix compile&lt;/code&gt;, are actually a front-end to many other tasks, and as such, it cannot effectively assert which options are valid.&lt;/p&gt;

&lt;h2 id=&quot;exunit&quot;&gt;ExUnit&lt;/h2&gt;

&lt;p&gt;ExUnit packs many improvements on the tooling side, better integration with external tools, as well as mechanisms to improve the readability of your tests.&lt;/p&gt;

&lt;h3 id=&quot;mix-test---stale&quot;&gt;mix test --stale&lt;/h3&gt;

&lt;p&gt;ExUnit builds on top of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix xref&lt;/code&gt; to provide the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test --stale&lt;/code&gt; functionality. When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stale&lt;/code&gt; flag is given, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix&lt;/code&gt; will only run the tests that may have changed since the last time you ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test --stale&lt;/code&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you saved a test file on disk, Mix will run that file and ignore the ones that have not changed&lt;/li&gt;
  &lt;li&gt;If you changed a library file, for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/foo.ex&lt;/code&gt; that defines &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt;, any test that invokes a function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt; directly or indirectly will also run&lt;/li&gt;
  &lt;li&gt;If you modify your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; or your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/test_helper.exs&lt;/code&gt;, Mix will run the whole test suite&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This feature provides a great workflow for developers, allowing them to effortlessly focus on parts of the codebase when developing new features.&lt;/p&gt;

&lt;h3 id=&quot;diffing&quot;&gt;Diffing&lt;/h3&gt;

&lt;p&gt;ExUnit will now include diff-ing output every time a developer asserts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert left == right&lt;/code&gt; in their tests. For example, the assertion:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fox jumps over the lazy dog&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;brown fox jumps over the dog&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will fail with&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/exunit-diff.png&quot; alt=&quot;ExUnit diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;such that “lazy” in “lhs” will be shown in red to denote it has been removed from “rhs” while “brown” in “rhs” will be shown in green to denote it has been added to the “rhs”.&lt;/p&gt;

&lt;p&gt;When working with large or nested data structures, the diffing algorithm makes it fast and convenient to spot the actual differences in the asserted values.&lt;/p&gt;

&lt;h3 id=&quot;test-types&quot;&gt;Test types&lt;/h3&gt;

&lt;p&gt;ExUnit v1.3 includes the ability to register different test types. This means libraries like QuickCheck can now provide functionality such as:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PropertyTestingLibrary&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;starts_with?&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the end of the run, ExUnit will also report it as a property, including both the amount of tests and properties:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 property, 10 tests, 0 failures
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;named-setups-and-describes&quot;&gt;Named setups and describes&lt;/h3&gt;

&lt;p&gt;Finally, ExUnit v1.3 includes the ability to organize tests together in describe blocks:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;String.capitalize/2&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;uppercases the first grapheme&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;T&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lowercases the remaining graphemes&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Test&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every test inside a describe block will be tagged with the describe block name. This allows developers to run tests that belong to particular blocks, be them in the same file or across many files:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mix test --only describe:&quot;String.capitalize/2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note describe blocks cannot be nested. Instead of relying on hierarchy for composition, we want developers to build on top of named setups. For example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UserManagementTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when user is logged in and is an admin&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:log_user_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_type_to_admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;when user is logged in and is a manager&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:log_user_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_type_to_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_user_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By restricting hierarchies in favor of named setups, it is straight-forward for the developer to glance at each describe block and know exactly the setup steps involved.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.3.0&quot;&gt;release notes&lt;/a&gt;. Don’t forget to check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.2 released</title>
  <link href="http://elixir-lang.org/blog/2016/01/03/elixir-v1-2-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2016-01-03T00:00:00+00:00</updated>
  <id>/blog/2016/01/03/elixir-v1-2-0-released</id>
  <content type="html">&lt;p&gt;v1.2 brings enhancements, bug fixes, performance improvements and more into Elixir. Elixir v1.2 relies on many features in Erlang 18, requiring at least Erlang 18+. Upgrading to Erlang 18 is therefore necessary before upgrading Elixir.&lt;/p&gt;

&lt;p&gt;To celebrate this release and the new year, we have also reviewed both the &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started&lt;/a&gt; and &lt;a href=&quot;http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html&quot;&gt;Mix &amp;amp; OTP&lt;/a&gt; guides, bringing it up to date and exploring new functionalities added since Elixir v1.0.&lt;/p&gt;

&lt;h2 id=&quot;erlang-18-support&quot;&gt;Erlang 18 support&lt;/h2&gt;

&lt;p&gt;We have brought many features specific to Erlang 18. Here are the highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maps can now scale from dozens to millions of keys. Therefore, usage of the modules &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dict&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashDict&lt;/code&gt; is now discouraged and will be deprecated in future releases, instead use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&lt;/code&gt;. Similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashSet&lt;/code&gt; will be deprecated in favor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MapSet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Compilation times are ~15% faster on average due to improvements in both the Elixir and Erlang compilers and by using maps more extensively in the compilation stack&lt;/li&gt;
  &lt;li&gt;Dialyzer now emits less false negative warnings thanks to new annotations available in the Erlang compiler&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;language-improvements&quot;&gt;Language improvements&lt;/h2&gt;

&lt;p&gt;This release includes many notable language improvements.&lt;/p&gt;

&lt;p&gt;The first of them was the addition of multi aliases/imports/require. Often developers would write:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Baz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it can be written in one line by using the new multi syntax:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have also added support for variables in map keys. Now you can write:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Furthermore, variables can also be used on pattern matching along-side the pin operator:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;another world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;another world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, Elixir v1.2 introduces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; special form that allows developers to match on multiple expressions concisely. Previously, one would write&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_file.ex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;such can now be rewritten as&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_file.ex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eval_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt; will match each left side of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;-&lt;/code&gt; against the right side, executing expressions until one of those match fails or until the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do: expression&lt;/code&gt; is performed. In case a match fails, the non-matching result is returned.&lt;/p&gt;

&lt;p&gt;These improvements aim to make the language more consistent and expressive.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-experience&quot;&gt;Getting started experience&lt;/h2&gt;

&lt;p&gt;We have also improved both the parser and compiler to be more aware of language constructs, emitting warnings on common pitfalls like when piping to expressions without parentheses or when defining unsafe variables. Such improvements will point developers to the more idiomatic way of writing Elixir code early on.&lt;/p&gt;

&lt;p&gt;Elixir v1.2 also introduces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i/1&lt;/code&gt; helper in IEx, which allows developers to retrieve information about any data type. This will help newcomers explore the language values while providing experienced developers with crucial information about the value they are introspecting. For example, giving a PID to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i/1&lt;/code&gt; will show if it has a registered name, linked processes and more. Giving it a module, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i(String)&lt;/code&gt;, shows compile-time information and others.&lt;/p&gt;

&lt;p&gt;All of those improvements tie nicely with our updates to the Getting Started guide, ensuring learning Elixir is more fun and efficient than ever before.&lt;/p&gt;

&lt;h2 id=&quot;workflow-improvements&quot;&gt;Workflow improvements&lt;/h2&gt;

&lt;p&gt;One of Elixir goals is to build upon the abstractions provided by Erlang/OTP and make them more productive by focusing on the tooling aspect.&lt;/p&gt;

&lt;p&gt;One of such efforts resulted in “Umbrella Projects”, which allows developers to build multiple applications side-by-side, but still run and test them in isolation when desired. Because each application contains its own configuration, supervision tree and initialization cycle, this gives developers the proper mechanisms to break monolithic applications apart without introducing the complexity of managing multiple, different repositories.&lt;/p&gt;

&lt;p&gt;Up to this release, umbrella applications shared mostly dependencies, which meant each application still had their own build directory and their own compilation cycle. Elixir v1.2 allows developers to also share both build and configuration files. This change allows teams to drastically reduce compilation times in umbrella projects by adding the following configuration to each umbrella app’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;build_path:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../../_build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;config_path:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../../config/config.exs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Umbrella applications generated with Elixir v1.2 will by default include this configuration. The downside of this approach is that applications are a bit less isolated, since configuration is now shared across all projects, although developers can revert back to the previous behaviour by simply removing the flags above.&lt;/p&gt;

&lt;p&gt;Finally, Mix will now consolidate protocols by default as we are now able to consolidate in parallel and cache the consolidation results, providing the best performance across all environments without affecting compilation times.&lt;/p&gt;

&lt;p&gt;These are great additions on top of the faster compilation times we have achieved when migrating to Erlang 18.&lt;/p&gt;

&lt;h2 id=&quot;rebar-3-support&quot;&gt;Rebar 3 support&lt;/h2&gt;

&lt;p&gt;With Rebar 3 gaining more adoption in the Erlang community, Mix is now able to fetch and compile Rebar 3 dependencies. This feature is currently experimental and therefore opt-in: if you have a Rebar 3 dependency, you can ask Mix to use Rebar 3 to compile it by passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manager: :rebar3&lt;/code&gt; option. Once configured, Mix will prompt you to install Rebar 3 if it is not yet available.&lt;/p&gt;

&lt;p&gt;The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.2.0&quot;&gt;release notes&lt;/a&gt;. Don’t forget to check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.1 released</title>
  <link href="http://elixir-lang.org/blog/2015/09/28/elixir-v1-1-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2015-09-28T00:00:00+00:00</updated>
  <id>/blog/2015/09/28/elixir-v1-1-0-released</id>
  <content type="html">&lt;p&gt;Elixir v1.1 has been released and it brings enhancements, bug fixes, performance improvements and more into Elixir.&lt;/p&gt;

&lt;p&gt;Elixir v1.1 supports both Erlang 17 and Erlang 18. This is, however, the last release supporting Erlang 17, so upgrading to Erlang 18 is advised. Elixir v1.2 will introduce features that are Erlang 18 only.&lt;/p&gt;

&lt;p&gt;On the standard library side, about 40 new functions have been added to Elixir public APIs. For example, &lt;a href=&quot;/docs/v1.1/elixir/Enum.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt;&lt;/a&gt; got &lt;a href=&quot;/docs/v1.1/elixir/Enum.html#dedup/1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dedup/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;/docs/v1.1/elixir/Enum.html#random/1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random/1&lt;/code&gt;&lt;/a&gt;, and a couple more. The &lt;a href=&quot;/docs/v1.1/elixir/String.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;&lt;/a&gt; module can now &lt;a href=&quot;/docs/v1.1/elixir/String.html#jaro_distance/2&quot;&gt;calculate the distance between strings&lt;/a&gt;. We use this feature to provide suggestions whenever an unknown task name is given when using Mix. You can also &lt;a href=&quot;/docs/v1.1/elixir/Task.html#yield/2&quot;&gt;yield to&lt;/a&gt; and &lt;a href=&quot;/docs/v1.1/elixir/Task.html#shutdown/2&quot;&gt;shutdown&lt;/a&gt; tasks in the &lt;a href=&quot;/docs/v1.1/elixir/Task.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;The applications that ship with Elixir also has seen improvements and bug fixes. &lt;a href=&quot;/docs/v1.1/ex_unit/ExUnit.html&quot;&gt;ExUnit&lt;/a&gt;, Elixir’s test framework, now has support for skipping tests via tags &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@tag :skip&lt;/code&gt;, as well as the ability to capture logs via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@tag :capture_log&lt;/code&gt;, ensuring that all log messages during the tests are captured. Even better, in case of failures, all captured log messages are printed along-side the test error report.&lt;/p&gt;

&lt;p&gt;Mix ships with a &lt;a href=&quot;/docs/v1.1/mix/Mix.Tasks.Profile.Fprof.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix profile.fprof&lt;/code&gt;&lt;/a&gt;, useful for profiling your application code. The &lt;a href=&quot;/docs/v1.1/mix/Mix.Tasks.App.Start.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix app.start&lt;/code&gt;&lt;/a&gt; has also been publicly documented. Although you likely won’t invoke it directly through the command line, it is useful when writing your own tasks that require the current application to be up and running.&lt;/p&gt;

&lt;p&gt;Mix also provides faster re-compilation times. Every time you compile your Elixir code, Mix generates a graph of the dependencies between source files. For example, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.ex&lt;/code&gt; depends on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.ex&lt;/code&gt;, every time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.ex&lt;/code&gt; changes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.ex&lt;/code&gt; must be recompiled. Elixir v1.1 improves this tracking by separating compile-time dependencies from runtime ones, recompiling a file only if a compile-time dependency changed. In projects that have a main dispatch entity, like a web-app router, we have seen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix compile&lt;/code&gt; go from recompiling the whole project to one or two files per run.&lt;/p&gt;

&lt;p&gt;We have also seen great progress on areas that go beyond the source code. In particular, we have added a &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v1.1/CODE_OF_CONDUCT.md&quot;&gt;CODE_OF_CONDUCT.md&lt;/a&gt; to guarantee our community continues to grow into a safe and welcoming place for everyone.&lt;/p&gt;

&lt;p&gt;We have also released a new ExDoc version. It provides a &lt;a href=&quot;https://hexdocs.pm/elixir/1.1.0&quot;&gt;beautiful, clean and readable way to navigate the Elixir documentation&lt;/a&gt; and it is available to any Elixir project. The latest version includes initial support for User Guides and we have more features and improvements coming on the way.&lt;/p&gt;

&lt;p&gt;The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.1.0&quot;&gt;release notes&lt;/a&gt;. Don’t forget to check &lt;a href=&quot;/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v1.0 released</title>
  <link href="http://elixir-lang.org/blog/2014/09/18/elixir-v1-0-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2014-09-18T00:00:00+00:00</updated>
  <id>/blog/2014/09/18/elixir-v1-0-0-released</id>
  <content type="html">&lt;p&gt;We are glad to announce Elixir v1.0 is finally out. It has been 8005 commits &lt;a href=&quot;https://github.com/elixir-lang/elixir/graphs/contributors?from=2011-01-12&amp;amp;to=2014-09-10&amp;amp;type=c&quot;&gt;by 189 contributors&lt;/a&gt;, including the initial commit on &lt;a href=&quot;https://github.com/elixir-lang/elixir/commit/337c3f2d569a42ebd5fcab6fef18c5e012f9be5b&quot;&gt;January 9th, 2011&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;whats-elixir&quot;&gt;What’s Elixir?&lt;/h2&gt;

&lt;p&gt;Elixir is a dynamic, functional language designed for building scalable and maintainable applications.&lt;/p&gt;

&lt;p&gt;Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.&lt;/p&gt;

&lt;h2 id=&quot;whats-new&quot;&gt;What’s new?&lt;/h2&gt;

&lt;p&gt;This release is the consolidation of all the work done through the years. With v1.0, we have reached a stable milestone for the growth of software and projects written in Elixir.&lt;/p&gt;

&lt;p&gt;Elixir will follow &lt;a href=&quot;http://semver.org&quot;&gt;semantic versioning&lt;/a&gt;, which means code written for Elixir v1.0 will continue to compile and run correctly for all versions under the v1 branch (e.g. v1.0.1, v1.1.0, v1.2.0).&lt;/p&gt;

&lt;p&gt;Elixir is composed of 6 applications, all under the same versioning constraints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/&quot;&gt;Elixir&lt;/a&gt; - the Elixir compiler, runtime and the standard library&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/eex/&quot;&gt;EEx&lt;/a&gt; - Elixir’s templating library, useful for generating any kind of document dynamically&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/ex_unit/&quot;&gt;ExUnit&lt;/a&gt; - Elixir’s unit test library, with support for concurrent testing, custom formatters, filters and much more&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/iex/&quot;&gt;IEx&lt;/a&gt; - Elixir’s interactive shell with code reloading, auto-complete, and easy access to documentation, typespecs and more&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/logger/&quot;&gt;Logger&lt;/a&gt; - the latest addition to the group, Logger provides reliable logging and configurable backends (with syslog, file and many other backends provided by the community)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/mix/&quot;&gt;Mix&lt;/a&gt; - Elixir’s build tool that generates, compiles and tests projects as well as manages your dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With v1.0, we are providing a stable platform for the community to leverage and extend, and we are extremely excited with the projects and possibilities that are ahead of us!&lt;/p&gt;

&lt;p&gt;We hope the &lt;a href=&quot;https://hex.pm&quot;&gt;Hex package manager&lt;/a&gt; will be the home of many of those projects and remember the whole Erlang ecosystem is also available to Elixir developers.&lt;/p&gt;

&lt;h2 id=&quot;expectations&quot;&gt;Expectations&lt;/h2&gt;

&lt;p&gt;We would like to elaborate on the expectations regarding Elixir v1.0. Although we expect that the vast majority of programs will remain compatible over time, it is impossible to guarantee that no future change will break any program.&lt;/p&gt;

&lt;p&gt;Under some unlikely circumstances, we may introduce changes that break existing code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Security: a security issue in the implementation may arise whose resolution requires backwards incompatible changes. We reserve the right to address such security issues.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bugs: if an application has undesired behaviour, a program that depends on the buggy behaviour may break if the bug is fixed. We reserve the right to fix such bugs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compiler front-end: improvements may be done to the compiler, introducing new warnings for ambiguous modes and providing more detailed error messages. Those can lead to compilation errors (when running with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--warning-as-errors&lt;/code&gt;) or tooling failures when asserting on specific error messages (although one should avoid such). We reserve the right to do such improvements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imports: new functions may be added to the Kernel module, which is auto-imported. They may collide with local functions defined in your modules. Collisions can be resolved in a backwards compatible fashion using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import Kernel, except: [...]&lt;/code&gt; with a list of all functions you don’t want imported from Kernel. We reserve the right to do such additions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elixir binaries are guaranteed to be backwards compatible within the same branch. Code compiled with v1.0 shall work with Elixir v1.0.1 runtime but code compiled with Elixir v1.0 should be recompiled to work with Elixir v1.1.0 onwards.&lt;/p&gt;

&lt;p&gt;These expectations also apply to future releases under the v1 branch, except for experimental features, which will be explicitly marked as such and not provide any compatibility guarantee until they are stabilized.&lt;/p&gt;

&lt;h2 id=&quot;learn-more&quot;&gt;Learn more&lt;/h2&gt;

&lt;p&gt;You can get started with Elixir via our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt;. There are quite some Elixir books out there too, now getting sent to the presses, quite a few can be found in the sidebar, which also includes screencasts and other resources.&lt;/p&gt;

&lt;p&gt;You can also learn more about Elixir by checking out &lt;a href=&quot;http://www.confreaks.com/events/elixirconf2014&quot;&gt;the videos from ElixirConf 2014&lt;/a&gt;, the first (and so far the best) Elixir conference ever! You can learn more about &lt;a href=&quot;http://www.confreaks.com/videos/4134-elixirconf2014-keynote-elixir&quot;&gt;the language history&lt;/a&gt;, &lt;a href=&quot;http://www.confreaks.com/videos/4119-elixirconf2014-opening-keynote-think-different&quot;&gt;how Elixir can change the way you code&lt;/a&gt; or &lt;a href=&quot;http://www.confreaks.com/videos/4131-elixirconf2014-otp-in-production-the-nitty-gritty-details-of-game-servers&quot;&gt;even hear stories of how Elixir is being used in production&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, by popular demand, we have &lt;a href=&quot;http://www.stickermule.com/user/1070631438/stickers&quot;&gt;released some Elixir stickers&lt;/a&gt;, which are available with a discounted price to celebrate v1.0!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.15.0 released</title>
  <link href="http://elixir-lang.org/blog/2014/08/07/elixir-v0-15-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2014-08-07T00:00:00+00:00</updated>
  <id>/blog/2014/08/07/elixir-v0-15-0-released</id>
  <content type="html">&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;We are glad to announce v0.15.0 has been released. We have spent the last 2 months tidying up the existing APIs, ensuring consistency, improving performance and more. As a result, v0.15.0 is the last minor branch before Elixir v1.0!&lt;/p&gt;

&lt;p&gt;There are also no more planned deprecations nor backward incompatible changes which means it is extremely likely that code that runs on v0.15.0 will run exactly the same on Elixir v1.0.&lt;/p&gt;

&lt;p&gt;If you are interested in the specific details for this release, &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.15.0/CHANGELOG.md&quot;&gt;please check our CHANGELOG&lt;/a&gt;. In this post, we will focus on three new features in this release: Logger, Mix aliases, the fresh Elixir Web Installer for Windows, and share some exciting news at the end!&lt;/p&gt;

&lt;h2 id=&quot;logger&quot;&gt;Logger&lt;/h2&gt;

&lt;p&gt;Elixir now ships with a new application called logger. This application provides &lt;a href=&quot;https://hexdocs.pm/logger/Logger.html&quot;&gt;the Logger module&lt;/a&gt;, which is the main API developers will use for logging:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, the code above will log the following message to your console:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10:27:39.083 [debug] hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Logger provides multiple backends to where messages are logged. For now Elixir ships only with a console backend but there are developers already working on file (with support to external log rotation) and &lt;a href=&quot;https://en.wikipedia.org/wiki/Syslog&quot;&gt;syslog&lt;/a&gt; backends.&lt;/p&gt;

&lt;p&gt;When we started Logger, the main objective was to translate Erlang messages into Elixir, so terms are formatted in Elixir syntax. Before this release, the following code&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;oops&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;logged the following report:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=ERROR REPORT==== 7-Aug-2014::10:35:59 ===
** Task &amp;lt;0.59.0&amp;gt; terminating
** Started from &amp;lt;0.53.0&amp;gt;
** When function  == #Fun&amp;lt;erl_eval.20.90072148&amp;gt;
**      arguments == []
** Reason for termination ==
** {#{'__exception__' =&amp;gt; true,'__struct__' =&amp;gt; 'Elixir.RuntimeError',message =&amp;gt; &amp;lt;&amp;lt;&quot;oops&quot;&amp;gt;&amp;gt;},
    [{'Elixir.Task.Supervised',do_apply,2,
                               [{file,&quot;lib/task/supervised.ex&quot;},{line,70}]},
     {'Elixir.Task.Supervised',async,3,
                               [{file,&quot;lib/task/supervised.ex&quot;},{line,15}]},
     {proc_lib,init_p_do_apply,3,[{file,&quot;proc_lib.erl&quot;},{line,239}]}]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, with Logger, we get this report:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10:37:22.457 [error] Task #PID&amp;lt;0.72.0&amp;gt; started from #PID&amp;lt;0.60.0&amp;gt; terminating
Function: #Function&amp;lt;20.90072148/0 in :erl_eval.expr/5&amp;gt;
    Args: []
** (exit) an exception was raised:
    ** (RuntimeError) oops
        (elixir) lib/task/supervised.ex:70: Task.Supervised.do_apply/2
        (elixir) lib/task/supervised.ex:15: Task.Supervised.async/3
        (stdlib) proc_lib.erl:239: :proc_lib.init_p_do_apply/3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As soon as we started working on Logger, we realized we could go further than simply translating Erlang messages and provide a fully featured logger library. At this moment, Logger also supports:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4 log levels: debug, info, warn and error&lt;/li&gt;
  &lt;li&gt;Custom formatting: you can specify a format string that tells exactly how messages should be logged. The default string is: “$time $metadata[$level] $message\n” but &lt;a href=&quot;https://hexdocs.pm/logger/Logger.Formatter.html&quot;&gt;many attributes are supported&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Custom translators: so you can translate log messages coming from any Erlang application into Elixir syntax&lt;/li&gt;
  &lt;li&gt;Metadata: metadata allows developers to store information in the current process that will be available to all logged messages. For example, a web application can generate a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_id&lt;/code&gt;, store it as metadata, and all messages logged during that request will be properly identified with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request_id=...&lt;/code&gt; in the log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have also relied a lot on the &lt;a href=&quot;https://www.youtube.com/watch?v=8BNpOHFvg_Q&quot;&gt;research and work done by Andrew Thompson and the folks at Basho behind Lager&lt;/a&gt; to ensure our logger is performant and robust. On this front, Logger&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;alternates between sync and async modes when logging messages to keep it performant when required but also apply back-pressure when under stress&lt;/li&gt;
  &lt;li&gt;formats and truncates messages on the client to avoid clogging the backends&lt;/li&gt;
  &lt;li&gt;provide a highwater mark around Erlang’s error_logger to avoid it from overflowing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are looking forward to everyone’s feedback on using Logger more and more in production.&lt;/p&gt;

&lt;h2 id=&quot;mix-aliases&quot;&gt;Mix aliases&lt;/h2&gt;

&lt;p&gt;Mix is Elixir’s build tool. Mix knows how to manage your dependencies, compile &amp;amp; test your projects and much more. We have designed Mix, since day one, to be extensible. Developers were always able to define new tasks by simply defining a module:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The task above can now be invoked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix hello&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Defining custom Mix tasks is useful for projects and libraries that want to better integrate with the standard development workflow for Elixir. However, it is a bit verbose for creating one-off tasks or tasks to be used only locally in a given project.&lt;/p&gt;

&lt;p&gt;Furthermore, so far Mix did not allow developers to extend existing tasks. For example, imagine you want to perform some extra work when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix clean&lt;/code&gt; is invoked. Up to this release, it was not possible.&lt;/p&gt;

&lt;p&gt;Mix aliases solve both problems by providing a simple API for defining and overriding aliases. All projects that use Mix contain a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file with the project configuration. In order to define an alias, you just need to add a new key to your project configuration:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyProject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;app:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;aliases:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aliases&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;c:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;compile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;hello:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;clean:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clean&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clean_vendor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clean_vendor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rm_rf!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the project above, we have defined three aliases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix c&lt;/code&gt; - is now a shortcut to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix compile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix hello&lt;/code&gt; - is equivalent to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mix.Tasks.Hello&lt;/code&gt; we have defined earlier, although now it is more easily defined as an alias&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix clean&lt;/code&gt; - extends the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clean&lt;/code&gt; task to ensure we invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clean_vendor/1&lt;/code&gt; afterwards&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, aliases can be three different structures:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A string containing the task and arguments to be invoked&lt;/li&gt;
  &lt;li&gt;An anonymous function (that is invoked passing the task arguments)&lt;/li&gt;
  &lt;li&gt;A list containing strings or anonymous functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find more information about aliases by reading the &lt;a href=&quot;https://hexdocs.pm/mix/&quot;&gt;Mix documentation&lt;/a&gt; (there is a section about Aliases around the middle).&lt;/p&gt;

&lt;p&gt;We also would like to thank &lt;a href=&quot;https://github.com/raynes&quot;&gt;Anthony Grimes&lt;/a&gt; for the support and &lt;a href=&quot;https://github.com/technomancy&quot;&gt;Phil Halgelberg&lt;/a&gt; for &lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;the work on Lein&lt;/a&gt; which Mix borrows a lot from.&lt;/p&gt;

&lt;h2 id=&quot;elixir-web-installer-for-windows&quot;&gt;Elixir Web Installer for Windows&lt;/h2&gt;

&lt;p&gt;At the beginning of this summer, &lt;a href=&quot;https://github.com/chyndman&quot;&gt;Chris Hyndman&lt;/a&gt; joined us as a Google Summer of Code student to help us improve the Elixir story on Windows. Chris has been essential in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Guaranteeing our test suite is green on Windows, fixing many bugs in the process;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/elixir-lang/elixir/wiki/Windows&quot;&gt;Documenting how to compile Elixir from source on Windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ensuring important projects like our &lt;a href=&quot;https://github.com/devinus/markdown/pull/7&quot;&gt;C markdown processor&lt;/a&gt; compiles on Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chris has also built an &lt;a href=&quot;https://github.com/elixir-lang/elixir-windows-setup&quot;&gt;Elixir Web Installer for Windows&lt;/a&gt;. The web installer checks all available Elixir versions and allows you to pick which one to install. It will also fetch and install Erlang in your machine in case it has not been installed yet.&lt;/p&gt;

&lt;p&gt;If you want to give Elixir and the Web Installer a try, you can &lt;a href=&quot;https://repo.hex.pm/elixir-websetup.exe&quot;&gt;download the current version here&lt;/a&gt;. And, if &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt; is your thing, remember you can also install Elixir on Windows by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cinst elixir&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;welcome-alexei&quot;&gt;Welcome Alexei!&lt;/h2&gt;

&lt;p&gt;With v0.15.0, we also would like to welcome &lt;a href=&quot;https://github.com/alco&quot;&gt;Alexei&lt;/a&gt; to the team of Elixir Maintainers! Alexei was one of the first to actively participate in the Elixir community and he has done an excellent job in guaranteeing quality throughout it, be it in the code, documentation, wiki or website.&lt;/p&gt;

&lt;p&gt;Alexei is also interested in how we can extend our tooling to the Erlang ecosystem as a whole, bringing Mix and Hex (our package manager) to more developers as well as adding tasks that are specific to Erlang projects.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;We are very close to launch Elixir v1.0! All planned features are already in Elixir’s codebase and at the moment there are only &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues?q=is%3Aopen+is%3Aissue+milestone%3Av1.0&quot;&gt;four open issues in our tracker tagged with the v1.0 milestone&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our estimated date for the first release candidate for Elixir v1.0 is August 30th. This means there is no better time to learn Elixir than now! If you haven’t started yet, you can get started with Elixir by reading &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;our Getting Started guide&lt;/a&gt; or by checking one of the many “Learning Resources” on the sidebar.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.14.0 released</title>
  <link href="http://elixir-lang.org/blog/2014/06/17/elixir-v0-14-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2014-06-17T00:00:00+00:00</updated>
  <id>/blog/2014/06/17/elixir-v0-14-0-released</id>
  <content type="html">&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;We are glad to announce v0.14.0 has been released.&lt;/p&gt;

&lt;p&gt;Our previous release, &lt;a href=&quot;/blog/2014/04/21/elixir-v0-13-0-released/&quot;&gt;v0.13.0&lt;/a&gt;, brought important changes to the language. Back then we have introduced a new associative data structure, called maps, and presented the concept of structs to replace Elixir records.&lt;/p&gt;

&lt;p&gt;With v0.14.0 we have expanded on the work started on v0.13.0, replacing records by structs and integrating OTP behaviours, applications, and configurations into Mix.&lt;/p&gt;

&lt;h2 id=&quot;derive&quot;&gt;@derive&lt;/h2&gt;

&lt;p&gt;Maps are Elixir’s new associative data structure:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With maps, Elixir also introduced structs, that are basically raw, named maps:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defstruct&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; %User{name: &quot;jose&quot;, age: 0}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Structs allow us to provide default values for a map fields. Structs also validate, at compilation time, that all fields given during the struct construction are valid fields. The following, for example, would fail:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;unknown:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ** (CompileError) iex:2: unknown key :unknown for struct User&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We say structs are &lt;em&gt;raw&lt;/em&gt; because they do not implement any of the protocols that are implemented for maps  by default. For instance, we can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.each/2&lt;/code&gt; for a map, which uses the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;foo:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Got foo: bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But such a call would fail for the User struct:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; ** (Protocol.UndefinedError) protocol Enumerable not implemented for %User{age: 0, name: &quot;&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, in many situations, we may want to enumerate the keys and values in a struct. Before this release, it would require us to manually implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; protocol for every struct.&lt;/p&gt;

&lt;p&gt;Elixir v0.14.0 solves this issue by introducing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@derive&lt;/code&gt; which allows us to dynamically derive implementations for structs based on the implementation for maps:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@derive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defstruct&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Got __struct__: Elixir.User&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Got name: jose&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Got age: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The deriving functionality can be customized by implementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PROTOCOL.Map.__deriving__/3&lt;/code&gt;. For example, a JSON protocol could define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.Map.__deriving__/3&lt;/code&gt; function that derives specific implementations for every struct. Such implementations could access the struct fields and generate a JSON template at compilation time, avoiding work at runtime.&lt;/p&gt;

&lt;h2 id=&quot;protocol-consolidation&quot;&gt;Protocol consolidation&lt;/h2&gt;

&lt;p&gt;In the example above, when we called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.each/2&lt;/code&gt;, it invoked the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; protocol internally, which then checks if there is an implementation available for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; struct. This means that dispatching a protocol incurs some overhead to check if the implementation is available or not.&lt;/p&gt;

&lt;p&gt;While this behaviour is useful for development, in production all implementations for all protocols are usually known up-front, so we could avoid this overhead by doing a direct dispatch. That’s exactly what protocol consolidation does.&lt;/p&gt;

&lt;p&gt;Protocol consolidation checks all code paths in your project, looking for all protocols and all implementions. When all implementations are found it will recompile all protocols to have quick dispatch rules.&lt;/p&gt;

&lt;p&gt;You can invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Protocol.consolidate/2&lt;/code&gt; to manually consolidate protocols. However, if you are inside a Mix project, you can consolidate all protocols by simply invoking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix compile.protocols&lt;/code&gt;. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix help compile.protocols&lt;/code&gt; in your terminal to get more information. This task should be invoked when deploying to production and we have opened issues in the Elixir buildpack as well as in the existing build tools so they automatically consolidade protocols for you.&lt;/p&gt;

&lt;h2 id=&quot;nested-access&quot;&gt;Nested access&lt;/h2&gt;

&lt;p&gt;With v0.14.0, Elixir introduced functionality to traverse deeply nested data structures. To show this functionality let’s imagine we have a gaming application where users can be in different dungeons. Each dungeon may have many rooms and users can talk to each other only if they are in the same room.&lt;/p&gt;

&lt;p&gt;We can model the game’s dungeons with a Dungeon struct:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dungeon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;rooms:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Dungeon can have many rooms and we keep them in a map, with the room id as key, and the Room struct as value:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Room&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;users:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HashDict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A room has users and since we can possibly have hundreds of them, we store them in a HashDict, with the user id as key. Finally, the user may participate from different devices, so we need to keep a set of device codes in each user:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;username:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;device_codes:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The nested access functionality that ships with Elixir allows us to quickly access or update a nested value. For example, given a dungeon named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dungeon&lt;/code&gt;, we can access all the device codes for a given user as follow:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dungeon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device_codes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the nested access functionality, we can now update a nested path directly too. For example, if a user changes his name, we can change it directly with:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;put_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dungeon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new username&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the user signs out from one device, we can delete the code from that particular device:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;update_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dungeon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rooms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;room_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device_codes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_in/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_in/2&lt;/code&gt; are macros that work as syntax sugar for the lower-level &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_in/3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update_in/3&lt;/code&gt;, that expects the whole path to be given as a list:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;put_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dungeon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rooms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;room_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new username&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can read more information about nested access in &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt;the Access protocol documentation&lt;/a&gt; and in the docs for &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#get_in/2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_in/2&lt;/code&gt;&lt;/a&gt; and friends.&lt;/p&gt;

&lt;h2 id=&quot;mix-and-otp&quot;&gt;Mix and OTP&lt;/h2&gt;

&lt;p&gt;OTP is a set of libraries that ships with Erlang. Erlang developers use OTP to build robust, fault-tolerant applications.&lt;/p&gt;

&lt;p&gt;In v0.14.0, Elixir closely integrates with OTP by providing modules for building &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;servers&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;supervisors&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;applications&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have also introduced the concepts of &lt;a href=&quot;https://hexdocs.pm/elixir/Agent.html&quot;&gt;agents&lt;/a&gt; and the idea of &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html&quot;&gt;tasks&lt;/a&gt;, which can be supervised and distributed. Application configuration has been made first class in Mix, allowing developers to configure their dependencies, sometimes even using different configurations per environment (dev, test or prod by default).&lt;/p&gt;

&lt;p&gt;This functionality is at the core of building applications in Erlang and Elixir. For this reason we have published a new guide called &lt;a href=&quot;/getting-started/mix-otp/introduction-to-mix.html&quot;&gt;Mix and OTP&lt;/a&gt; where we build a distributed key-value store to help explore all concepts mentioned above. The guide is quite fresh, so please do submit pull requests for typos and mistakes. Feedback is also welcome!&lt;/p&gt;

&lt;p&gt;Note “Mix and OTP” is our most advanced guide so far and it expects you to have read our introductory guide. In case you haven’t yet, you can &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;get started here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;With v0.14.0 we have reached many of the milestones &lt;a href=&quot;/blog/2014/04/21/elixir-v0-13-0-released/#the-next-steps&quot;&gt;we have set in the previous release&lt;/a&gt;. This brings us closer to Elixir v1.0 and only a handful of tasks are pending:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Provide an Elixir logger that knows how to print and format Elixir exceptions and stacktraces. Work has already started on this front as Elixir already prints errors coming from the application startup nicely;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Continue the work of cleaning up the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html&quot;&gt;Kernel module&lt;/a&gt;. In v0.14.0, we added alternatives for conversion functions, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;integer_to_binary/1&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer.to_string/1&lt;/code&gt;, now they must be properly deprecated and removed;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Support mix aliases, allowing developers to easily define Mix shortcuts for their favorite tasks;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solve all remaining &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues?state=open&quot;&gt;open issues&lt;/a&gt;. We have always kept the issues tracker tidy and there is little work left to solve the existing issues. Note we have also listed all &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues?labels=Note%3ABackwards+incompatible&amp;amp;page=1&amp;amp;state=open&quot;&gt;upcoming backwards incompatible changes&lt;/a&gt;. Many of those changes will actually be deprecated first and developers should be able to follow along without breaking changes in minor releases, but they are breaking changes in the sense they work in v0.14.0 but will work differently by the time v1.0 is released;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all for now! Elixir developers can see &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v0.14.0&quot;&gt;a summary of all changes in v0.14.0 in the release notes&lt;/a&gt;. In case you are new around here, you can get started with Elixir by reading &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;our Getting Started guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope to see you all this July at &lt;a href=&quot;http://elixirconf.com/&quot;&gt;ElixirConf&lt;/a&gt;!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.13.0 released, hex.pm and ElixirConf announced</title>
  <link href="http://elixir-lang.org/blog/2014/04/21/elixir-v0-13-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2014-04-21T00:00:00+00:00</updated>
  <id>/blog/2014/04/21/elixir-v0-13-0-released</id>
  <content type="html">&lt;p&gt;Hello folks!&lt;/p&gt;

&lt;p&gt;Elixir v0.13.0 has been released. It contains changes that will effectively shape how developers will write Elixir code from now on, making it an important milestone towards v1.0! On this post we are going to cover some of those changes, the road to Elixir v1.0, as well as the announcement of &lt;a href=&quot;https://hex.pm&quot;&gt;hex.pm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we go into the changes, let’s briefly talk about ElixirConf!&lt;/p&gt;

&lt;h2 id=&quot;elixirconf&quot;&gt;ElixirConf&lt;/h2&gt;

&lt;p&gt;We are excited to announce &lt;a href=&quot;http://elixirconf.com&quot;&gt;ElixirConf&lt;/a&gt;, the first ever Elixir conference, happening July 25-26, 2014 in Austin, TX. The Call For Proposals is open and we are waiting for your talks!&lt;/p&gt;

&lt;p&gt;The registration is also open and we hope you will join us on this exciting event. We welcome Elixir developers and enthusiasts that are looking forward to be part of our thrilling community!&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In a nutshell, here is what new:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Elixir now runs on and requires Erlang R17;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With Erlang R17, Elixir also adds support for maps, which are key-value data structures that supports pattern matching. We’ll explore maps, their features and limitations in this post;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elixir v0.13 also provides structs, an alternative to Elixir records. Structs are more flexible than records, provide faster polymorphic operations, and still provide the same compile-time guarantees many came to love in records;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; was rewritten from scratch. The previous guide was comprised of 7 chapters and was about to become 2 years old. The new guide features 20 chapters, it explores the new maps and structs (which are part of this release), and it goes deeper into topics like IO and File handling. It also includes an extra guide, still in development, about &lt;a href=&quot;/getting-started/meta/quote-and-unquote.html&quot;&gt;Meta-Programming in Elixir&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elixir v0.13 provides a new comprehension syntax that not only works with lists, but with any &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt;&lt;/a&gt;. The output of a comprehension is also extensible via the &lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocol;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mix, Elixir’s build tool, has been improved in order to provide better workflows when compiling projects and working with dependencies;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are many other changes, like the addition of &lt;a href=&quot;https://hexdocs.pm/elixir/StringIO.html&quot;&gt;StringIO&lt;/a&gt;, support for &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;tags and filters in ExUnit&lt;/a&gt; and more. Please check the &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.13.0/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; for the complete list.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even with all those improvements, Elixir v0.13.0 is backwards compatible with Elixir v0.12.5 and upgrading should be a clean process.&lt;/p&gt;

&lt;h2 id=&quot;maps&quot;&gt;Maps&lt;/h2&gt;

&lt;p&gt;Maps are key-value data structures:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maps do not have a explicit ordering and keys and values can be any term.&lt;/p&gt;

&lt;p&gt;Maps can be pattern matched on:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;other&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MatchError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;side&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A map pattern will match any map that has all the keys specified in the pattern. The values for the matching keys must also match. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%{&quot;hello&quot; =&amp;gt; world}&lt;/code&gt; will match any map that has the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hello&quot;&lt;/code&gt; and assign the value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;world&lt;/code&gt;, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%{&quot;hello&quot; =&amp;gt; &quot;world&quot;}&lt;/code&gt; will match any map that has the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hello&quot;&lt;/code&gt; with value equals to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;world&quot;&lt;/code&gt;. An empty map pattern (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%{}&lt;/code&gt;) will match all maps.&lt;/p&gt;

&lt;p&gt;Developers can use the functions in the &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&lt;/code&gt; module&lt;/a&gt; to work with maps. For more information on maps and how they compare to other associative data structures in the language, please check the &lt;a href=&quot;/getting-started/keywords-and-maps.html&quot;&gt;Maps chapter in our new Getting Started guide&lt;/a&gt;. Elixir Sips has also released two episodes that cover maps (&lt;a href=&quot;http://elixirsips.com/episodes/054_maps_part_1.html&quot;&gt;part 1&lt;/a&gt; and &lt;a href=&quot;http://elixirsips.com/episodes/055_maps_part_2.html&quot;&gt;part 2&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Maps also provide special syntax for creating, accessing and updating maps with atom keys:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;meg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;meg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;meg&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both access and update syntax above expect the given keys to exist. Trying to access or update a key that does not exist raises an error:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;address:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;:maps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we will see, this functionality becomes very useful when working with structs.&lt;/p&gt;

&lt;h2 id=&quot;structs&quot;&gt;Structs&lt;/h2&gt;

&lt;p&gt;Structs are meant to replace Elixir records. Records in Elixir are simply tuples supported by modules which store record metadata:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defrecord&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Internally, this record is represented as the following tuple:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# {tag, name, age}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Records can also be created and pattern matched on:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pattern matching works because the record meta-data is stored in the User module which can be accessed when building patterns.&lt;/p&gt;

&lt;p&gt;However, records came with their own issues. First of all, since records were made of data (the underlying tuple) and a module (functions/behaviour), they were frequently misused as an attempt to bundle data and behaviour together in Elixir, for example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defrecord&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john doe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;john&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only that, records were often slow in protocol dispatches because every tuple can potentially be a record, sometimes leading to expensive checks at runtime.&lt;/p&gt;

&lt;p&gt;Since maps are meant to replace many cases of records in Erlang, we saw with the introduction of maps the perfect opportunity to revisit Elixir records as well. In order to understand the reasoning behind structs, let’s list the features we got from Elixir records:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A way to organize data by fields&lt;/li&gt;
  &lt;li&gt;Efficient in-memory representation and operations&lt;/li&gt;
  &lt;li&gt;Compile-time structures with compile-time errors&lt;/li&gt;
  &lt;li&gt;The basic foundation for polymorphism in Elixir&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maps naturally solve issues &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.&lt;/code&gt; above. In particular, maps that have same keys share the same key-space in memory. That’s why the update operation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%{map | ...}&lt;/code&gt; we have seen above is relevant: if we know we are updating an existing key, the new map created as result of the update operation can share the same key space as the old map without extra checks. For more details on why Maps are efficient, I would recommend &lt;a href=&quot;http://joearms.github.io/2014/02/01/big-changes-to-erlang.html&quot;&gt;reading Joe’s blog post on the matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Structs were added to address features &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.&lt;/code&gt;. A struct needs to be explicitly defined via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defstruct&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defstruct&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; struct can be created without a need to explicitly list all necessary fields:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;john&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Trying to create a struct with an unknown key raises an error during compilation:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;address:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CompileError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Furthermore, every struct has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__struct__&lt;/code&gt; field which contains the struct name:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__struct__&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__struct__&lt;/code&gt; field is also used for polymorphic dispatch in protocols, addressing issue &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is interesting to note that structs solve both drawbacks we have earlier mentioned regarding records. Structs are purely data and polymorphic dispatch is now faster and more robust as it happens only for explicitly tagged structs.&lt;/p&gt;

&lt;p&gt;For more information on structs, check out the &lt;a href=&quot;/getting-started/structs.html&quot;&gt;Structs chapter in the getting started guide&lt;/a&gt; (you may also want to read the new &lt;a href=&quot;/getting-started/protocols.html&quot;&gt;Protocols chapter&lt;/a&gt; after it).&lt;/p&gt;

&lt;h2 id=&quot;maps-structs-and-the-future&quot;&gt;Maps, structs and the future&lt;/h2&gt;

&lt;p&gt;With the introduction of maps and structs, some deprecations will arrive on upcoming releases. First of all, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListDict&lt;/code&gt; data structure is being deprecated and phased out. Records are also being deprecated from the language, although it is going to be a longer process, as many projects and Elixir itself still use records in diverse occasions.&lt;/p&gt;

&lt;p&gt;Note though only Elixir records are being deprecated. Erlang records, which are basically syntax sugar around tuples, will remain in the language for the rare cases Elixir developers need to interact with Erlang libraries that provide records. In particular, the &lt;a href=&quot;https://hexdocs.pm/elixir/Record.html&quot;&gt;Record&lt;/a&gt; has been updated to provide the new Record API (while keeping the old one for backwards compatibility).&lt;/p&gt;

&lt;p&gt;Finally, structs are still in active development and new features, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@derive&lt;/code&gt;, should land in upcoming Elixir releases. For those interested, the &lt;a href=&quot;https://gist.github.com/josevalim/b30c881df36801611d13&quot;&gt;original maps and structs proposal is still available&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;comprehensions&quot;&gt;Comprehensions&lt;/h2&gt;

&lt;p&gt;Erlang R17 also introduced recursion to anonymous functions. This feature, while still not available from Elixir, allows Elixir to provide a more flexible and extensible comprehension syntax.&lt;/p&gt;

&lt;p&gt;The most common use case of a comprehension are &lt;a href=&quot;https://en.wikipedia.org/wiki/List_comprehension&quot;&gt;list comprehensions&lt;/a&gt;. For example, we can get all the square values of elements in a list as follows:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We say the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n &amp;lt;- [1, 2, 3, 4]&lt;/code&gt; part is a comprehension generator. In previous Elixir versions, Elixir supported only lists in generators. In Elixir v0.13.0, any Enumerable is supported (ranges, maps, etc):&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As in previous Elixir versions, there is also support for a bitstring generator. In the example below, we receive a stream of RGB pixels as a binary and break it down into triplets:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;213&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;213&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;132&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, a comprehension returns a list as a result. However the result of a comprehension can be inserted into different data structures by passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:into&lt;/code&gt; option. For example, we can use bitstring generators with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:into&lt;/code&gt; option to easily remove all spaces in a string:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; hello world &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;into:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sets, maps and other dictionaries can also be given with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:into&lt;/code&gt; option. In general, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:into&lt;/code&gt; accepts any structure as long as it implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collectable&lt;/code&gt; protocol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO&lt;/code&gt; module provides streams, that are both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Collectable&lt;/code&gt;. You can implement an echo terminal that returns whatever is typed into the shell, but in upcase, using comprehensions:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:stdio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;into:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&amp;gt;&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes comprehensions useful not only for working with in-memory collections but also with files, io devices, and other sources. In future releases, we will continue exploring how to make comprehensions more expressive, following in the footsteps of other functional programming research on the topic (like Comprehensive Comprehensions and Parallel Comprehensions).&lt;/p&gt;

&lt;h2 id=&quot;mix-workflows&quot;&gt;Mix workflows&lt;/h2&gt;

&lt;p&gt;The last big change we want to discuss in this release are the improvements done to Mix, Elixir’s build tool. Mix is an essential tool to Elixir developers and helps developers to compile their projects, manage their dependencies, run tests and so on.&lt;/p&gt;

&lt;p&gt;In previous releases, Mix was used to download and compile dependencies per environment. That meant the usual workflow was less than ideal: every time a dependency was updated, developers had to explicitly fetch and compile the dependencies for each environment. The workflow would be something like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mix deps.get
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mix compile
&lt;span class=&quot;nv&quot;&gt;$ MIX_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;mix deps.get
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mix &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Elixir v0.13, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix deps.get&lt;/code&gt; only fetches dependencies and it does so across all environments (unless an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--only&lt;/code&gt; flag is specified). To support this new behaviour, dependencies now support the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:only&lt;/code&gt; option:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ecto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;elixir-lang/ecto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hackney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;benoitc/hackney&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dependencies now are also automatically compiled before you run a command. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix compile&lt;/code&gt; will automatically compile pending dependencies for the current environment. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test&lt;/code&gt; will do the same for test dependencies and so on, interrupting less the developer workflow.&lt;/p&gt;

&lt;h2 id=&quot;hexpm&quot;&gt;hex.pm&lt;/h2&gt;

&lt;p&gt;This release also marks the announcement of &lt;a href=&quot;https://hex.pm/&quot;&gt;hex.pm&lt;/a&gt;, a package manager for the Erlang VM. Hex allows you to package and publish your projects while fetching them and performing dependency resolution in your applications.&lt;/p&gt;

&lt;p&gt;Currently Hex only integrates with Mix and contributions to extend it to other tools and other languages in the Erlang VM are welcome!&lt;/p&gt;

&lt;h2 id=&quot;the-next-steps&quot;&gt;The next steps&lt;/h2&gt;

&lt;p&gt;As seen in this announcement, this release dictates many of the developments that will happen in Elixir and its community in the following weeks. All projects are recommended to start moving from records to structs, paving the way for the deprecation of records before 1.0.&lt;/p&gt;

&lt;p&gt;The next months will also focus on integrating Elixir more tightly to OTP. During the keynote at Erlang Factory, &lt;a href=&quot;https://www.youtube.com/watch?v=Djv4C9H9yz4&quot;&gt;Catalyse Change&lt;/a&gt;, Dave Thomas and I argued that there are many useful patterns, re-implemented everyday by developers, that could make development more productive within the Erlang VM if exposed accordingly.&lt;/p&gt;

&lt;p&gt;That said, in the next months we plan to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integrate applications configuration (provided by OTP) right into Mix;&lt;/li&gt;
  &lt;li&gt;Provide an Elixir logger that knows how to print and format Elixir exceptions and stacktraces;&lt;/li&gt;
  &lt;li&gt;Properly expose the functionality provided by Applications, Supervisors, GenServers and GenEvents and study how they can integrate with Elixir. For example, how to consume events from GenEvent as a &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;stream of data&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Study how patterns like tasks and agents can be integrated into the language, often picking up the lessons learned by libraries like &lt;a href=&quot;http://e2project.org/erlang.html&quot;&gt;e2&lt;/a&gt; and &lt;a href=&quot;http://www.erlang.org/doc/man/rpc.html&quot;&gt;functionality exposed by OTP itself&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Rewrite the Mix and ExUnit guides to focus on applications and OTP as a whole, rebranding it to “Building Apps with Mix and OTP”;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more about Elixir in our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; and download this release in the &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v0.13.0&quot;&gt;v0.13 announcement&lt;/a&gt;. We hope to see you at &lt;a href=&quot;http://elixirconf.com/&quot;&gt;ElixirConf&lt;/a&gt; as well as pushing your packages to &lt;a href=&quot;https://hex.pm/&quot;&gt;hex.pm&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.12.0 released</title>
  <link href="http://elixir-lang.org/blog/2013/12/15/elixir-v0-12-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-12-15T00:00:00+00:00</updated>
  <id>/blog/2013/12/15/elixir-v0-12-0-released</id>
  <content type="html">&lt;p&gt;Elixir v0.12.0 has been released with improved enumerables, build patterns and welcoming a new member to our team.&lt;/p&gt;

&lt;h2 id=&quot;enumerables&quot;&gt;Enumerables&lt;/h2&gt;

&lt;p&gt;In previous versions, the Enumerable protocol was based on reduce/fold, and while it is very efficient for operations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;, it was sub-optimal for operations that need to halt, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take_while&lt;/code&gt;, and it made it impossible for operations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; to be implemented.&lt;/p&gt;

&lt;p&gt;In v0.12.0, Elixir’s Enumerable protocol has been extended to allow suspension and halting mechanisms, making operations like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take&lt;/code&gt; simpler and operations that require interleaving, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt;, possible.&lt;/p&gt;

&lt;p&gt;Although most users don’t need to concern with the implementation of the Enumerable protocol, the side-effect is that both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; modules have been considerably extended and improved in this release, with more than 15 new functions added to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; module.&lt;/p&gt;

&lt;h2 id=&quot;mix&quot;&gt;Mix&lt;/h2&gt;

&lt;p&gt;The tool that received most improvements in this release was Mix. The biggest change is that Mix no longer compiles projects in place but to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_build&lt;/code&gt; directory. For example, take the &lt;a href=&quot;https://github.com/elixir-ecto/ecto&quot;&gt;Ecto project&lt;/a&gt; that &lt;a href=&quot;https://github.com/elixir-ecto/ecto/blob/v0.1.0/mix.exs#L25-L30&quot;&gt;depends on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postgrex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poolboy&lt;/code&gt;&lt;/a&gt;. When compiled, all the artifacts will be placed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_build&lt;/code&gt; directory like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_build
└── shared
    └── lib
        ├── ecto
        │   └── ebin
        |   └── priv
        ├── poolboy
        │   └── ebin
        └── postgrex
            └── ebin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For those familiar with Erlang’s OTP, this is similar to the structure used by OTP when releasing your software. So this new structure makes our software one step close to production and guarantee it is designed correctly since day 1.&lt;/p&gt;

&lt;p&gt;This approach comes with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:build_per_environment&lt;/code&gt; option which, when set to true, creates a different build per environment (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt; or more). Extremely useful when a project compile different artifacts depending on the compilation environment.&lt;/p&gt;

&lt;p&gt;Mix has also added support to optional dependencies and improved common patterns, like the usage of umbrella apps.&lt;/p&gt;

&lt;h2 id=&quot;welcome-eric&quot;&gt;Welcome, Eric!&lt;/h2&gt;

&lt;p&gt;With this release, we also want to welcome &lt;a href=&quot;https://github.com/ericmj&quot;&gt;Eric MJ&lt;/a&gt; to the Elixir Team. He has done fantastic work on Elixir, helping us maintain the codebase and working on many of the important features from previous releases and now many more to come.&lt;/p&gt;

&lt;p&gt;Eric is also maintainer of both &lt;a href=&quot;https://github.com/elixir-ecto/ecto&quot;&gt;Ecto&lt;/a&gt; and &lt;a href=&quot;https://github.com/elixir-ecto/postgrex&quot;&gt;Postgrex&lt;/a&gt; projects. Which are proving to be very useful to the Elixir community too!&lt;/p&gt;

&lt;h2 id=&quot;tidying-up&quot;&gt;Tidying up&lt;/h2&gt;

&lt;p&gt;There were other small changes, like additions to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float&lt;/code&gt; module and improvements the to the typespec syntax. To see the full list, please &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.12.0/CHANGELOG.md&quot;&gt;see the CHANGELOG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give Elixir a try! You can start with our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;getting started guide&lt;/a&gt;, or check out our sidebar for other learning resources.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir's new continuable enumerators</title>
  <link href="http://elixir-lang.org/blog/2013/12/11/elixir-s-new-continuable-enumerators/"/>
  
  <author>
    <name>Peter Minten</name>
  </author>
  
  <updated>2013-12-11T00:00:00+00:00</updated>
  <id>/blog/2013/12/11/elixir-s-new-continuable-enumerators</id>
  <content type="html">&lt;p&gt;As you may have heard in the upcoming 0.12.0 release Elixir’s enumerators gained
some new features. In this blog post I’ll explain what’s new, what it enables
and how it works.&lt;/p&gt;

&lt;p&gt;For those of you who use the development version of Elixir these changes are
already available. For the exact differences in code you can look at the
&lt;a href=&quot;https://github.com/elixir-lang/elixir/pull/1922&quot;&gt;relevant pull request&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-recap-of-enumerators-and-some-terminology&quot;&gt;A recap of enumerators, and some terminology&lt;/h2&gt;

&lt;p&gt;The basic idea of enumerators is that you traverse some data structure or
resource (lines from a file) by putting the thing that is traversed in control.
That is if you’re reading from a file you have a loop that reads lines from a
file and for each line calls a function. Just calling a function isn’t all that
useful for most tasks as there’d be no way to remember previous lines (ugly
hacks aside), so some accumulator value is passed to the function and a new
accumulator is returned by it.&lt;/p&gt;

&lt;p&gt;For example here’s how you can count the total length of strings in a list.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Often the actual call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable.reduce/3&lt;/code&gt; is hidden inside another
function.  Say that we want to define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum&lt;/code&gt; function. The usual way is to
write it like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This could get called as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.map(1..10, &amp;amp;(&amp;amp;1 * &amp;amp;1)) |&amp;gt; sum()&lt;/code&gt; to get the sum of
squares. Desugaring this means &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum(Enum.map(1..10, &amp;amp;(&amp;amp;1 * &amp;amp;1)))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The general pattern is this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initial_consumer_acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;something_that_returns_an_enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice the slightly uncommon terminology of “outer function” and
“consumer” (normally called an “iteratee”). That’s intentional, naming an
iteratee a consumer better reflects that it consumes values.&lt;/p&gt;

&lt;p&gt;Along the same lines I call the reduce function for a specific enumerable a
producer, it produces values which are given to a consumer.&lt;/p&gt;

&lt;p&gt;The outer function is the function to which the enumerable is passed.
Syntactically it looks like this is the consumer, but it’s really a function
that combines the producer and the consumer. For simple consumers (say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn x,
acc -&amp;gt; length(x) + acc end&lt;/code&gt;) the consumer will often be written directly in the
source text of the outer function, but let’s try to keep those concepts
distinguished.&lt;/p&gt;

&lt;h2 id=&quot;two-issues-with-classic-elixir-enumerators&quot;&gt;Two issues with classic Elixir enumerators&lt;/h2&gt;

&lt;p&gt;Enumerators are great, but they have their limitations. One issue is that it’s
not possible to define a function that only returns at most 3 elements without
traversing all elements or using ugly tricks such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw&lt;/code&gt; (with a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try...catch&lt;/code&gt; construct in the outer function). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw&lt;/code&gt; trick is used in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; to implement functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.take/2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.take_while/2&lt;/code&gt;. It works, but it’s not what I’d call stylish.&lt;/p&gt;

&lt;p&gt;A bigger problem, that doesn’t have a workaround, is that there’s no way to
interleave two enumerables. That is, it’s not possible to define a function that
for two enumerables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; returns a list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[A1, B1, A2, B2, A3, ...]&lt;/code&gt;
(where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A1&lt;/code&gt; is the first element of A) without first traversing both lists and
then interleaving the collected values. Interleaving is important because it’s
the basis of a zip function. Without interleaving you cannot implement
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.zip/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The underlying problem, in both cases, is that the producer is fully in control.
The producer simply pushes out as many elements to the consumer as it wants and
then says “I’m done”. There’s no way aside from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw/raise&lt;/code&gt; for a consumer
to tell a producer “stop producing”. There is definitely no way to tell a
producer “stop for now but be prepared to continue where you left off later”.&lt;/p&gt;

&lt;h2 id=&quot;power-to-the-consumer&quot;&gt;Power to the consumer!&lt;/h2&gt;

&lt;p&gt;At CodeMeshIO José Valim and Jessica Kerr sat down and discussed this problem.
They came up with a solution inspired by a &lt;a href=&quot;http://themonadreader.files.wordpress.com/2010/05/issue16.pdf&quot;&gt;Monad.Reader
article&lt;/a&gt; (third
article). It’s an elegant extension of the old system, based on a simple idea.
Instead of returning only an accumulator at every step (for every produced
value) the consumer returns a combination of an accumulator and an instruction
to the producer. Three instructions are available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:cont&lt;/code&gt; - Keep producing.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:halt&lt;/code&gt; - Stop producing.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:suspend&lt;/code&gt; - Temporarily stop producing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A consumer that always returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:cont&lt;/code&gt; makes the producer behave exactly the
same as in the old system. A consumer may return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:halt&lt;/code&gt; to have the producer
terminate earlier than it normally would.&lt;/p&gt;

&lt;p&gt;The real magic is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:suspend&lt;/code&gt; though. It tells a producer to return the
accumulator and a continuation function.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:suspended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:suspend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running this code &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_&lt;/code&gt; will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; (1 + 2) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cont&lt;/code&gt; will be a
function. We’ll get back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cont&lt;/code&gt; in a minute but first take a look at some of
the new elements here. The initial accumulator has an instruction as well, so
you could suspend or halt a producer immediately, if you really want to. The
value passed to the consumer (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;) does not contain the instruction. The return
value of the producer also has a symbol in it. Like with the instructions of
consumers there are three possible values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:done&lt;/code&gt; - Completed normally.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:halted&lt;/code&gt; - Consumer returned a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:halt&lt;/code&gt; instruction.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:suspended&lt;/code&gt; - Consumer return a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:suspend&lt;/code&gt; instruction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together with the other values returned the possible return values from a
producer are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :done, acc } | { :halted, acc } | { :suspended, acc,
continuation }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Back to the continuation. A continuation is a function that given an accumulator
returns a new producer result. In other words it’s a way to swap out the
accumulator but keep the same producer in the same state.&lt;/p&gt;

&lt;h2 id=&quot;implementing-interleave&quot;&gt;Implementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interleave&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Using the power of suspension it is now possible to create an interleave
function.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Interleave&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:suspend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;af&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;af&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:suspended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:suspended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;do_interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:halted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;finish_interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:halted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;finish_interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish_interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_or_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_or_b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:suspended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_or_b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;finish_interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_or_b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Interleave&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interleave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [1, :a, 2, :b, :c, :d]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets go through this step by step. The main &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interleave&lt;/code&gt; function first
partially applies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable.reduce/3&lt;/code&gt; to get function values that work just
like the continuations. This makes things easier for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_interleave&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_interleave&lt;/code&gt; function first calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;af&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interleave&lt;/code&gt;) with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; function so that the available element of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; gets added to the
accumulator and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; immediately suspends afterwards. Then the same is done for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;. If either producer is done all the remaining elements of the other get
added to the accumulator list.&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acc&lt;/code&gt; is sometimes used to mean a tuple like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :cont, x }&lt;/code&gt; and
sometimes the accumulator value proper. It’s a bit confusing, yes.&lt;/p&gt;

&lt;p&gt;This example shows that through clever combination of an outer function
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_interleave&lt;/code&gt;) and an inner function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; two producers can be interleaved.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The new system of enumerators certainly makes things a bit more complicated but
also adds power. I suspect many interesting and “interesting” functions can be
built on top of it.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.11.0 released</title>
  <link href="http://elixir-lang.org/blog/2013/11/05/elixir-v0-11-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-11-05T00:00:00+00:00</updated>
  <id>/blog/2013/11/05/elixir-v0-11-0-released</id>
  <content type="html">&lt;p&gt;After 4 months, Elixir v0.11.0 has been released with 832 commits since the previous minor release, done by more than 40 contributors. Although we have some great features in this release, the major focus in those 4 months was improving the common patterns used by the community and streamlining the existing workflows.&lt;/p&gt;

&lt;h2 id=&quot;iex&quot;&gt;IEx&lt;/h2&gt;

&lt;p&gt;One of the tools that most received improvements in this release was our interactive shell. Such improvements come as no surprise as Elixir developers spend a good amount of time in the shell, which is great for development, allowing you to quickly try and load code, to production, where IEx can connect to remote nodes to inspect production information.&lt;/p&gt;

&lt;p&gt;The IEx helper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt;, responsible for showing documentation for existing modules and functions, has now been improved to rely on ANSI codes and nicely format the documentation. let’s take a look at the docs for the String module:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/string-help.png&quot; alt=&quot;String module docs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This change goes in line with Elixir’s goal of providing first-class documentation, which makes documentation easily accessible at runtime, support to doctests and more.&lt;/p&gt;

&lt;p&gt;In this new release, IEx also supports a very simple debugging mechanism called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx.pry&lt;/code&gt;. Let’s see an screenshot of it in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/iex-pry.png&quot; alt=&quot;IEx pry example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Elixir, your code runs in many processes that talk to each other and the Elixir shell is no different. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx.pry&lt;/code&gt; allows another process to take over the shell, allowing the developer to inspect the binding and halt the execution of the process being “pried” (i.e. the one that invoked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx.pry&lt;/code&gt;). We called this feature &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry&lt;/code&gt; as a gentle reminder that you can only inspect existing information, you cannot change the binding over a pried process. For more information, check the docs for &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html#pry/1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx.pry/1&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exunit&quot;&gt;ExUnit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/blog/2013/07/13/elixir-v0-10-0-released/&quot;&gt;In the previous release&lt;/a&gt;, we introduced great changes to ExUnit, like the support for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--trace&lt;/code&gt; option. This time we continued pushing improvements, like adding profiling to test cases (times can be seen with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--trace&lt;/code&gt; option), paving the way for other features like emitting warnings for test cases that are too slow.&lt;/p&gt;

&lt;p&gt;Another simple but significant change in ExUnit was the change in the default formatter to print changes as they come, instead of waiting until the suite is done running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/fast-fail.png&quot; alt=&quot;ExUnit Fast Fail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This change allows developer to get faster feedback from their test suites.&lt;/p&gt;

&lt;h2 id=&quot;mix&quot;&gt;Mix&lt;/h2&gt;

&lt;p&gt;Since the early days, Elixir took ahold of the compilation process in order to provide a seamless compilation experience. &lt;a href=&quot;/blog/2012/04/24/a-peek-inside-elixir-s-parallel-compiler/&quot;&gt;Elixir’s ParallelCompiler&lt;/a&gt; was introduced even before the first official release, allowing developers to harness all the cores in their computer to compile Elixir code. However, once the first release came out, every time you changed any file, the whole project had to be recompiled.&lt;/p&gt;

&lt;p&gt;In the past releases we have improved this process to only compile files that changed and their dependencies. For v0.11.0, we have improved this process to be faster and less conservative than the previous version.&lt;/p&gt;

&lt;p&gt;Mix has also improved support for umbrella projects, which are projects that contain multiple OTP applications, essential for building large projects. The current release allows sharing of dependencies between projects and faster and dependency resolution times.&lt;/p&gt;

&lt;h2 id=&quot;other-changes&quot;&gt;Other changes&lt;/h2&gt;

&lt;p&gt;This release also introduces the new capture operator, which provides a convenient syntax for retrieving functions so they can be passed as arguments:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_atom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which can also be used for partially applying functions and macros:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can learn more about the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#&amp;amp;/1&quot;&gt;new capture operator in our docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have also pushed improvements to &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;the String module&lt;/a&gt;, including new APIs. In particular, in order to know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String.length(&quot;josé&quot;)&lt;/code&gt; has length 4 (even though it takes 5 bytes to be represented in UTF-8), we need to use some algorithms defined by the Unicode Standard. These have been implemented as specified in the &lt;a href=&quot;http://www.unicode.org/reports/tr29/&quot;&gt;extended grapheme cluster algorithm, defined in the version 6.3.0 of the Unicode Standard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the optimization front, we have pushed the first iteration of a &lt;a href=&quot;https://groups.google.com/forum/#!topic/elixir-lang-core/RoXAUtoyjk4&quot;&gt;feature called Protocol consolidation&lt;/a&gt;, which speeds up the polymorphic dispatch done by protocols, sometimes reducing the dispatching time to 10% of the original time. We will continue working in upcoming releases to integrate protocol consolidation as a regular part of the developer workflow.&lt;/p&gt;

&lt;p&gt;And finally, a minor but frequently asked feature has finally arrived into Elixir: variables follow the same rules as other identifiers in the language, which means developers can now name their variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_atom?&lt;/code&gt;. For a general overview, &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.11.0/CHANGELOG.md&quot;&gt;check out the CHANGELOG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give Elixir a try! You can start with our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;getting started guide&lt;/a&gt;, or check out our sidebar for other learning resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; We have just released v0.11.1 which addresses a regression in Mix and improves the dependencies update process.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir Design Goals</title>
  <link href="http://elixir-lang.org/blog/2013/08/08/elixir-design-goals/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-08-08T00:00:00+00:00</updated>
  <id>/blog/2013/08/08/elixir-design-goals</id>
  <content type="html">&lt;p&gt;During the last year, we have spoken at many conferences spreading the word about Elixir. We &lt;a href=&quot;https://vimeo.com/53221562&quot;&gt;usually started with introducing the Erlang VM&lt;/a&gt;, then went on to talk about Elixir goals, saving some time at the end to do a live demo, showing some goodies like exchanging information between remote nodes and even hot code swapping.&lt;/p&gt;

&lt;p&gt;This post is a summary of those talks, focusing on the language goals: compatibility, productivity and extensibility.&lt;/p&gt;

&lt;h2 id=&quot;compatibility&quot;&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;Elixir is meant to be compatible with the Erlang VM and the existing ecosystem. When we talk about Erlang, we can break it into three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A functional programming language, called Erlang&lt;/li&gt;
  &lt;li&gt;A set of design principles, called OTP&lt;/li&gt;
  &lt;li&gt;The Erlang Virtual Machine, referred to as EVM or BEAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elixir runs in the same virtual machine and is compatible with OTP. Not only that, all the tools and libraries available in the Erlang ecosystem are also available in Elixir, simply because there is no conversion cost from calling Erlang from Elixir and vice-versa.&lt;/p&gt;

&lt;p&gt;We frequently say that &lt;strong&gt;the Erlang VM is Elixir’s strongest asset&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;All Elixir code is executed inside light-weight processes (actors), each with its own state, that exchange messages between each other. The Erlang VM multiplexes those processes onto many cores, making it trivial to run code concurrently.&lt;/p&gt;

&lt;p&gt;In fact if you compile any Elixir code, including the Elixir source, you will see all cores on your machine being used out of the box. With &lt;a href=&quot;http://www.parallella.org/board/&quot;&gt;technologies like Parallella&lt;/a&gt; becoming more accessible and affordable, it is hard to ignore the power you can get out of the Erlang VM.&lt;/p&gt;

&lt;p&gt;Finally, the Erlang VM was designed to build systems that run forever, self-heal and scale. Joe Armstrong, one of Erlang’s creators, has recently given an excellent talk &lt;a href=&quot;http://www.infoq.com/presentations/self-heal-scalable-system&quot;&gt;about the design decisions behind OTP and the VM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nothing that we are describing here is particularly new. Open source projects like CouchDB, Riak, RabbitMQ, Chef11 and companies like Ericsson, Heroku, Basho, Klarna and Wooga are already enjoying the benefits provided by the Erlang VM, some of them for quite a long time.&lt;/p&gt;

&lt;h2 id=&quot;productivity&quot;&gt;Productivity&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now we need to go meta. We should now think of a language design as being a pattern for language designs. A tool for making more tools of the same kind. […] A language design can no longer be a thing. It must be a pattern, a pattern for growth. A pattern for growing a pattern, for defining the patterns that programmers can use for their real work and main goals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Guy Steele, keynote at the 1998 ACM OOPSLA conference on “Growing a Language”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Productivity is, in general, a hard goal to measure. A language productive for creating desktop applications may not be productive for mathematical computing. Productivity depends directly on the field in which you intend to use the language, the available tools in the ecosystem and how easy it is to create and extend those tools.&lt;/p&gt;

&lt;p&gt;For this reason, we have opted for a small language core. For example, while some languages have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; and so on as language keywords, each with its own rules in the parser, &lt;strong&gt;in Elixir they are just macros&lt;/strong&gt;. This allows us to implement most of Elixir in Elixir and also allows developers to extend the language using the same tools we used to build the language itself, often extending the language to the specific domains they are working on.&lt;/p&gt;

&lt;p&gt;Here is an example of how someone would implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unless&lt;/code&gt;, which is a keyword in many languages, in Elixir:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;!unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;this will never be seen&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since a macro receives the code representation as arguments, we can simply convert an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unless&lt;/code&gt; into an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; at compile time.&lt;/p&gt;

&lt;p&gt;Macros are also the base construct for meta-programming in Elixir: the ability to write code that generates code. Meta-programming allows developers to easily get rid of boilerplate and create powerful tools. A common example mentioned in talks is how our test framework uses macros for expressiveness. Let’s see an example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MathTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;adding two numbers&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing to notice is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async: true&lt;/code&gt; option. When your tests do not have any side-effects, you can run them concurrently by passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;async: true&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Next we define a test case and we do an assertion with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; macro. Simply calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; would be a bad practice in many languages as it would provide a poor error report. In such languages, functions/methods like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assertEqual&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert_equal&lt;/code&gt; would be the recommended way of performing such assertion.&lt;/p&gt;

&lt;p&gt;In Elixir, however, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; is a macro and as such it can look into the code being asserted and infer that a comparison is being made. This code is then transformed to provide a detailed error report when the test runs:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1) test adding two numbers (MathTest)
   ** (ExUnit.ExpectationError)
                expected: 3
     to be equal to (==): 4
   at test.exs:7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This simple example illustrates how a developer can leverage macros to provide a concise but powerful API. Macros have access to the whole compilation environment, being able to check the imported functions, macros, defined variables and more.&lt;/p&gt;

&lt;p&gt;Those examples are just scratching the surface of what can be achieved with macros in Elixir. For example, we are currently using macros to compile routes from a web application into a bunch of patterns that are highly optimizable by the VM, providing an expressive but heavily optimized routing algorithm.&lt;/p&gt;

&lt;p&gt;The macro system also caused a huge impact on the syntax, which we will discuss briefly before moving to the last goal.&lt;/p&gt;

&lt;h3 id=&quot;syntax&quot;&gt;Syntax&lt;/h3&gt;

&lt;p&gt;Although syntax is usually one of the first topics that comes up when Elixir is being discussed, it was never a goal to simply provide a different syntax. Since we wanted to provide a macro system, we knew that the macro system would only be sane if we could represent Elixir syntax in terms of Elixir’s own data structures in a straight-forward fashion. With this goal in mind, we set out to design the first Elixir version, which looked like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the snippet above, we represent everything, except variables, as a function or a macro call. Notice keyword arguments like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do:&lt;/code&gt; have been present since the first version. To this, we slowly added new syntax, making some common patterns more elegant while keeping the same underlying data representation. We soon added infix notation for operators:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next step was to make parentheses optional:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally we added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do&lt;/code&gt;-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt; as convenience for the common &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do: (...)&lt;/code&gt; construct:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given my previous background in Ruby, it is natural that some of the constructs added were borrowed from Ruby. However, those additions were a by-product, and not a language goal.&lt;/p&gt;

&lt;p&gt;Many language constructs are also inspired by their Erlang counter-parts, like some of the control-flow macros, operators and containers. Notice how some Elixir code:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# A tuple&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Adding two lists&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Case&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;maps to Erlang:&lt;/p&gt;

&lt;div class=&quot;language-erlang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;% A tuple
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% Adding two lists
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% Case
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Other&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Other&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;extensibility&quot;&gt;Extensibility&lt;/h2&gt;

&lt;p&gt;By building on top of a small core, most of the constructs in the language can be replaced and extended as required by developers to target specific domains. However, there is a particular domain that Elixir is inherently good at, which is building concurrent, distributed applications, thanks to OTP and the Erlang VM.&lt;/p&gt;

&lt;p&gt;Elixir complements this domain by providing a standard library with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unicode strings and unicode operations&lt;/li&gt;
  &lt;li&gt;A powerful unit test framework&lt;/li&gt;
  &lt;li&gt;More data structures like ranges, including novel implementations for sets and dictionaries&lt;/li&gt;
  &lt;li&gt;Polymorphic records (in contrast to Erlang’s compilation-time only records)&lt;/li&gt;
  &lt;li&gt;Strict and lazy enumeration APIs&lt;/li&gt;
  &lt;li&gt;Convenience functions for scripting, like working with paths and the filesystem&lt;/li&gt;
  &lt;li&gt;A project management tool to compile and test Elixir code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And much more.&lt;/p&gt;

&lt;p&gt;Most of the features above provide their own extensibility mechanisms, too. For example, take the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module allow us to enumerate the built-in ranges, lists, sets, etc:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [2, 4, 6]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [2, 4, 6]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only that, any developer can &lt;strong&gt;extend&lt;/strong&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module to work with any data type as long as the data type implements &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; protocol&lt;/a&gt; (protocols in Elixir are based on Clojure’s protocol). This is extremely convenient because the developer needs to know only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; API for enumeration, instead of memorizing specific APIs for sets, lists, dicts, etc.&lt;/p&gt;

&lt;p&gt;There are many other protocols exposed by the language, like &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; protocol&lt;/a&gt; for pretty printing data structures and &lt;a href=&quot;https://hexdocs.pm/elixir/Access.html&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access&lt;/code&gt; protocol&lt;/a&gt; for accessing key-value data by key. By being extensible, Elixir ensures developers can work &lt;strong&gt;with&lt;/strong&gt; the language, instead of &lt;strong&gt;against&lt;/strong&gt; the language.&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;The goal of this post was to sumarize the language goals: compatibility, productivity and extensibility. By being compatible with the Erlang VM, we are providing developers another toolset for building concurrent, distributed and fault-tolerant systems.&lt;/p&gt;

&lt;p&gt;We also hope to have clarified what Elixir brings to the Erlang VM, in particular, meta-programming through macros, polymorphic constructs for extensibility and a data-focused standard library with extensible and consistent APIs for diverse types, including strict and lazy enumeration, unicode handling, a test framework and more.&lt;/p&gt;

&lt;p&gt;Give Elixir a try! You can start with our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;getting started guide&lt;/a&gt;, or check out our sidebar for other learning resources.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.10.0 released</title>
  <link href="http://elixir-lang.org/blog/2013/07/13/elixir-v0-10-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-07-13T00:00:00+00:00</updated>
  <id>/blog/2013/07/13/elixir-v0-10-0-released</id>
  <content type="html">&lt;p&gt;Elixir v0.10.0 is released with support for streams, sets and many improvements to the Mix and ExUnit applications.&lt;/p&gt;

&lt;h2 id=&quot;streams&quot;&gt;Streams&lt;/h2&gt;

&lt;p&gt;The default mechanism for working with collections in Elixir is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module. With it, you can map over ranges, lists, sets, dictionaries and any other structure as long as it implements the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; protocol:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module performs eager evaluation. Consider the following example:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take_while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [2, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we enumerate the items in list once, taking all elements that are less than 3, and then we enumerate the remaining elements again, multiplying them by two. In order to retrieve the final result, we have created one intermediate list. As we add more operations, more intermediate lists will be generated.&lt;/p&gt;

&lt;p&gt;This approach is simple and efficient for the majority of the cases but, when working with large collections, we can generate many, possibly large, intermediate lists affecting performance. That’s one of the problems Streams solve. Let’s rewrite the example above using Streams:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take_while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #Stream.Lazy&amp;lt;...&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, instead of getting the result back, we got a Stream. The list elements are yet to be enumerated! We can realize the stream  by calling any of the Enum functions, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.to_list/1&lt;/code&gt;. By doing so the list will be iterated just once avoiding the intermediary representations.&lt;/p&gt;

&lt;p&gt;In a nutshell, Streams are composable, lazy enumerables. Streams are also useful when doing IO or expressing infinite computations. We can retrieve a file as a stream:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;README.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we got a stream that will enumerate the lines in the file one by one when enumerated. We could further extend the stream above, for example, by rejecting blank lines, and the file will be opened just when its results are actually needed.&lt;/p&gt;

&lt;p&gt;Do you need a random number generator? We got your back:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeatedly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniform&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [0.4435846174457203, 0.7230402056221108, 0.94581636451987]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream.repeatedly/1&lt;/code&gt; returns an infinite stream but that’s ok we just need its first three elements. You can learn more about &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;stream and related functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stream&lt;/code&gt; module documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sets&quot;&gt;Sets&lt;/h2&gt;

&lt;p&gt;This release also adds &lt;a href=&quot;https://hexdocs.pm/elixir/Set.html&quot;&gt;the Sets API&lt;/a&gt; to Elixir and a HashSet implementation. The HashSet implementation follows &lt;a href=&quot;/blog/2013/01/27/elixir-v0-8-0-released/&quot;&gt;the same design goals as the HashDict implementation&lt;/a&gt; released at the beginning of this year, starting with a compact representation and expanding and contracting as needed.&lt;/p&gt;

&lt;p&gt;This feature was a contribution from &lt;a href=&quot;https://github.com/josephwilk&quot;&gt;Joseph Wilk&lt;/a&gt; and he talks about its implementation and provides some benchmarks &lt;a href=&quot;http://blog.josephwilk.net/elixir/sets-in-elixir.html&quot;&gt;on his blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pretty-printing&quot;&gt;Pretty printing&lt;/h2&gt;

&lt;p&gt;Another addition to this release is pretty printing. The pretty printing started as an implementation of the &lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf&quot;&gt;Wadler paper&lt;/a&gt; by &lt;a href=&quot;https://github.com/manpages&quot;&gt;Jonns Mostovoys&lt;/a&gt; which was then improved by &lt;a href=&quot;https://github.com/brunoro&quot;&gt;Gustavo Brunoro&lt;/a&gt; under his Google Summer of Code project as described in &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2200&quot;&gt;Lindig’s &lt;em&gt;Strictly Prettier&lt;/em&gt; paper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As soon as you upgrade to Elixir v0.10.0 and start IEx, you will get pretty printing for all data structures provided by Elixir. We have also added documentation to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; module about &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt;adding pretty printing to your own structures&lt;/a&gt; as well as &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Algebra.html&quot;&gt;using the document algebra for any other kind of formatting&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-improvements&quot;&gt;Other improvements&lt;/h2&gt;

&lt;p&gt;Other notable improvements are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We have improved Mix to be able to fetch Rebar dependencies, making integration with the existing Erlang ecossystem much easier, thanks to &lt;a href=&quot;https://github.com/ericmj&quot;&gt;Eric Meadows-Jonsson&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ExUnit now supports the trace option, enabled via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix test --trace&lt;/code&gt;, which forces tests to run sequentially and print the test names and extra information as it goes;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are also working hard on Windows support, improving its command-line tools and working towards a green test suite, thanks to &lt;a href=&quot;https://github.com/tojans&quot;&gt;Tom Jansens&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Meta-programming in Elixir was also improved by the addition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding/0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding/1&lt;/code&gt; macros plus the additions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Macro.expand_once/2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Macro.expand_all/2&lt;/code&gt; to the &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Macro&lt;/code&gt; module&lt;/a&gt;;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also improvements to typespecs, error messages, many bug fixes and some backwards incompatible changes. We have posted a detailed &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/elixir-lang-talk/ksrefrgK1eY&quot;&gt;upgrade instructions on the mailing list&lt;/a&gt;. For a general overview, &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.10.0/CHANGELOG.md&quot;&gt;check out the CHANGELOG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give Elixir a try! You can start with our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;getting started guide&lt;/a&gt;, or check out our sidebar for other learning resources.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.9.0 released</title>
  <link href="http://elixir-lang.org/blog/2013/05/23/elixir-v0-9-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-05-23T00:00:00+00:00</updated>
  <id>/blog/2013/05/23/elixir-v0-9-0-released</id>
  <content type="html">&lt;p&gt;While &lt;a href=&quot;https://pragprog.com/book/elixir/programming-elixir&quot;&gt;Programming Elixir&lt;/a&gt; was being announced, we have been working on Elixir v0.9.0 which is finally out. This release contains new features, important performance optimizations and bug fixes.&lt;/p&gt;

&lt;p&gt;Elixir v0.9.0 also removes support for Erlang R15 and earlier versions. In case you still need to run Elixir software on R15, we have also released Elixir v0.8.3, which contains many of the enhancements in v0.9.0. Check the &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.9.0/CHANGELOG.md&quot;&gt;CHANGELOG for more details for both releases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All this work was achieved by our very vibrant community! Over the last month, 17 authors have pushed more than 500 commits, where more than 60 pull requests were merged and more than 80 issues were closed.&lt;/p&gt;

&lt;p&gt;Let’s talk about the goodies!&lt;/p&gt;

&lt;h2 id=&quot;compilation-time-improvements&quot;&gt;Compilation time improvements&lt;/h2&gt;

&lt;p&gt;We have spent some time improving compilation time. The particular scenario we have worked on was the definition of records:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defrecord&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Records are a good scenario because they are implemented in Elixir, using Elixir macros, and they also define a module underneath, which exercises the Erlang VM compilation stack.&lt;/p&gt;

&lt;p&gt;We have used &lt;a href=&quot;http://www.erlang.org/doc/man/fprof.html&quot;&gt;fprof&lt;/a&gt; to identify the bottlenecks and made the compilation stack 35% faster. We have also identified bottlenecks coming from Erlang and &lt;a href=&quot;https://github.com/erlang/otp/commit/32b194495f353dde014b00008a630eeff2a71056&quot;&gt;pushed some patches&lt;/a&gt; that should benefit both Elixir and Erlang code.&lt;/p&gt;

&lt;p&gt;A special thanks to &lt;a href=&quot;https://github.com/yrashk&quot;&gt;Yurii Rashkovskii&lt;/a&gt; for the data and profiling.&lt;/p&gt;

&lt;h2 id=&quot;umbrella-projects&quot;&gt;Umbrella projects&lt;/h2&gt;

&lt;p&gt;In Elixir, an application denotes a component implementing some specific functionality, that can be started and stopped as a unit, and which can be re-used in other systems as well.&lt;/p&gt;

&lt;p&gt;As a project grows, it is recommended to break it apart into smaller, isolated applications and bundle them together. The issue so far was that Elixir did not provide good support for working with many applications at once, and compiling and managing those applications became rather a tedious work.&lt;/p&gt;

&lt;p&gt;Elixir v0.9.0 now supports umbrella projects which can work with many applications at the same time. You can create a new umbrella project with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mix new my_project &lt;span class=&quot;nt&quot;&gt;--umbrella&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The generated project will have the following structure:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apps/
mix.exs
README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps&lt;/code&gt; directory, you can create as many applications as you want and running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix compile&lt;/code&gt; inside the umbrella project will automatically compile all applications. The &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/667&quot;&gt;original discussion for this feature&lt;/a&gt; contains more details about how it all works.&lt;/p&gt;

&lt;p&gt;A special thanks to &lt;a href=&quot;https://github.com/ericmj&quot;&gt;Eric Meadows-Jonsson&lt;/a&gt; for implementing this feature and to &lt;a href=&quot;https://github.com/yrashk&quot;&gt;Yurii&lt;/a&gt; for testing it against different edge cases.&lt;/p&gt;

&lt;h2 id=&quot;reducers&quot;&gt;Reducers&lt;/h2&gt;

&lt;p&gt;Elixir v0.9.0 changes its main abstraction for enumeration from iterators to reducers. Before Elixir v0.9.0, when you invoked:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [1, 4, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It asked the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.Iterator&lt;/code&gt; protocol for instructions on how to iterate the list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, 2, 3]&lt;/code&gt;. This iteration happened by retrieving each item in the list, one by one, until there were no items left.&lt;/p&gt;

&lt;p&gt;This approach posed many problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Iterators are very hard to compose;&lt;/li&gt;
  &lt;li&gt;Iterators contain state. You need to know, at each moment, what is the next element you have to iterate next. We use functions and their bindings to pass the iteration state around;&lt;/li&gt;
  &lt;li&gt;Iterators have the “dangling open resource” problem. Consider that you want to iterate a file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.map/2&lt;/code&gt; as above. If any step during the iteration fails, there is no easy way to notify the resource being iterated  (in this case, the opened file) that iteration failed, so we can’t close the file automatically, leaving it to the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reducers solve all of those problems by using a more functional approach. Instead of asking a list to spill its elements out one by one and then working on each element, we now generate a recipe of computations and pass it down to the list which applies those computations on itself.&lt;/p&gt;

&lt;p&gt;Here is how we implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; protocol for lists:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defimpl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;for:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The implementation above works as a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; function (also called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inject&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldl&lt;/code&gt; in other languages). Here is how it works:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Sum all elements in a list&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum.map/2&lt;/code&gt; we have used above is now implemented in terms of this reducing function:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach solves all the problems above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reducers are composable (notice how we have implemented map on top of reduce by composing functions);&lt;/li&gt;
  &lt;li&gt;Reducers are self-contained: there is no need keep state around, which also solves the “dangling open resource” problem. The data type now knows exactly when the iteration starts and when it finishes;&lt;/li&gt;
  &lt;li&gt;Reducers do not dictate how a type should be enumerated. This means types like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashDict&lt;/code&gt; can provide a much faster implementation for Reducers;&lt;/li&gt;
  &lt;li&gt;Furthermore, the end result is a cleaner implementation of most of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; functions (the &lt;a href=&quot;https://github.com/elixir-lang/elixir/pull/1102&quot;&gt;reducers pull request&lt;/a&gt; removes over 500LOC) and better performance!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reducers also opens up room for lazy and parallel enumeration, as &lt;a href=&quot;http://clojure.com/blog/2012/05/08/reducers-a-library-and-model-for-collection-processing.html&quot;&gt;the Clojure community has already proven&lt;/a&gt; and something we are looking forward to explore on upcoming releases.&lt;/p&gt;

&lt;p&gt;A special thanks to &lt;a href=&quot;https://github.com/ericmj&quot;&gt;Eric Meadows-Jonsson&lt;/a&gt; for implementing this feature!&lt;/p&gt;

&lt;h2 id=&quot;other-bits&quot;&gt;Other bits&lt;/h2&gt;

&lt;p&gt;We have also many other smaller improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our CLI now supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--hidden&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--cookie&lt;/code&gt; flags which are useful for distributed modes;&lt;/li&gt;
  &lt;li&gt;Our test framework, ExUnit, is now able to capture all the communication that happens with a registered IO device, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:stdio&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:stderr&lt;/code&gt;, via &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.CaptureIO.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExUnit.CaptureIO&lt;/code&gt;&lt;/a&gt;. This is very useful for testing how your software reacts to some inputs and what it prints to the terminal;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IEx&lt;/code&gt; now allows files to be imported into the shell with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import_file&lt;/code&gt; and also loads &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.iex&lt;/code&gt; on startup for custom configuration;&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enum&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dict&lt;/code&gt; modules got more convenience functions that goes from checking unicode character validity to taking values out of a dictionary;&lt;/li&gt;
  &lt;li&gt;And many, many more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A huge thank you to our community for sending bug reports, providing bug fixes and contributing all those amazing features. And when are &lt;strong&gt;you&lt;/strong&gt; joining us? :)&lt;/p&gt;

&lt;p&gt;Give Elixir a try! You can start with our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;getting started guide&lt;/a&gt;, or &lt;a href=&quot;https://www.youtube.com/watch?v=a-off4Vznjs&amp;amp;feature=youtu.be&quot;&gt;check this 30 minute video from PragProg&lt;/a&gt; or buy the beta version of &lt;a href=&quot;https://pragprog.com/book/elixir/programming-elixir&quot;&gt;Programming Elixir&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir on Xen</title>
  <link href="http://elixir-lang.org/blog/2013/05/02/elixir-on-xen/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-05-02T00:00:00+00:00</updated>
  <id>/blog/2013/05/02/elixir-on-xen</id>
  <content type="html">&lt;p&gt;Elixir uses Erlang underneath, all the way down. Thanks to this, an Elixir project can run on the recently revealed “OS-less” Erlang VM called LING VM. LING VM is the core technology of &lt;a href=&quot;http://erlangonxen.org&quot;&gt;Erlang on Xen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-xen&quot;&gt;Why Xen?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Xen&quot;&gt;Xen&lt;/a&gt; is an open-source baremetal hypervisor that allows many operating systems to run on the same hardware. Xen is frequently used for server virtualization, Infrastructure as a Service (IaaS) and security applications.&lt;/p&gt;

&lt;p&gt;Elixir on Xen runs on top of the Xen Hypervisor (via the LING VM) but with no traditional OS underneath it, taking away numerous administrative, scalability, and performance issues. This  limits options of a malicious attacker, making it an excellent choice for high-security applications, and reduces startup latency, allowing developers to spawn new VMs in less than 100 milliseconds.&lt;/p&gt;

&lt;p&gt;You can learn more about Xen and the LING VM on the &lt;a href=&quot;http://erlangonxen.org&quot;&gt;Erlang on Xen website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;In order to run Elixir on the LING VM, you need to produce a Xen image of your Elixir project. This can be done with the help of the &lt;a href=&quot;https://github.com/maximk/lingex&quot;&gt;lingex project&lt;/a&gt;, created by the LING VM team.&lt;/p&gt;

&lt;p&gt;Producing an Elixir image using the free Erlang on Xen Build Service requires just a few steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Add a dependency on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lingex&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   def deps do
     [ { :lingex, github: &quot;maximk/lingex&quot; } ]
   end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix deps.get&lt;/code&gt; to update your dependencies. This adds a few custom tasks
to the mix tool (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lingex.build&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lingex.image&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lingex.build_image&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lingex&lt;/code&gt; options. Add the following lines to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   def project do
     [ lingex_opts: [
         build_host: &quot;build.erlangonxen.org:8080&quot;,
   			username: &quot;test&quot;,
   			password: &quot;test&quot; ] ]
   end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optionally, you may register with the build service &lt;a href=&quot;http://build.erlangonxen.org/register&quot;&gt;here&lt;/a&gt; and update the credentials accordingly. For the complete list of recognized options see the build service documentation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix lingex.build_image&lt;/code&gt;. This will archive all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.beam&lt;/code&gt; files of your project and submit them to the build service.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The build process will complete in about 30s. An image file called ‘vmling’ will appear in the current directory, ready to boot as a Xen guest. The image file will contain LING VM and your project code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And this is all. Erlang on Xen is going to boot the Erlang VM and the standard Erlang shell. You can access Elixir shell in a couple steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In the Erlang shell, first start IEx:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   1&amp;gt; application:start(iex).
   ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+G&lt;/code&gt;. This will open up the user switch command interface from the Erlang shell.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the user switch interface, type:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   User switch command
    --&amp;gt; s 'Elixir.IEx'
    --&amp;gt; c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will bring you to Interactive Elixir and you can execute Elixir expressions as usual!&lt;/p&gt;

&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;

&lt;p&gt;Running Elixir on Xen opens up many possibilities to Elixir developers. We are very thankful for the work done by &lt;a href=&quot;http://erlangonxen.org&quot;&gt;Erlang on Xen team&lt;/a&gt;, who added support for Elixir and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lingex&lt;/code&gt; build tool.&lt;/p&gt;

&lt;p&gt;Erlang on Xen (and consequently Elixir on Xen) is still in active development, so don’t forget to read more about its concepts, use cases and limitations on &lt;a href=&quot;http://erlangonxen.org/&quot;&gt;Erlang on Xen website&lt;/a&gt;.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.8.2 released</title>
  <link href="http://elixir-lang.org/blog/2013/04/29/elixir-v0-8-2-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-04-29T00:00:00+00:00</updated>
  <id>/blog/2013/04/29/elixir-v0-8-2-released</id>
  <content type="html">&lt;p&gt;The past week we have released Elixir v0.8.2. It contains many bug fixes and better support for Erlang R16, including &lt;a href=&quot;https://github.com/elixir-lang/elixir/commit/0fad1883df9da541628e8485d28372fd4b977b89&quot;&gt;the new built-in functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_elem/3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete_elem/2&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have also added extensive support to ANSI escape codes. For example, by simply upgrading to the latest Elixir you will get colored output from your test suites:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/exunit-ansi.png&quot; alt=&quot;ANSI escape with ExUnit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have also added colored output to Interactive Elixir (IEx) but it requires Erlang R16.&lt;/p&gt;

&lt;p&gt;Finally, Elixir has always given special attention to documentation. You can easily document functions with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@doc&lt;/code&gt; attribute:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Math&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
  Add two numbers together.

  ## Examples

      iex&amp;gt; Math.add(1, 2)
      3

  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The documentation above is embedded into the module and can be easily retrieved at runtime. For example, by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h Math.add/2&lt;/code&gt; into Interactive Elixir, we can access the documentation for that module.&lt;/p&gt;

&lt;p&gt;Elixir v0.8.2 takes this to the next level by adding support to doctests. Given the example above, you can configure Elixir to automatically run the code samples in your documentation by including a call to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;doctest&lt;/code&gt; macro in your test suite:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MathTest&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ExUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Case&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;async:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;doctest&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Math&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can learn more about &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.DocTest.html&quot;&gt;doctests on our documentation page&lt;/a&gt; and get more information about our latest release &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/ed27611f48ba150404c95fe15f1d6058a4287330/CHANGELOG.md&quot;&gt;on the CHANGELOG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are new to Elixir, &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;it’s easy to get started with&lt;/a&gt;!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Google Summer of Code 2013</title>
  <link href="http://elixir-lang.org/blog/2013/04/19/google-summer-of-code-2013/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-04-19T00:00:00+00:00</updated>
  <id>/blog/2013/04/19/google-summer-of-code-2013</id>
  <content type="html">&lt;p&gt;We are pleased to announce that Elixir is taking part in Google Summer of Code 2013
as member of the &lt;a href=&quot;http://beamcommunity.github.io&quot;&gt;BEAM Community&lt;/a&gt;. This means that
students all around the world can get paid to work on Elixir during the summer!&lt;/p&gt;

&lt;p&gt;The rules require students to be enrolled in college full or part-time, and to be
at least 18 years by May 27, 2013. You can find more information on
&lt;a href=&quot;http://www.google-melange.com/gsoc/homepage/google/gsoc2013&quot;&gt;Google Summer of Code 2013 website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have published &lt;a href=&quot;https://github.com/beamcommunity/beamcommunity.github.com/wiki/Project:-Elixir&quot;&gt;a list of ideas we would like to see and explore in Elixir&lt;/a&gt;
that students can use as a basis, but students are also free to send their own
proposals. If your proposal gets accepted, Google will pay you $5000 over the
course of three months to work on Elixir. Students can start submitting their
proposals on April 22 and the deadline is May 23.&lt;/p&gt;

&lt;p&gt;Note the BEAM Community serves as a mentoring organization for many other projects
that run on the Erlang VM, including Elixir. To see the full list, &lt;a href=&quot;http://beamcommunity.github.io&quot;&gt;visit the website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope to work with you during this summer! If you have more questions, feel free
to join the &lt;a href=&quot;https://groups.google.com/d/forum/beam-community&quot;&gt;BEAM Community mailing list&lt;/a&gt;
or talk to us on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#beam-community&lt;/code&gt; on irc.freenode.net.&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.8.0 released</title>
  <link href="http://elixir-lang.org/blog/2013/01/27/elixir-v0-8-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2013-01-27T00:00:00+00:00</updated>
  <id>/blog/2013/01/27/elixir-v0-8-0-released</id>
  <content type="html">&lt;p&gt;On the last 9th January, we celebrated &lt;a href=&quot;https://github.com/elixir-lang/elixir/commit/337c3f2d569a42ebd5fcab6fef18c5e012f9be5b&quot;&gt;two years since Elixir’s first commit&lt;/a&gt; and to celebrate this occasion we have prepared a big release. Elixir v0.8 is out, with documentation, optimizations, bug fixes and shiny new features. Let’s take a look at them!&lt;/p&gt;

&lt;h2 id=&quot;otp-applications&quot;&gt;OTP applications&lt;/h2&gt;

&lt;p&gt;One of the goals for the v0.8 release was better integration with OTP applications. By passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--sup&lt;/code&gt; option to Mix, you can start a new OTP Application containing application callbacks and a supervisor:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix new my_app --sup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And applications can be started directly from the command line as well:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elixir --app my_app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have written a whole &lt;a href=&quot;/getting-started/mix-otp/supervisor-and-application.html&quot;&gt;guide chapter about creating OTP applications, supervisors and servers&lt;/a&gt;. Give it a try!&lt;/p&gt;

&lt;h2 id=&quot;improved-unicode-support&quot;&gt;Improved Unicode support&lt;/h2&gt;

&lt;p&gt;Elixir favors the use of UTF-8 binaries since its first release. In the latest releases, we took it up a notch by adding Unicode support, built upon the Unicode Standard 6.2.0. Elixir v0.8 takes this even further, adding more convenience functions and better support to named sequences:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ﬁN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Fin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The example above contains a string with only two codepoints, &lt;a href=&quot;http://www.fileformat.info/info/unicode/char/FB01/index.htm&quot;&gt;the codepoint ﬁ&lt;/a&gt; and &lt;a href=&quot;http://www.fileformat.info/info/unicode/char/006E/index.htm&quot;&gt;the codepoint n&lt;/a&gt;. Look how Elixir properly capitalizes the string, returning a new string made of three codepoints (all ascii letters).&lt;/p&gt;

&lt;p&gt;Learn more about &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;Unicode support with the String module&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ast-metadata&quot;&gt;AST metadata&lt;/h2&gt;

&lt;p&gt;As per this release, Elixir AST nodes can contain metadata. This metadata is compilation time only but may allow macros to annotate important information in AST nodes, like line numbers, file and other library specific information. If you quote an Elixir expression, we can see the metadata slot:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we can see the AST representation of the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello(&quot;world&quot;)&lt;/code&gt;. It is made of a tuple of three elements, the first one is the function name represented by the atom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:hello&lt;/code&gt;, the second one is a keyword list containing metadata (in this case, no metadata is available) and the third is a list of arguments, containing the string “world”.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quote&lt;/code&gt; does not annotate line numbers, but we can pass it as an option:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;line:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__ENV__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;line:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we can see the metadata spot being used to annotate the line number. This change allowed us to take our macros one step further…&lt;/p&gt;

&lt;h2 id=&quot;macros-expansion&quot;&gt;Macros expansion&lt;/h2&gt;

&lt;p&gt;Prior to this release, Elixir had limited expansion of imports and aliases. We decided this would be an important issue to tackle in this release, as people are building more and more projects on top of Elixir.&lt;/p&gt;

&lt;p&gt;Imagine you manually implemented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unless&lt;/code&gt; as a macro, that does the opposite of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;!unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;unquote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When some code call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unless&lt;/code&gt; macro above, in previous Elixir versions, it would expect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; macro to be available at the caller. This may not be necessarily true and, even worse, another implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; macro, not compatible to the one above, could be available.&lt;/p&gt;

&lt;p&gt;Elixir v0.8 ensures that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unless&lt;/code&gt; macro above will expand to the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; macro available when quoted, guaranteeing different libraries can integrate easily without imposing hidden requirements.&lt;/p&gt;

&lt;p&gt;You can read more about &lt;a href=&quot;/getting-started/case-cond-and-if.html&quot;&gt;macros in the getting started guide&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;go deep into the quote macro docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-new-way-to-manipulate-pathnames&quot;&gt;A new way to manipulate pathnames&lt;/h2&gt;

&lt;p&gt;Elixir v0.8 contains a bit of house cleaning too. We have created &lt;a href=&quot;https://hexdocs.pm/elixir/Path.html&quot;&gt;the Path module&lt;/a&gt; to accommodate functions used to manipulate filesystem paths and have also added functions like &lt;a href=&quot;https://hexdocs.pm/elixir/System.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.tmp_dir&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.user_home&lt;/code&gt;&lt;/a&gt; which are meant to work across different operating systems and are very handy when scripting.&lt;/p&gt;

&lt;h2 id=&quot;the-new-hashdict&quot;&gt;The new HashDict&lt;/h2&gt;

&lt;p&gt;For last but not least, Elixir ships with a &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/main/lib/elixir/lib/hash_dict.ex&quot;&gt;new HashDict implementation&lt;/a&gt;. In Erlang, there are different key-value store implementations and often you need to pick which one is the best for you based on the average size of the dictionary. Generally speaking, &lt;a href=&quot;http://www.erlang.org/doc/man/orddict.html&quot;&gt;orddicts&lt;/a&gt; are efficient and fast when you want to hold a handful of items, otherwise you should consider &lt;a href=&quot;http://www.erlang.org/doc/man/gb_trees.html&quot;&gt;gb_trees&lt;/a&gt; unless you want to hold thousands of items, when then &lt;a href=&quot;http://www.erlang.org/doc/man/dict.html&quot;&gt;dict&lt;/a&gt; becomes your best option. The fact those implementations do not provide the same API, makes it harder to change your code when you realize another implementation would be better fit.&lt;/p&gt;

&lt;p&gt;For Elixir, we decided to have a single dictionary implementation that would scale as needed. It would start as a compact representation for a handful of items and expand and rehash accordingly as new items are added or removed, providing fast access and modification times on all ranges. We are glad to say our goals were reached and a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashDict&lt;/code&gt; implementation ships with Elixir v0.8.&lt;/p&gt;

&lt;p&gt;Let’s take a look at some benchmarks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/hash-dict-fetch.png&quot; alt=&quot;Comparison of fetch times with string keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contents/hash-dict-update.png&quot; alt=&quot;Comparison of update times with string keys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For each number of keys, we have measured and normalized those values against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashDict&lt;/code&gt; results. This way it is easy to see which implementation takes more or less time compared to Elixir’s implementation.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orddict&lt;/code&gt; is still the faster representation for small ranges since it is a simple list. However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashDict&lt;/code&gt; is able to be relatively fast compared to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;orddict&lt;/code&gt; for those small ranges and the fastest solution once you have dozens of keys. &lt;a href=&quot;https://gist.github.com/436a9d2bca5051a6dfab&quot;&gt;Those results can be verified when using other types as keys as well&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, given &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashDict&lt;/code&gt; starts with a compact representation, it also takes less memory. Compared to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict&lt;/code&gt; implementation, an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashDict&lt;/code&gt; takes only 5 words, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict&lt;/code&gt; takes 47.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;We continue actively working on Elixir and this release is the &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.8.0/CHANGELOG.md&quot;&gt;result of our efforts on different areas&lt;/a&gt;! We have exciting plans and newer possibilities to explore, as a new release of Erlang OTP also comes out in a couple weeks.&lt;/p&gt;

&lt;p&gt;Also, we previously announced Elixir is going to be released frequently, every 2 to 4 weeks. We have made a small detour to get v0.8.0 out of the door, but we are back to our regular schedule as of today!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/getting-started/introduction.html&quot;&gt;Celebrate with us and give Elixir a try&lt;/a&gt;!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.7.2 released</title>
  <link href="http://elixir-lang.org/blog/2012/12/04/elixir-v0-7-2-released/"/>
  
  <author>
    <name>Yurii Rashkovskii</name>
  </author>
  
  <updated>2012-12-04T00:00:00+00:00</updated>
  <id>/blog/2012/12/04/elixir-v0-7-2-released</id>
  <content type="html">&lt;p&gt;Hot out of the oven! We just released Elixir v0.7.2 with a number of delicious improvements.&lt;/p&gt;

&lt;p&gt;One of the most important changes in this minor release is a partial rehaul of
the type specification syntax.&lt;/p&gt;

&lt;p&gt;Here’s the gist:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;@spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myfun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# becomes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myfun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# becomes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# becomes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# becomes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# becomes&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;@type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another change is that Mix now echoes the output of external tools
such as git and rebar, and handles exit status correctly. This have previously
led to some less-than-perfect workflows.&lt;/p&gt;

&lt;p&gt;We’ve also added a more compact and visual form of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function&lt;/code&gt; helper. Now,
instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function(Enum, :all?, 2)&lt;/code&gt; you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function(Enum.all?/2)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’ve also figured out how to achieve an up to 6x &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.7.2/lib/elixir/lib/kernel.ex#L1386-L1417&quot;&gt;performance increase&lt;/a&gt;
under some circumstances when using records.&lt;/p&gt;

&lt;p&gt;…and &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.7.2/CHANGELOG.md&quot;&gt;many other fixes &amp;amp; improvements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, but not least importantly, I’d like to mention that we’re very excited about how the community around Elixir is building up. Thank you all for being around and supporting us!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/getting-started/introduction.html&quot;&gt;Learn more about Elixir&lt;/a&gt;!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.7.1 released</title>
  <link href="http://elixir-lang.org/blog/2012/11/18/elixir-v0-7-1-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2012-11-18T00:00:00+00:00</updated>
  <id>/blog/2012/11/18/elixir-v0-7-1-released</id>
  <content type="html">&lt;p&gt;Elixir v0.7.1 was released this weekend to celebrate the end of a two months journey traveling around Europe, United States and Brazil talking about and exposing Elixir to new developers.&lt;/p&gt;

&lt;p&gt;This is a minor release that contains a couple enhancements regarding UTF-8, &lt;a href=&quot;http://www.erlang.org/doc/man/dialyzer.html&quot;&gt;dialyzer&lt;/a&gt; support and bug fixes.&lt;/p&gt;

&lt;p&gt;During this time traveling around, we have spoken at many conferences, as &lt;a href=&quot;http://thestrangeloop.com/&quot;&gt;Strange Loop&lt;/a&gt;, &lt;a href=&quot;http://oredev.org/&quot;&gt;Øredev&lt;/a&gt;, &lt;a href=&quot;http://qconsp.com/&quot;&gt;QCon SP&lt;/a&gt; and &lt;a href=&quot;http://rupy.eu/&quot;&gt;Rupy&lt;/a&gt; as well as at different companies. Developers from different backgrounds have shown interest in Elixir, &lt;a href=&quot;http://spin.atomicobject.com/2012/10/31/elixir-erlang-and-the-dining-philosophers/&quot;&gt;written about it&lt;/a&gt;, and contributed to the language. As of today, Elixir is powered by 51 different contributors!&lt;/p&gt;

&lt;p&gt;In case you missed any of those conferences, &lt;a href=&quot;https://vimeo.com/53221562&quot;&gt;the talk I presented at Øredev is available and you can watch it now&lt;/a&gt;. The slides are also available below.&lt;/p&gt;

&lt;p&gt;If you want to hear more about Elixir at a conference or an event, please let us know. Thank you and don’t forget to &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;give Elixir a try&lt;/a&gt;!&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;cf4727401449013077d112313d1a82a3&quot; data-ratio=&quot;1.2994923857868&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</content>
</entry>

<entry>
  <title>Elixir v0.7.0 released</title>
  <link href="http://elixir-lang.org/blog/2012/10/20/elixir-v0-7-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2012-10-20T00:00:00+00:00</updated>
  <id>/blog/2012/10/20/elixir-v0-7-0-released</id>
  <content type="html">&lt;p&gt;Elixir v0.7.0 was released with bug fixes and many improvements, like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; module to handle UTF-8 binaries and support to environments and nested dependencies in Mix.&lt;/p&gt;

&lt;p&gt;We have also taken important steps into normalizing our APIs. In Erlang, accesses to tuple and lists are one-based and binaries are zero-based, but in Elixir we have normalized all of them to rely on zero-based access.&lt;/p&gt;

&lt;p&gt;This release also includes some backwards incompatible changes, but the majority of changes were first deprecated, meaning your code will run just fine but with warnings. Those warnings will be removed in the next release v0.7.1, which should happen in a 2 to 4 weeks time span.&lt;/p&gt;

&lt;p&gt;For more information, read out the &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/v0.7.0/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you and don’t forget to &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;give Elixir a try&lt;/a&gt;!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.6.0 released</title>
  <link href="http://elixir-lang.org/blog/2012/08/01/elixir-v0-6-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2012-08-01T00:00:00+00:00</updated>
  <id>/blog/2012/08/01/elixir-v0-6-0-released</id>
  <content type="html">&lt;p&gt;We have finally released &lt;a href=&quot;/&quot;&gt;Elixir&lt;/a&gt; v0.6.0! This release includes a build tool called Mix, support for Erlang typespecs, many improvements to IEx and improved IO, File and Macro support.&lt;/p&gt;

&lt;h2 id=&quot;whats-new&quot;&gt;What’s new&lt;/h2&gt;

&lt;p&gt;When &lt;a href=&quot;/blog/2012/05/25/elixir-v0-5-0-released/&quot;&gt;we released version v0.5.0&lt;/a&gt;, we have set three major goals for release v0.6.0:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Provide a build tool that makes it easy to create, compile and test Elixir projects;&lt;/li&gt;
  &lt;li&gt;Support &lt;a href=&quot;http://www.erlang.org/doc/reference_manual/typespec.html&quot;&gt;Erlang typespecs&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;Improve IO and File modules to be more robust and complete.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our interactive shell (IEx) also had many improvements, thanks to the Elixir developer community. We now have easy access to documentation, remote shells, autocomplete and much more. In order to show you a bit of what you can do in this release, we have prepared a short (~6 min) screencast:&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/46709928&quot; title=&quot;Elixir v0.6 quick tour - Mix and IEx&quot; class=&quot;video&quot; width=&quot;600&quot; height=&quot;337&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/46709928&quot;&gt;Elixir v0.6 quick tour - Mix and IEx&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/user3182384&quot;&gt;Plataformatec&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s it. For the next months, we will continue improving Elixir (you can see some ideas floating around in the &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues&quot;&gt;issues tracker&lt;/a&gt;) but we will start to focus on other tools and libraries for the community.&lt;/p&gt;

&lt;p&gt;Thank you and don’t forget to &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;give Elixir a try&lt;/a&gt;!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>Elixir v0.5.0 released</title>
  <link href="http://elixir-lang.org/blog/2012/05/25/elixir-v0-5-0-released/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2012-05-25T00:00:00+00:00</updated>
  <id>/blog/2012/05/25/elixir-v0-5-0-released</id>
  <content type="html">&lt;p&gt;We have finally released &lt;a href=&quot;/&quot;&gt;Elixir&lt;/a&gt; v0.5.0! This marks the first release since the language was rewritten. In this blog post, we will discuss what we achieved during this time and what are the next steps!&lt;/p&gt;

&lt;p&gt;If you don’t care about any of these, you can go straight to our &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt;. If you do, keep on reading!&lt;/p&gt;

&lt;h2 id=&quot;looking-back&quot;&gt;Looking back&lt;/h2&gt;

&lt;p&gt;I have started working in Elixir at the beginning of 2011. Around April that year, I had released the version v0.3.0 that was stable enough for me to start using in my own projects. However, after using it in a couple projects quickly reviewed that I was not happy with some of the design decisions taken early on.&lt;/p&gt;

&lt;p&gt;At that time, Elixir attempted to be a considerable departure from Erlang and that revealed very fast to a bad design decision because, in order to use any Erlang module, we first would have to provide an Elixir wrapper for it. Any new function or module in new Erlang releases would have to be wrapped first in Elixir, which means we would always play catch up with Erlang.&lt;/p&gt;

&lt;p&gt;After not feeling productive enough with that Elixir version, I have decided to take a break from Elixir to study old, new and emerging languages. The challenge was to not re-invent Erlang as a language, but how to provide the productivity and flexibility I expect from Elixir while staying a 100% compatible with Erlang.&lt;/p&gt;

&lt;p&gt;It was around October 2011, during a short stay in San Francisco, that I came up with what would be &lt;a href=&quot;https://github.com/josevalim/lego-lang&quot;&gt;the foundation of Elixir’s current version&lt;/a&gt; with the help of Yehuda Katz. Development of the new Elixir version started a few days before 2012 and continued steady when the new year came in.&lt;/p&gt;

&lt;p&gt;Around February of that year, feeling confident enough about the direction the language was moving (and initial benchmarks I had made at that point), I have pitched Elixir to &lt;a href=&quot;http://plataformatec.com.br/&quot;&gt;my company, Plataformatec&lt;/a&gt;, and they have accepted to sponsor Elixir. With their help, Elixir developed even faster and that’s what we are going to take a look next.&lt;/p&gt;

&lt;h2 id=&quot;where-we-are&quot;&gt;Where we are&lt;/h2&gt;

&lt;p&gt;One of the goals we have set was to have a good website and documentation before the next official release. With the help of the Plataformatec team, we created a logo for Elixir and put this website live.&lt;/p&gt;

&lt;p&gt;At the same time, &lt;a href=&quot;https://bitbucket.org/birkenfeld/pygments-main/pull-request/57/add-elixir-and-elixir-console-lexers&quot;&gt;we were working on pygments support&lt;/a&gt;, a &lt;a href=&quot;https://github.com/elixir-lang/ex_doc&quot;&gt;documentation generation tool&lt;/a&gt; and many others. Soon, GitHub was able to syntax highlight Elixir code and &lt;a href=&quot;/&quot;&gt;our API documentation was online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the same time, people started to gather around #elixir-lang channel on irc.freenode.net (now migrated to #elixir on irc.libera.chat) to &lt;a href=&quot;https://github.com/elixir-lang/elixir/tree/main/lib/mix&quot;&gt;play with Elixir&lt;/a&gt;, &lt;a href=&quot;https://github.com/guedes/exdate&quot;&gt;start their&lt;/a&gt; &lt;a href=&quot;https://github.com/yrashk/validatex&quot;&gt;own projects&lt;/a&gt; and &lt;a href=&quot;https://github.com/alco/elixir/wiki/Erlang-Syntax:-A-Crash-Course&quot;&gt;tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although the initial release was scheduled to April 2012, the feedback from such early developers forced us to review some design and syntax decisions and were extremely important to shape the language as it is today.&lt;/p&gt;

&lt;p&gt;With v0.5.0 finally out, we are committing to a stable syntax and a basic standard library. In the last couple days before the release, we have been working on streamlining the documentation and ensure Elixir works on Mac, Linux and Windows machines!&lt;/p&gt;

&lt;h2 id=&quot;looking-forward&quot;&gt;Looking forward&lt;/h2&gt;

&lt;p&gt;There are still many, many things to do! In the next months, we will continue working on growing our community, talks and other documentation material. A huge thanks to &lt;a href=&quot;https://twitter.com/true_droid&quot;&gt;Alexei Sholik&lt;/a&gt; who is moving this area forward.&lt;/p&gt;

&lt;p&gt;We will also work on better integration and documentation on building Erlang systems. Erlang ships with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_Telecom_Platform&quot;&gt;Open Telecom Platform&lt;/a&gt; which provides many tools to build distributed applications. In v0.5.0, all these tools are already available but we want to make the build process even simpler.&lt;/p&gt;

&lt;p&gt;In parallel, we will improve our &lt;a href=&quot;https://github.com/elixir-lang/ex_doc&quot;&gt;documentation generation tool&lt;/a&gt; and &lt;a href=&quot;https://github.com/elixir-lang/elixir/tree/main/lib/mix&quot;&gt;build tool&lt;/a&gt; which will likely be merged into core when they are solid enough.&lt;/p&gt;

&lt;p&gt;Finally, we will continue improving the Standard Library. Although Elixir’s goal is to rely on Erlang the most as possible, we also want to provide a small Standard Library which makes better use of Elixir semantics. For the next weeks, we will focus on improving the IO and File manipulation modules. New data types may also appear, for example, ranges come to my mind.&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&quot;/&quot;&gt;home page&lt;/a&gt; and the &lt;a href=&quot;/getting-started/introduction.html&quot;&gt;getting started guide&lt;/a&gt; for more information. Welcome aboard and grab a cup of Elixir, because you are certainly going to enjoy the ride!&lt;/p&gt;
</content>
</entry>

<entry>
  <title>A peek inside Elixir's Parallel Compiler</title>
  <link href="http://elixir-lang.org/blog/2012/04/24/a-peek-inside-elixir-s-parallel-compiler/"/>
  
  <author>
    <name>José Valim</name>
  </author>
  
  <updated>2012-04-24T00:00:00+00:00</updated>
  <id>/blog/2012/04/24/a-peek-inside-elixir-s-parallel-compiler</id>
  <content type="html">&lt;p&gt;Today, a parallel compiler just landed in Elixir main. The goal of the parallel compiler is to compile files in parallel, automatically detecting dependencies between files. In this blog post, we are going to take a peek into the parallel compiler internals and learn more about Erlang and Elixir in the process.&lt;/p&gt;

&lt;h2 id=&quot;process-based-serial-compilation&quot;&gt;Process-based serial compilation&lt;/h2&gt;

&lt;p&gt;The idea of the parallel compiler is very simple: for each file we want to compile, we will spawn a new process that will be responsible for its compilation. When compilation finishes, the process is going to send a message to the main process (the one responsible for coordinating compilation) that compilation finished so a new file can be compiled.&lt;/p&gt;

&lt;p&gt;In Elixir, we could write this code as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def spawn_compilers([current | files], output) do
  parent = Process.self()
  child  = spawn_link(fn -&amp;gt;
    :elixir_compiler.file_to_path(current, output)
    send parent, { :compiled, Process.self() }
  end)
  receive do
    { :compiled, ^child } -&amp;gt;
      spawn_compilers(files, output)
    { :EXIT, ^child, { reason, where } } -&amp;gt;
      :erlang.raise(:error, reason, where)
  end
end

def spawn_compilers([], _output) do
  :done
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the first line, we define a function named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers&lt;/code&gt; that receives two arguments, the first is a list of files to compile and the second is a string telling us where to write the compiled file. The first argument is represented as a list with head and tail (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[current | files]&lt;/code&gt;) where the top of the list is assigned to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current&lt;/code&gt; and the remaining items to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;files&lt;/code&gt;. If the list is empty, the first clause of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers&lt;/code&gt; is not going to match, the clause &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers([], _output)&lt;/code&gt; defined at the end will instead.&lt;/p&gt;

&lt;p&gt;Inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers&lt;/code&gt;, we first retrieve the PID of the current process with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.self&lt;/code&gt; (remember we are talking about Erlang processes/actors and not OS processes) and then proceed to spawn a new process to execute the given function in parallel. Spawning a new process is done with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_link&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_link&lt;/code&gt; function starts a new process and automatically links the current (parent) process with the spawned (child) one, returning the child PID. By linking the process we ensure that, if the child process dies, a message will be sent to the parent process which then can act on it.&lt;/p&gt;

&lt;p&gt;The function given to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_link&lt;/code&gt; is quite straight-forward. It simply invokes an Erlang function as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:elixir_compiler.file_to_path&lt;/code&gt; and then proceeds to send a message to the parent process notifying that compilation finished.&lt;/p&gt;

&lt;p&gt;After the child process is spawned, we invoke the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; macro and start waiting for messages. At this point, we are expecting two types of messages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :compiled, ^child }&lt;/code&gt; - a message sent by the child informing us that compilation finished. Note that use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt; before the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child&lt;/code&gt; to tell Elixir to match the current value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child&lt;/code&gt; with the one received in the message. If compilation succeeds, we move forward and spawn the next child by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers&lt;/code&gt; recursively;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :EXIT, ^child, { reason, where } }&lt;/code&gt; - this is the message sent by the child process in case it dies. This message is only received if the child is started via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_link&lt;/code&gt;. In the message, we can find the reason why it failed and the stacktrace. We then proceed to call an Erlang internal function to re-raise the error in the main process, effectively stopping compilation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this code, we were able to compile each file inside a different process. However, notice that we are not yet compiling in parallel. Every time we spawn a child process, we wait until it succeeds (or fails) before moving to the next step. We are going to eventually compile files in parallel, but before we reach to this point, let’s understand the problem of dependencies between files.&lt;/p&gt;

&lt;h2 id=&quot;dependency-between-files&quot;&gt;Dependency between files&lt;/h2&gt;

&lt;p&gt;Imagine that we have two files, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.ex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.ex&lt;/code&gt;, with the following contents:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# a.ex
defmodule A do
  B.define
end

# b.ex
defmodule B do
  defmacro define do
    quote do
      def one, do: 1
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order to compile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, we need to ensure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is already compiled and loaded so we can invoke the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;define&lt;/code&gt; macro. This means the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.ex&lt;/code&gt; depends on the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.ex&lt;/code&gt;. When compiling files in parallel, we want to be able to detect such cases and automatically handle them.&lt;/p&gt;

&lt;p&gt;The way we are going to handle this is by pausing compilation every time a module that was not yet defined is invoked. In this case, when compiling the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.ex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B.define&lt;/code&gt; is invoked, the process responsible for compiling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.ex&lt;/code&gt; is going to pause and notify our main process. The main process will then start the compilation of other files. Whenever the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is compiled, the main process is going to tell the process responsible for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.ex&lt;/code&gt; to resume compilation since its dependency &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; is now available.&lt;/p&gt;

&lt;p&gt;In order to customize this process, we are going to take a look at Erlang’s error handler.&lt;/p&gt;

&lt;h2 id=&quot;custom-error-handler&quot;&gt;Custom error handler&lt;/h2&gt;

&lt;p&gt;By default, Elixir (and Erlang) code is autoloaded. This means that, if we invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List.delete&lt;/code&gt; and the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; was not loaded yet, the Erlang VM is going to look into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ebin&lt;/code&gt; directory (the directory where we put compiled files) and try to load it. This process is controlled by the &lt;a href=&quot;http://www.erlang.org/doc/man/error_handler.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error_handler&lt;/code&gt; module in Erlang&lt;/a&gt; via two callback functions: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined_function&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined_lambda&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As discussed in the previous section, we want to extend the error handler to actually stop the currently running process whenever a module is not found and resume the process only after we ensure the module is compiled. To do that, we can simply define our own error handler and ask Erlang to use it. Our custom error handler is defined as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defmodule Elixir.ErrorHandler do
  def undefined_function(module, fun, args) do
    ensure_loaded(module)
    :error_handler.undefined_function(module, fun, args)
  end

  def undefined_lambda(module, fun, args) do
    ensure_loaded(module)
    :error_handler.undefined_lambda(module, fun, args)
  end

  defp ensure_loaded(module) do
    case Code.ensure_loaded(module) do
      { :module, _ } -&amp;gt;
        []
      { :error, _ } -&amp;gt;
        parent = Process.get(:elixir_parent_compiler)
        send parent, { :waiting, Process.self, module }
        receive do
          { :release, ^parent } -&amp;gt; ensure_loaded(module)
        end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our error handler defines two public functions. Both those functions are callbacks required to be implemented by the error handler. They simply call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure_loaded(module)&lt;/code&gt; and then delegate the remaining logic to Erlang’s original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error_handler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The private &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ensure_loaded&lt;/code&gt; function calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code.ensure_loaded(module)&lt;/code&gt; which checks if the given module is loaded and, if not, tries to load it. In case it succeeds, it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :module, _ }&lt;/code&gt;, which means the module is available and we don’t need to stop the current process. However, if it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :error, _ }&lt;/code&gt;, it means the module cannot be found and we need to wait until it is compiled. For that, we invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process.get(:elixir_parent_compiler)&lt;/code&gt; to get the PID of the main process so we can notify it that we are waiting on a given module. Then we invoke the macro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; as a way to stop the current process until we receive a message from the parent saying new modules are available, starting the flow again.&lt;/p&gt;

&lt;p&gt;With our error handler code in place, the first thing we need to do is to change the function given to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_link&lt;/code&gt; to use the new error handler:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spawn_link(fn -&amp;gt;
  Process.put(:elixir_parent_compiler, parent)
  Process.flag(:error_handler, Elixir.ErrorHandler)

  :elixir_compiler.file_to_path(current, output)
  send parent, { :compiled, Process.self() }
end)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that we have two small additions. First we store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:elixir_parent_compiler&lt;/code&gt; PID in the process dictionary so we are able to read it from the error handler and then we proceed to configure a flag in our process so our new error handler is invoked whenever a module or function cannot be found.&lt;/p&gt;

&lt;p&gt;Second, our main process can now receive a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :waiting, child, module }&lt;/code&gt; message, so we need to extend it to account for those messages. Not only that, we need to control which PIDs we have spawned so we can notify them whenever a new module is compiled, forcing us to add a new argument to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers&lt;/code&gt; function. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers&lt;/code&gt; would then be rewritten as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def spawn_compilers([current | files], output, stack) do
  parent = Process.self()
  child  = spawn_link(fn -&amp;gt;
    :elixir_compiler.file_to_path(current, output)
    send parent, { :compiled, Process.self() }
  end)
  wait_for_messages(files, output, [child | stack])
end

# No more files and stack is empty, we are done
def spawn_compilers([], _output, []) do
  :done
end

# No more files and stack is not empty, wait for all messages
def spawn_compilers([], output, stack) do
  wait_for_messages([], output, stack)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice we added an extra clause to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spawn_compilers&lt;/code&gt; so we can properly handle the case where we don’t have more files to spawn but we are still waiting for processes in the stack. We have also moved our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;receive&lt;/code&gt; logic to a new private function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait_for_messages&lt;/code&gt;, implemented as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defp wait_for_messages(files, output, stack) do
  receive do
    { :compiled, child } -&amp;gt;
      new_stack = List.delete(stack, child)
      Enum.each new_stack, fn(pid) -&amp;gt;
        send pid, { :release, Process.self }
      end
      spawn_compilers(files, output, new_stack)
    { :waiting, _child, _module } -&amp;gt;
      spawn_compilers(files, output, stack)
    { :EXIT, _child, { reason, where } } -&amp;gt;
      :erlang.raise(:error, reason, where)
  after
    10_000 -&amp;gt;
      raise &quot;dependency on nonexistent module or possible deadlock&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The implementation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wait_for_messages&lt;/code&gt; is now broken into 4 clauses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :compiled, child }&lt;/code&gt; - Similar as before, it is the notification a child processed finished compilation. Every time we receive such notifications, we remove the child PID from the stack and notify the remaining PIDs in the stack that new modules are available. Notice that we no longer match on a specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^child&lt;/code&gt; PID, since now we can receive messages from different children at the same time;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :waiting, _child, _module }&lt;/code&gt; - A message received every time a child process is waiting on a module to be compiled. In this scenario, all we do is spawn a new process to compile another file, ensuring compilation is never blocked;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ :EXIT, _child, { reason, where } }&lt;/code&gt; - The same behaviour as before, it simply raises an error if any of the child processes fail;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;after: 10_000&lt;/code&gt; - This clause is going to be invoked whenever the main process does not receive a message for 10 seconds. This means a file depends on a module that does not exist (and therefore waits forever) or there is a cyclic dependency;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that’s all we need to have a basic version of our parallel compilation working. Notice we start compiling only one file at a time but, as soon as we depend on other files, the number of PIDs in the stack starts to grow. If we wanted, we could modify the code to make use of a head start and compile more than one file since the beginning.&lt;/p&gt;

&lt;p&gt;It is important to notice that this code has room for improvements. First, every time a new module is compiled, we notify all child process that new modules are available. This is a waste of resource if we consider that the child modules tells us explicitly on which modules they are waiting on. Therefore, the code could be modified to store a mapping from each child process to the module it is waiting for so that when a new module is compiled, only the children that depend on it are notified.&lt;/p&gt;

&lt;p&gt;Also, if we start storing which module each process is depending on, we are able to know whenever we have a deadlock or a dependency on an nonexistent file, allowing us to get rid of the timeout.&lt;/p&gt;

&lt;p&gt;All those improvements and other goodies like callbacks are implemented in Elixir source code and we recommend you take a look at both the &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/6182602f1205e2d9fc54666e0721270a27226fbc/lib/elixir/parallel_compiler.ex&quot;&gt;Elixir.ParallelCompiler&lt;/a&gt; and &lt;a href=&quot;https://github.com/elixir-lang/elixir/blob/6182602f1205e2d9fc54666e0721270a27226fbc/lib/elixir/error_handler.ex&quot;&gt;Elixir.ErrorHandler&lt;/a&gt; modules to see all the details firsthand.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
</entry>


</feed>
